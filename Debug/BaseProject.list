
BaseProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000028e8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003ac  08002a78  08002a78  00012a78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e24  08002e24  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  08002e24  08002e24  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002e24  08002e24  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e24  08002e24  00012e24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002e28  08002e28  00012e28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08002e2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000278  20000088  08002eb4  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000300  08002eb4  00020300  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00004436  00000000  00000000  000200fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000f72  00000000  00000000  00024531  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000568  00000000  00000000  000254a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000003ef  00000000  00000000  00025a10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000382c  00000000  00000000  00025dff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00005cea  00000000  00000000  0002962b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0005a61e  00000000  00000000  0002f315  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000021b0  00000000  00000000  00089934  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000044  00000000  00000000  0008bae4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08002a60 	.word	0x08002a60

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	08002a60 	.word	0x08002a60

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <RCC_GetClocksFreq>:
  *           configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000280:	b480      	push	{r7}
 8000282:	b08b      	sub	sp, #44	; 0x2c
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0, presc = 0, pllclk = 0;
 8000288:	2300      	movs	r3, #0
 800028a:	623b      	str	r3, [r7, #32]
 800028c:	2300      	movs	r3, #0
 800028e:	61fb      	str	r3, [r7, #28]
 8000290:	2300      	movs	r3, #0
 8000292:	61bb      	str	r3, [r7, #24]
 8000294:	2300      	movs	r3, #0
 8000296:	617b      	str	r3, [r7, #20]
 8000298:	2300      	movs	r3, #0
 800029a:	613b      	str	r3, [r7, #16]
 800029c:	2300      	movs	r3, #0
 800029e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t apb2presc = 0, ahbpresc = 0;
 80002a0:	2300      	movs	r3, #0
 80002a2:	60fb      	str	r3, [r7, #12]
 80002a4:	2300      	movs	r3, #0
 80002a6:	60bb      	str	r3, [r7, #8]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80002a8:	4b8b      	ldr	r3, [pc, #556]	; (80004d8 <RCC_GetClocksFreq+0x258>)
 80002aa:	685b      	ldr	r3, [r3, #4]
 80002ac:	f003 030c 	and.w	r3, r3, #12
 80002b0:	623b      	str	r3, [r7, #32]
  
  switch (tmp)
 80002b2:	6a3b      	ldr	r3, [r7, #32]
 80002b4:	2b08      	cmp	r3, #8
 80002b6:	d011      	beq.n	80002dc <RCC_GetClocksFreq+0x5c>
 80002b8:	6a3b      	ldr	r3, [r7, #32]
 80002ba:	2b08      	cmp	r3, #8
 80002bc:	d837      	bhi.n	800032e <RCC_GetClocksFreq+0xae>
 80002be:	6a3b      	ldr	r3, [r7, #32]
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d003      	beq.n	80002cc <RCC_GetClocksFreq+0x4c>
 80002c4:	6a3b      	ldr	r3, [r7, #32]
 80002c6:	2b04      	cmp	r3, #4
 80002c8:	d004      	beq.n	80002d4 <RCC_GetClocksFreq+0x54>
 80002ca:	e030      	b.n	800032e <RCC_GetClocksFreq+0xae>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	4a83      	ldr	r2, [pc, #524]	; (80004dc <RCC_GetClocksFreq+0x25c>)
 80002d0:	601a      	str	r2, [r3, #0]
      break;
 80002d2:	e030      	b.n	8000336 <RCC_GetClocksFreq+0xb6>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	4a81      	ldr	r2, [pc, #516]	; (80004dc <RCC_GetClocksFreq+0x25c>)
 80002d8:	601a      	str	r2, [r3, #0]
      break;
 80002da:	e02c      	b.n	8000336 <RCC_GetClocksFreq+0xb6>
    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 80002dc:	4b7e      	ldr	r3, [pc, #504]	; (80004d8 <RCC_GetClocksFreq+0x258>)
 80002de:	685b      	ldr	r3, [r3, #4]
 80002e0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80002e4:	61fb      	str	r3, [r7, #28]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 80002e6:	4b7c      	ldr	r3, [pc, #496]	; (80004d8 <RCC_GetClocksFreq+0x258>)
 80002e8:	685b      	ldr	r3, [r3, #4]
 80002ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80002ee:	61bb      	str	r3, [r7, #24]
      pllmull = ( pllmull >> 18) + 2;
 80002f0:	69fb      	ldr	r3, [r7, #28]
 80002f2:	0c9b      	lsrs	r3, r3, #18
 80002f4:	3302      	adds	r3, #2
 80002f6:	61fb      	str	r3, [r7, #28]
      
      if (pllsource == 0x00)
 80002f8:	69bb      	ldr	r3, [r7, #24]
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d105      	bne.n	800030a <RCC_GetClocksFreq+0x8a>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        pllclk = (HSI_VALUE >> 1) * pllmull;
 80002fe:	69fb      	ldr	r3, [r7, #28]
 8000300:	4a77      	ldr	r2, [pc, #476]	; (80004e0 <RCC_GetClocksFreq+0x260>)
 8000302:	fb02 f303 	mul.w	r3, r2, r3
 8000306:	627b      	str	r3, [r7, #36]	; 0x24
 8000308:	e00d      	b.n	8000326 <RCC_GetClocksFreq+0xa6>
      }
      else
      {
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 800030a:	4b73      	ldr	r3, [pc, #460]	; (80004d8 <RCC_GetClocksFreq+0x258>)
 800030c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800030e:	f003 030f 	and.w	r3, r3, #15
 8000312:	3301      	adds	r3, #1
 8000314:	617b      	str	r3, [r7, #20]
        /* HSE oscillator clock selected as PREDIV1 clock entry */
        pllclk = (HSE_VALUE / prediv1factor) * pllmull; 
 8000316:	4a71      	ldr	r2, [pc, #452]	; (80004dc <RCC_GetClocksFreq+0x25c>)
 8000318:	697b      	ldr	r3, [r7, #20]
 800031a:	fbb2 f2f3 	udiv	r2, r2, r3
 800031e:	69fb      	ldr	r3, [r7, #28]
 8000320:	fb02 f303 	mul.w	r3, r2, r3
 8000324:	627b      	str	r3, [r7, #36]	; 0x24
      }
      RCC_Clocks->SYSCLK_Frequency = pllclk;      
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800032a:	601a      	str	r2, [r3, #0]
      break;
 800032c:	e003      	b.n	8000336 <RCC_GetClocksFreq+0xb6>
    default: /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	4a6a      	ldr	r2, [pc, #424]	; (80004dc <RCC_GetClocksFreq+0x25c>)
 8000332:	601a      	str	r2, [r3, #0]
      break;
 8000334:	bf00      	nop
  }
    /* Compute HCLK, PCLK clocks frequencies -----------------------------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8000336:	4b68      	ldr	r3, [pc, #416]	; (80004d8 <RCC_GetClocksFreq+0x258>)
 8000338:	685b      	ldr	r3, [r3, #4]
 800033a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800033e:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 8000340:	6a3b      	ldr	r3, [r7, #32]
 8000342:	091b      	lsrs	r3, r3, #4
 8000344:	623b      	str	r3, [r7, #32]
  ahbpresc = APBAHBPrescTable[tmp]; 
 8000346:	4a67      	ldr	r2, [pc, #412]	; (80004e4 <RCC_GetClocksFreq+0x264>)
 8000348:	6a3b      	ldr	r3, [r7, #32]
 800034a:	4413      	add	r3, r2
 800034c:	781b      	ldrb	r3, [r3, #0]
 800034e:	b2db      	uxtb	r3, r3
 8000350:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> ahbpresc;
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	681a      	ldr	r2, [r3, #0]
 8000356:	68bb      	ldr	r3, [r7, #8]
 8000358:	40da      	lsrs	r2, r3
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 800035e:	4b5e      	ldr	r3, [pc, #376]	; (80004d8 <RCC_GetClocksFreq+0x258>)
 8000360:	685b      	ldr	r3, [r3, #4]
 8000362:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000366:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 8;
 8000368:	6a3b      	ldr	r3, [r7, #32]
 800036a:	0a1b      	lsrs	r3, r3, #8
 800036c:	623b      	str	r3, [r7, #32]
  presc = APBAHBPrescTable[tmp];
 800036e:	4a5d      	ldr	r2, [pc, #372]	; (80004e4 <RCC_GetClocksFreq+0x264>)
 8000370:	6a3b      	ldr	r3, [r7, #32]
 8000372:	4413      	add	r3, r2
 8000374:	781b      	ldrb	r3, [r3, #0]
 8000376:	b2db      	uxtb	r3, r3
 8000378:	613b      	str	r3, [r7, #16]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	685a      	ldr	r2, [r3, #4]
 800037e:	693b      	ldr	r3, [r7, #16]
 8000380:	40da      	lsrs	r2, r3
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	609a      	str	r2, [r3, #8]
  
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8000386:	4b54      	ldr	r3, [pc, #336]	; (80004d8 <RCC_GetClocksFreq+0x258>)
 8000388:	685b      	ldr	r3, [r3, #4]
 800038a:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800038e:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 11;
 8000390:	6a3b      	ldr	r3, [r7, #32]
 8000392:	0adb      	lsrs	r3, r3, #11
 8000394:	623b      	str	r3, [r7, #32]
  apb2presc = APBAHBPrescTable[tmp];
 8000396:	4a53      	ldr	r2, [pc, #332]	; (80004e4 <RCC_GetClocksFreq+0x264>)
 8000398:	6a3b      	ldr	r3, [r7, #32]
 800039a:	4413      	add	r3, r2
 800039c:	781b      	ldrb	r3, [r3, #0]
 800039e:	b2db      	uxtb	r3, r3
 80003a0:	60fb      	str	r3, [r7, #12]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> apb2presc;
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	685a      	ldr	r2, [r3, #4]
 80003a6:	68fb      	ldr	r3, [r7, #12]
 80003a8:	40da      	lsrs	r2, r3
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	60da      	str	r2, [r3, #12]
  
  /* Get ADC12CLK prescaler */
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE12;
 80003ae:	4b4a      	ldr	r3, [pc, #296]	; (80004d8 <RCC_GetClocksFreq+0x258>)
 80003b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80003b2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80003b6:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 80003b8:	6a3b      	ldr	r3, [r7, #32]
 80003ba:	091b      	lsrs	r3, r3, #4
 80003bc:	623b      	str	r3, [r7, #32]
  presc = ADCPrescTable[tmp];
 80003be:	4a4a      	ldr	r2, [pc, #296]	; (80004e8 <RCC_GetClocksFreq+0x268>)
 80003c0:	6a3b      	ldr	r3, [r7, #32]
 80003c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80003c6:	b29b      	uxth	r3, r3
 80003c8:	613b      	str	r3, [r7, #16]
  if ((presc & 0x10) != 0)
 80003ca:	693b      	ldr	r3, [r7, #16]
 80003cc:	f003 0310 	and.w	r3, r3, #16
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d006      	beq.n	80003e2 <RCC_GetClocksFreq+0x162>
  {
     /* ADC12CLK clock frequency is derived from PLL clock */
     RCC_Clocks->ADC12CLK_Frequency = pllclk / presc;
 80003d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80003d6:	693b      	ldr	r3, [r7, #16]
 80003d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	611a      	str	r2, [r3, #16]
 80003e0:	e003      	b.n	80003ea <RCC_GetClocksFreq+0x16a>
  }
  else
  {
   /* ADC12CLK clock frequency is AHB clock */
     RCC_Clocks->ADC12CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	681a      	ldr	r2, [r3, #0]
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	611a      	str	r2, [r3, #16]
  }
  
  /* Get ADC34CLK prescaler */
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE34;
 80003ea:	4b3b      	ldr	r3, [pc, #236]	; (80004d8 <RCC_GetClocksFreq+0x258>)
 80003ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80003ee:	f403 5378 	and.w	r3, r3, #15872	; 0x3e00
 80003f2:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 9;
 80003f4:	6a3b      	ldr	r3, [r7, #32]
 80003f6:	0a5b      	lsrs	r3, r3, #9
 80003f8:	623b      	str	r3, [r7, #32]
  presc = ADCPrescTable[tmp];
 80003fa:	4a3b      	ldr	r2, [pc, #236]	; (80004e8 <RCC_GetClocksFreq+0x268>)
 80003fc:	6a3b      	ldr	r3, [r7, #32]
 80003fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000402:	b29b      	uxth	r3, r3
 8000404:	613b      	str	r3, [r7, #16]
  if ((presc & 0x10) != 0)
 8000406:	693b      	ldr	r3, [r7, #16]
 8000408:	f003 0310 	and.w	r3, r3, #16
 800040c:	2b00      	cmp	r3, #0
 800040e:	d006      	beq.n	800041e <RCC_GetClocksFreq+0x19e>
  {
     /* ADC34CLK clock frequency is derived from PLL clock */
     RCC_Clocks->ADC34CLK_Frequency = pllclk / presc;
 8000410:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000412:	693b      	ldr	r3, [r7, #16]
 8000414:	fbb2 f2f3 	udiv	r2, r2, r3
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	615a      	str	r2, [r3, #20]
 800041c:	e003      	b.n	8000426 <RCC_GetClocksFreq+0x1a6>
  }
  else
  {
   /* ADC34CLK clock frequency is AHB clock */
     RCC_Clocks->ADC34CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	681a      	ldr	r2, [r3, #0]
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	615a      	str	r2, [r3, #20]
  }

  /* I2C1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C1SW) != RCC_CFGR3_I2C1SW)
 8000426:	4b2c      	ldr	r3, [pc, #176]	; (80004d8 <RCC_GetClocksFreq+0x258>)
 8000428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800042a:	f003 0310 	and.w	r3, r3, #16
 800042e:	2b10      	cmp	r3, #16
 8000430:	d003      	beq.n	800043a <RCC_GetClocksFreq+0x1ba>
  {
    /* I2C1 Clock is HSI Osc. */
    RCC_Clocks->I2C1CLK_Frequency = HSI_VALUE;
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	4a29      	ldr	r2, [pc, #164]	; (80004dc <RCC_GetClocksFreq+0x25c>)
 8000436:	619a      	str	r2, [r3, #24]
 8000438:	e003      	b.n	8000442 <RCC_GetClocksFreq+0x1c2>
  }
  else
  {
    /* I2C1 Clock is System Clock */
    RCC_Clocks->I2C1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	681a      	ldr	r2, [r3, #0]
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	619a      	str	r2, [r3, #24]
  }

  /* I2C2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C2SW) != RCC_CFGR3_I2C2SW)
 8000442:	4b25      	ldr	r3, [pc, #148]	; (80004d8 <RCC_GetClocksFreq+0x258>)
 8000444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000446:	f003 0320 	and.w	r3, r3, #32
 800044a:	2b20      	cmp	r3, #32
 800044c:	d003      	beq.n	8000456 <RCC_GetClocksFreq+0x1d6>
  {
    /* I2C2 Clock is HSI Osc. */
    RCC_Clocks->I2C2CLK_Frequency = HSI_VALUE;
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	4a22      	ldr	r2, [pc, #136]	; (80004dc <RCC_GetClocksFreq+0x25c>)
 8000452:	61da      	str	r2, [r3, #28]
 8000454:	e003      	b.n	800045e <RCC_GetClocksFreq+0x1de>
  }
  else
  {
    /* I2C2 Clock is System Clock */
    RCC_Clocks->I2C2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	681a      	ldr	r2, [r3, #0]
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	61da      	str	r2, [r3, #28]
  }
  
    /* TIM1CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM1SW) == RCC_CFGR3_TIM1SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 800045e:	4b1e      	ldr	r3, [pc, #120]	; (80004d8 <RCC_GetClocksFreq+0x258>)
 8000460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000462:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000466:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800046a:	d10d      	bne.n	8000488 <RCC_GetClocksFreq+0x208>
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000472:	429a      	cmp	r2, r3
 8000474:	d108      	bne.n	8000488 <RCC_GetClocksFreq+0x208>
  && (apb2presc == ahbpresc)) 
 8000476:	68fa      	ldr	r2, [r7, #12]
 8000478:	68bb      	ldr	r3, [r7, #8]
 800047a:	429a      	cmp	r2, r3
 800047c:	d104      	bne.n	8000488 <RCC_GetClocksFreq+0x208>
  {
    /* TIM1 Clock is 2 * pllclk */
    RCC_Clocks->TIM1CLK_Frequency = pllclk * 2;
 800047e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000480:	005a      	lsls	r2, r3, #1
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	621a      	str	r2, [r3, #32]
 8000486:	e003      	b.n	8000490 <RCC_GetClocksFreq+0x210>
  }
  else
  {
    /* TIM1 Clock is APB2 clock. */
    RCC_Clocks->TIM1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	68da      	ldr	r2, [r3, #12]
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	621a      	str	r2, [r3, #32]
  }

    /* TIM8CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM8SW) == RCC_CFGR3_TIM8SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 8000490:	4b11      	ldr	r3, [pc, #68]	; (80004d8 <RCC_GetClocksFreq+0x258>)
 8000492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000494:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000498:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800049c:	d10d      	bne.n	80004ba <RCC_GetClocksFreq+0x23a>
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80004a4:	429a      	cmp	r2, r3
 80004a6:	d108      	bne.n	80004ba <RCC_GetClocksFreq+0x23a>
  && (apb2presc == ahbpresc))
 80004a8:	68fa      	ldr	r2, [r7, #12]
 80004aa:	68bb      	ldr	r3, [r7, #8]
 80004ac:	429a      	cmp	r2, r3
 80004ae:	d104      	bne.n	80004ba <RCC_GetClocksFreq+0x23a>
  {
    /* TIM8 Clock is 2 * pllclk */
    RCC_Clocks->TIM8CLK_Frequency = pllclk * 2;
 80004b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004b2:	005a      	lsls	r2, r3, #1
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	625a      	str	r2, [r3, #36]	; 0x24
 80004b8:	e003      	b.n	80004c2 <RCC_GetClocksFreq+0x242>
  }
  else
  {
    /* TIM8 Clock is APB2 clock. */
    RCC_Clocks->TIM8CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	68da      	ldr	r2, [r3, #12]
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	625a      	str	r2, [r3, #36]	; 0x24
  }
  
  /* USART1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == 0x0)
 80004c2:	4b05      	ldr	r3, [pc, #20]	; (80004d8 <RCC_GetClocksFreq+0x258>)
 80004c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004c6:	f003 0303 	and.w	r3, r3, #3
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d10e      	bne.n	80004ec <RCC_GetClocksFreq+0x26c>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	68da      	ldr	r2, [r3, #12]
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	629a      	str	r2, [r3, #40]	; 0x28
 80004d6:	e028      	b.n	800052a <RCC_GetClocksFreq+0x2aa>
 80004d8:	40021000 	.word	0x40021000
 80004dc:	007a1200 	.word	0x007a1200
 80004e0:	003d0900 	.word	0x003d0900
 80004e4:	20000000 	.word	0x20000000
 80004e8:	20000010 	.word	0x20000010
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_0)
 80004ec:	4b6c      	ldr	r3, [pc, #432]	; (80006a0 <RCC_GetClocksFreq+0x420>)
 80004ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004f0:	f003 0303 	and.w	r3, r3, #3
 80004f4:	2b01      	cmp	r3, #1
 80004f6:	d104      	bne.n	8000502 <RCC_GetClocksFreq+0x282>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	681a      	ldr	r2, [r3, #0]
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	629a      	str	r2, [r3, #40]	; 0x28
 8000500:	e013      	b.n	800052a <RCC_GetClocksFreq+0x2aa>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_1)
 8000502:	4b67      	ldr	r3, [pc, #412]	; (80006a0 <RCC_GetClocksFreq+0x420>)
 8000504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000506:	f003 0303 	and.w	r3, r3, #3
 800050a:	2b02      	cmp	r3, #2
 800050c:	d104      	bne.n	8000518 <RCC_GetClocksFreq+0x298>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART1CLK_Frequency = LSE_VALUE;
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000514:	629a      	str	r2, [r3, #40]	; 0x28
 8000516:	e008      	b.n	800052a <RCC_GetClocksFreq+0x2aa>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW)
 8000518:	4b61      	ldr	r3, [pc, #388]	; (80006a0 <RCC_GetClocksFreq+0x420>)
 800051a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800051c:	f003 0303 	and.w	r3, r3, #3
 8000520:	2b03      	cmp	r3, #3
 8000522:	d102      	bne.n	800052a <RCC_GetClocksFreq+0x2aa>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART1CLK_Frequency = HSI_VALUE;
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	4a5f      	ldr	r2, [pc, #380]	; (80006a4 <RCC_GetClocksFreq+0x424>)
 8000528:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* USART2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == 0x0)
 800052a:	4b5d      	ldr	r3, [pc, #372]	; (80006a0 <RCC_GetClocksFreq+0x420>)
 800052c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800052e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000532:	2b00      	cmp	r3, #0
 8000534:	d104      	bne.n	8000540 <RCC_GetClocksFreq+0x2c0>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	689a      	ldr	r2, [r3, #8]
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	62da      	str	r2, [r3, #44]	; 0x2c
 800053e:	e021      	b.n	8000584 <RCC_GetClocksFreq+0x304>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_0)
 8000540:	4b57      	ldr	r3, [pc, #348]	; (80006a0 <RCC_GetClocksFreq+0x420>)
 8000542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000544:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000548:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800054c:	d104      	bne.n	8000558 <RCC_GetClocksFreq+0x2d8>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	681a      	ldr	r2, [r3, #0]
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	62da      	str	r2, [r3, #44]	; 0x2c
 8000556:	e015      	b.n	8000584 <RCC_GetClocksFreq+0x304>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_1)
 8000558:	4b51      	ldr	r3, [pc, #324]	; (80006a0 <RCC_GetClocksFreq+0x420>)
 800055a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800055c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000560:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000564:	d104      	bne.n	8000570 <RCC_GetClocksFreq+0x2f0>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART2CLK_Frequency = LSE_VALUE;
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800056c:	62da      	str	r2, [r3, #44]	; 0x2c
 800056e:	e009      	b.n	8000584 <RCC_GetClocksFreq+0x304>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW)
 8000570:	4b4b      	ldr	r3, [pc, #300]	; (80006a0 <RCC_GetClocksFreq+0x420>)
 8000572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000574:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000578:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800057c:	d102      	bne.n	8000584 <RCC_GetClocksFreq+0x304>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART2CLK_Frequency = HSI_VALUE;
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	4a48      	ldr	r2, [pc, #288]	; (80006a4 <RCC_GetClocksFreq+0x424>)
 8000582:	62da      	str	r2, [r3, #44]	; 0x2c
  }    

  /* USART3CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == 0x0)
 8000584:	4b46      	ldr	r3, [pc, #280]	; (80006a0 <RCC_GetClocksFreq+0x420>)
 8000586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000588:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800058c:	2b00      	cmp	r3, #0
 800058e:	d104      	bne.n	800059a <RCC_GetClocksFreq+0x31a>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	689a      	ldr	r2, [r3, #8]
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	631a      	str	r2, [r3, #48]	; 0x30
 8000598:	e021      	b.n	80005de <RCC_GetClocksFreq+0x35e>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_0)
 800059a:	4b41      	ldr	r3, [pc, #260]	; (80006a0 <RCC_GetClocksFreq+0x420>)
 800059c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800059e:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80005a2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80005a6:	d104      	bne.n	80005b2 <RCC_GetClocksFreq+0x332>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	681a      	ldr	r2, [r3, #0]
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	631a      	str	r2, [r3, #48]	; 0x30
 80005b0:	e015      	b.n	80005de <RCC_GetClocksFreq+0x35e>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_1)
 80005b2:	4b3b      	ldr	r3, [pc, #236]	; (80006a0 <RCC_GetClocksFreq+0x420>)
 80005b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b6:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80005ba:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80005be:	d104      	bne.n	80005ca <RCC_GetClocksFreq+0x34a>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART3CLK_Frequency = LSE_VALUE;
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80005c6:	631a      	str	r2, [r3, #48]	; 0x30
 80005c8:	e009      	b.n	80005de <RCC_GetClocksFreq+0x35e>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW)
 80005ca:	4b35      	ldr	r3, [pc, #212]	; (80006a0 <RCC_GetClocksFreq+0x420>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ce:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80005d2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80005d6:	d102      	bne.n	80005de <RCC_GetClocksFreq+0x35e>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART3CLK_Frequency = HSI_VALUE;
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	4a32      	ldr	r2, [pc, #200]	; (80006a4 <RCC_GetClocksFreq+0x424>)
 80005dc:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
    /* UART4CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == 0x0)
 80005de:	4b30      	ldr	r3, [pc, #192]	; (80006a0 <RCC_GetClocksFreq+0x420>)
 80005e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d104      	bne.n	80005f4 <RCC_GetClocksFreq+0x374>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	689a      	ldr	r2, [r3, #8]
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	635a      	str	r2, [r3, #52]	; 0x34
 80005f2:	e021      	b.n	8000638 <RCC_GetClocksFreq+0x3b8>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_0)
 80005f4:	4b2a      	ldr	r3, [pc, #168]	; (80006a0 <RCC_GetClocksFreq+0x420>)
 80005f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80005fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8000600:	d104      	bne.n	800060c <RCC_GetClocksFreq+0x38c>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	681a      	ldr	r2, [r3, #0]
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	635a      	str	r2, [r3, #52]	; 0x34
 800060a:	e015      	b.n	8000638 <RCC_GetClocksFreq+0x3b8>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_1)
 800060c:	4b24      	ldr	r3, [pc, #144]	; (80006a0 <RCC_GetClocksFreq+0x420>)
 800060e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000610:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8000614:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8000618:	d104      	bne.n	8000624 <RCC_GetClocksFreq+0x3a4>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->UART4CLK_Frequency = LSE_VALUE;
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000620:	635a      	str	r2, [r3, #52]	; 0x34
 8000622:	e009      	b.n	8000638 <RCC_GetClocksFreq+0x3b8>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW)
 8000624:	4b1e      	ldr	r3, [pc, #120]	; (80006a0 <RCC_GetClocksFreq+0x420>)
 8000626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000628:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800062c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8000630:	d102      	bne.n	8000638 <RCC_GetClocksFreq+0x3b8>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART4CLK_Frequency = HSI_VALUE;
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	4a1b      	ldr	r2, [pc, #108]	; (80006a4 <RCC_GetClocksFreq+0x424>)
 8000636:	635a      	str	r2, [r3, #52]	; 0x34
  }   
  
  /* UART5CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == 0x0)
 8000638:	4b19      	ldr	r3, [pc, #100]	; (80006a0 <RCC_GetClocksFreq+0x420>)
 800063a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8000640:	2b00      	cmp	r3, #0
 8000642:	d104      	bne.n	800064e <RCC_GetClocksFreq+0x3ce>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	689a      	ldr	r2, [r3, #8]
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	639a      	str	r2, [r3, #56]	; 0x38
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW)
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART5CLK_Frequency = HSI_VALUE;
  } 
}
 800064c:	e021      	b.n	8000692 <RCC_GetClocksFreq+0x412>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_0)
 800064e:	4b14      	ldr	r3, [pc, #80]	; (80006a0 <RCC_GetClocksFreq+0x420>)
 8000650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000652:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8000656:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800065a:	d104      	bne.n	8000666 <RCC_GetClocksFreq+0x3e6>
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	681a      	ldr	r2, [r3, #0]
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000664:	e015      	b.n	8000692 <RCC_GetClocksFreq+0x412>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_1)
 8000666:	4b0e      	ldr	r3, [pc, #56]	; (80006a0 <RCC_GetClocksFreq+0x420>)
 8000668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066a:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800066e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8000672:	d104      	bne.n	800067e <RCC_GetClocksFreq+0x3fe>
    RCC_Clocks->UART5CLK_Frequency = LSE_VALUE;
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800067a:	639a      	str	r2, [r3, #56]	; 0x38
}
 800067c:	e009      	b.n	8000692 <RCC_GetClocksFreq+0x412>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW)
 800067e:	4b08      	ldr	r3, [pc, #32]	; (80006a0 <RCC_GetClocksFreq+0x420>)
 8000680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000682:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8000686:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800068a:	d102      	bne.n	8000692 <RCC_GetClocksFreq+0x412>
    RCC_Clocks->UART5CLK_Frequency = HSI_VALUE;
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	4a05      	ldr	r2, [pc, #20]	; (80006a4 <RCC_GetClocksFreq+0x424>)
 8000690:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000692:	bf00      	nop
 8000694:	372c      	adds	r7, #44	; 0x2c
 8000696:	46bd      	mov	sp, r7
 8000698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop
 80006a0:	40021000 	.word	0x40021000
 80006a4:	007a1200 	.word	0x007a1200

080006a8 <USART_SendData>:
  *         following values: USART1 or USART2 or USART3 or UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 80006a8:	b480      	push	{r7}
 80006aa:	b083      	sub	sp, #12
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
 80006b0:	460b      	mov	r3, r1
 80006b2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 

  /* Transmit Data */
  USARTx->TDR = (Data & (uint16_t)0x01FF);
 80006b4:	887b      	ldrh	r3, [r7, #2]
 80006b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80006ba:	b29a      	uxth	r2, r3
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	851a      	strh	r2, [r3, #40]	; 0x28
}
 80006c0:	bf00      	nop
 80006c2:	370c      	adds	r7, #12
 80006c4:	46bd      	mov	sp, r7
 80006c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ca:	4770      	bx	lr

080006cc <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint32_t USART_IT, FunctionalState NewState)
{
 80006cc:	b480      	push	{r7}
 80006ce:	b089      	sub	sp, #36	; 0x24
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	60f8      	str	r0, [r7, #12]
 80006d4:	60b9      	str	r1, [r7, #8]
 80006d6:	4613      	mov	r3, r2
 80006d8:	71fb      	strb	r3, [r7, #7]
  uint32_t usartreg = 0, itpos = 0, itmask = 0;
 80006da:	2300      	movs	r3, #0
 80006dc:	61bb      	str	r3, [r7, #24]
 80006de:	2300      	movs	r3, #0
 80006e0:	617b      	str	r3, [r7, #20]
 80006e2:	2300      	movs	r3, #0
 80006e4:	613b      	str	r3, [r7, #16]
  uint32_t usartxbase = 0;
 80006e6:	2300      	movs	r3, #0
 80006e8:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_CONFIG_IT(USART_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  usartxbase = (uint32_t)USARTx;
 80006ea:	68fb      	ldr	r3, [r7, #12]
 80006ec:	61fb      	str	r3, [r7, #28]

  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 80006ee:	68bb      	ldr	r3, [r7, #8]
 80006f0:	b29b      	uxth	r3, r3
 80006f2:	0a1b      	lsrs	r3, r3, #8
 80006f4:	b29b      	uxth	r3, r3
 80006f6:	61bb      	str	r3, [r7, #24]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 80006f8:	68bb      	ldr	r3, [r7, #8]
 80006fa:	b2db      	uxtb	r3, r3
 80006fc:	617b      	str	r3, [r7, #20]
  itmask = (((uint32_t)0x01) << itpos);
 80006fe:	2201      	movs	r2, #1
 8000700:	697b      	ldr	r3, [r7, #20]
 8000702:	fa02 f303 	lsl.w	r3, r2, r3
 8000706:	613b      	str	r3, [r7, #16]

  if (usartreg == 0x02) /* The IT is in CR2 register */
 8000708:	69bb      	ldr	r3, [r7, #24]
 800070a:	2b02      	cmp	r3, #2
 800070c:	d103      	bne.n	8000716 <USART_ITConfig+0x4a>
  {
    usartxbase += 0x04;
 800070e:	69fb      	ldr	r3, [r7, #28]
 8000710:	3304      	adds	r3, #4
 8000712:	61fb      	str	r3, [r7, #28]
 8000714:	e005      	b.n	8000722 <USART_ITConfig+0x56>
  }
  else if (usartreg == 0x03) /* The IT is in CR3 register */
 8000716:	69bb      	ldr	r3, [r7, #24]
 8000718:	2b03      	cmp	r3, #3
 800071a:	d102      	bne.n	8000722 <USART_ITConfig+0x56>
  {
    usartxbase += 0x08;
 800071c:	69fb      	ldr	r3, [r7, #28]
 800071e:	3308      	adds	r3, #8
 8000720:	61fb      	str	r3, [r7, #28]
  }
  else /* The IT is in CR1 register */
  {
  }
  if (NewState != DISABLE)
 8000722:	79fb      	ldrb	r3, [r7, #7]
 8000724:	2b00      	cmp	r3, #0
 8000726:	d006      	beq.n	8000736 <USART_ITConfig+0x6a>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8000728:	69fb      	ldr	r3, [r7, #28]
 800072a:	6819      	ldr	r1, [r3, #0]
 800072c:	69fb      	ldr	r3, [r7, #28]
 800072e:	693a      	ldr	r2, [r7, #16]
 8000730:	430a      	orrs	r2, r1
 8000732:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 8000734:	e006      	b.n	8000744 <USART_ITConfig+0x78>
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8000736:	69fb      	ldr	r3, [r7, #28]
 8000738:	6819      	ldr	r1, [r3, #0]
 800073a:	693b      	ldr	r3, [r7, #16]
 800073c:	43da      	mvns	r2, r3
 800073e:	69fb      	ldr	r3, [r7, #28]
 8000740:	400a      	ands	r2, r1
 8000742:	601a      	str	r2, [r3, #0]
}
 8000744:	bf00      	nop
 8000746:	3724      	adds	r7, #36	; 0x24
 8000748:	46bd      	mov	sp, r7
 800074a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074e:	4770      	bx	lr

08000750 <USART_GetFlagStatus>:
  *         @arg USART_FLAG_FE:  Framing Error flag.
  *         @arg USART_FLAG_PE:  Parity Error flag.
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint32_t USART_FLAG)
{
 8000750:	b480      	push	{r7}
 8000752:	b085      	sub	sp, #20
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
 8000758:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 800075a:	2300      	movs	r3, #0
 800075c:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_FLAG(USART_FLAG));
  
  if ((USARTx->ISR & USART_FLAG) != (uint16_t)RESET)
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	69da      	ldr	r2, [r3, #28]
 8000762:	683b      	ldr	r3, [r7, #0]
 8000764:	4013      	ands	r3, r2
 8000766:	2b00      	cmp	r3, #0
 8000768:	d002      	beq.n	8000770 <USART_GetFlagStatus+0x20>
  {
    bitstatus = SET;
 800076a:	2301      	movs	r3, #1
 800076c:	73fb      	strb	r3, [r7, #15]
 800076e:	e001      	b.n	8000774 <USART_GetFlagStatus+0x24>
  }
  else
  {
    bitstatus = RESET;
 8000770:	2300      	movs	r3, #0
 8000772:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000774:	7bfb      	ldrb	r3, [r7, #15]
}
 8000776:	4618      	mov	r0, r3
 8000778:	3714      	adds	r7, #20
 800077a:	46bd      	mov	sp, r7
 800077c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000780:	4770      	bx	lr

08000782 <USART_GetITStatus>:
  *         @arg USART_IT_FE:  Framing Error interrupt.
  *         @arg USART_IT_PE:  Parity Error interrupt.
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint32_t USART_IT)
{
 8000782:	b480      	push	{r7}
 8000784:	b087      	sub	sp, #28
 8000786:	af00      	add	r7, sp, #0
 8000788:	6078      	str	r0, [r7, #4]
 800078a:	6039      	str	r1, [r7, #0]
  uint32_t bitpos = 0, itmask = 0, usartreg = 0;
 800078c:	2300      	movs	r3, #0
 800078e:	60fb      	str	r3, [r7, #12]
 8000790:	2300      	movs	r3, #0
 8000792:	617b      	str	r3, [r7, #20]
 8000794:	2300      	movs	r3, #0
 8000796:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 8000798:	2300      	movs	r3, #0
 800079a:	74fb      	strb	r3, [r7, #19]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_GET_IT(USART_IT)); 
  
  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 800079c:	683b      	ldr	r3, [r7, #0]
 800079e:	b29b      	uxth	r3, r3
 80007a0:	0a1b      	lsrs	r3, r3, #8
 80007a2:	b29b      	uxth	r3, r3
 80007a4:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 80007a6:	683b      	ldr	r3, [r7, #0]
 80007a8:	b2db      	uxtb	r3, r3
 80007aa:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 80007ac:	2201      	movs	r2, #1
 80007ae:	697b      	ldr	r3, [r7, #20]
 80007b0:	fa02 f303 	lsl.w	r3, r2, r3
 80007b4:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 80007b6:	68bb      	ldr	r3, [r7, #8]
 80007b8:	2b01      	cmp	r3, #1
 80007ba:	d105      	bne.n	80007c8 <USART_GetITStatus+0x46>
  {
    itmask &= USARTx->CR1;
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	697a      	ldr	r2, [r7, #20]
 80007c2:	4013      	ands	r3, r2
 80007c4:	617b      	str	r3, [r7, #20]
 80007c6:	e00d      	b.n	80007e4 <USART_GetITStatus+0x62>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 80007c8:	68bb      	ldr	r3, [r7, #8]
 80007ca:	2b02      	cmp	r3, #2
 80007cc:	d105      	bne.n	80007da <USART_GetITStatus+0x58>
  {
    itmask &= USARTx->CR2;
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	685b      	ldr	r3, [r3, #4]
 80007d2:	697a      	ldr	r2, [r7, #20]
 80007d4:	4013      	ands	r3, r2
 80007d6:	617b      	str	r3, [r7, #20]
 80007d8:	e004      	b.n	80007e4 <USART_GetITStatus+0x62>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	689b      	ldr	r3, [r3, #8]
 80007de:	697a      	ldr	r2, [r7, #20]
 80007e0:	4013      	ands	r3, r2
 80007e2:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x10;
 80007e4:	683b      	ldr	r3, [r7, #0]
 80007e6:	0c1b      	lsrs	r3, r3, #16
 80007e8:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 80007ea:	2201      	movs	r2, #1
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	fa02 f303 	lsl.w	r3, r2, r3
 80007f2:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->ISR;
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	69db      	ldr	r3, [r3, #28]
 80007f8:	68fa      	ldr	r2, [r7, #12]
 80007fa:	4013      	ands	r3, r2
 80007fc:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 80007fe:	697b      	ldr	r3, [r7, #20]
 8000800:	2b00      	cmp	r3, #0
 8000802:	d005      	beq.n	8000810 <USART_GetITStatus+0x8e>
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	2b00      	cmp	r3, #0
 8000808:	d002      	beq.n	8000810 <USART_GetITStatus+0x8e>
  {
    bitstatus = SET;
 800080a:	2301      	movs	r3, #1
 800080c:	74fb      	strb	r3, [r7, #19]
 800080e:	e001      	b.n	8000814 <USART_GetITStatus+0x92>
  }
  else
  {
    bitstatus = RESET;
 8000810:	2300      	movs	r3, #0
 8000812:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 8000814:	7cfb      	ldrb	r3, [r7, #19]
}
 8000816:	4618      	mov	r0, r3
 8000818:	371c      	adds	r7, #28
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr
	...

08000824 <NVIC_EnableIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000824:	b480      	push	{r7}
 8000826:	b083      	sub	sp, #12
 8000828:	af00      	add	r7, sp, #0
 800082a:	4603      	mov	r3, r0
 800082c:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 800082e:	79fb      	ldrb	r3, [r7, #7]
 8000830:	f003 031f 	and.w	r3, r3, #31
 8000834:	2201      	movs	r2, #1
 8000836:	fa02 f103 	lsl.w	r1, r2, r3
 800083a:	4a06      	ldr	r2, [pc, #24]	; (8000854 <NVIC_EnableIRQ+0x30>)
 800083c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000840:	095b      	lsrs	r3, r3, #5
 8000842:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000846:	bf00      	nop
 8000848:	370c      	adds	r7, #12
 800084a:	46bd      	mov	sp, r7
 800084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop
 8000854:	e000e100 	.word	0xe000e100

08000858 <uart_get_char>:
volatile uint8_t UART_BUFFER[UART_BUFFER_LENGTH] = {0};
volatile uint8_t UART_END_IDX = 0;
volatile uint8_t UART_START_IDX = 0;
volatile uint8_t UART_COUNT = 0;

uint8_t uart_get_char(){
 8000858:	b480      	push	{r7}
 800085a:	b083      	sub	sp, #12
 800085c:	af00      	add	r7, sp, #0
    uint8_t val = 0;
 800085e:	2300      	movs	r3, #0
 8000860:	71fb      	strb	r3, [r7, #7]
    if (UART_COUNT > 0) {
 8000862:	4b0f      	ldr	r3, [pc, #60]	; (80008a0 <uart_get_char+0x48>)
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	b2db      	uxtb	r3, r3
 8000868:	2b00      	cmp	r3, #0
 800086a:	d011      	beq.n	8000890 <uart_get_char+0x38>
        val = UART_BUFFER[UART_START_IDX++];
 800086c:	4b0d      	ldr	r3, [pc, #52]	; (80008a4 <uart_get_char+0x4c>)
 800086e:	781b      	ldrb	r3, [r3, #0]
 8000870:	b2db      	uxtb	r3, r3
 8000872:	1c5a      	adds	r2, r3, #1
 8000874:	b2d1      	uxtb	r1, r2
 8000876:	4a0b      	ldr	r2, [pc, #44]	; (80008a4 <uart_get_char+0x4c>)
 8000878:	7011      	strb	r1, [r2, #0]
 800087a:	461a      	mov	r2, r3
 800087c:	4b0a      	ldr	r3, [pc, #40]	; (80008a8 <uart_get_char+0x50>)
 800087e:	5c9b      	ldrb	r3, [r3, r2]
 8000880:	71fb      	strb	r3, [r7, #7]
        UART_COUNT--;
 8000882:	4b07      	ldr	r3, [pc, #28]	; (80008a0 <uart_get_char+0x48>)
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	b2db      	uxtb	r3, r3
 8000888:	3b01      	subs	r3, #1
 800088a:	b2da      	uxtb	r2, r3
 800088c:	4b04      	ldr	r3, [pc, #16]	; (80008a0 <uart_get_char+0x48>)
 800088e:	701a      	strb	r2, [r3, #0]
    }
    return val;
 8000890:	79fb      	ldrb	r3, [r7, #7]
}
 8000892:	4618      	mov	r0, r3
 8000894:	370c      	adds	r7, #12
 8000896:	46bd      	mov	sp, r7
 8000898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089c:	4770      	bx	lr
 800089e:	bf00      	nop
 80008a0:	200001a6 	.word	0x200001a6
 80008a4:	200001a5 	.word	0x200001a5
 80008a8:	200000a4 	.word	0x200000a4

080008ac <uart_put_char>:

void uart_put_char(uint8_t c) {
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	4603      	mov	r3, r0
 80008b4:	71fb      	strb	r3, [r7, #7]
    USART_SendData(USART2, (uint8_t)c);
 80008b6:	79fb      	ldrb	r3, [r7, #7]
 80008b8:	b29b      	uxth	r3, r3
 80008ba:	4619      	mov	r1, r3
 80008bc:	4807      	ldr	r0, [pc, #28]	; (80008dc <uart_put_char+0x30>)
 80008be:	f7ff fef3 	bl	80006a8 <USART_SendData>
    while(USART_GetFlagStatus(USART2, USART_FLAG_TXE)  == RESET){}
 80008c2:	bf00      	nop
 80008c4:	2180      	movs	r1, #128	; 0x80
 80008c6:	4805      	ldr	r0, [pc, #20]	; (80008dc <uart_put_char+0x30>)
 80008c8:	f7ff ff42 	bl	8000750 <USART_GetFlagStatus>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d0f8      	beq.n	80008c4 <uart_put_char+0x18>
}
 80008d2:	bf00      	nop
 80008d4:	bf00      	nop
 80008d6:	3708      	adds	r7, #8
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	40004400 	.word	0x40004400

080008e0 <_write_r>:

int _write_r(struct _reent *r, int file, char *ptr, int len) {
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b086      	sub	sp, #24
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	60f8      	str	r0, [r7, #12]
 80008e8:	60b9      	str	r1, [r7, #8]
 80008ea:	607a      	str	r2, [r7, #4]
 80008ec:	603b      	str	r3, [r7, #0]
    int n;

    for (n = 0; n < len; n++) {
 80008ee:	2300      	movs	r3, #0
 80008f0:	617b      	str	r3, [r7, #20]
 80008f2:	e012      	b.n	800091a <_write_r+0x3a>
        if (ptr[n] == '\n') {
 80008f4:	697b      	ldr	r3, [r7, #20]
 80008f6:	687a      	ldr	r2, [r7, #4]
 80008f8:	4413      	add	r3, r2
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	2b0a      	cmp	r3, #10
 80008fe:	d102      	bne.n	8000906 <_write_r+0x26>
            uart_put_char('\r');
 8000900:	200d      	movs	r0, #13
 8000902:	f7ff ffd3 	bl	80008ac <uart_put_char>
        }
        uart_put_char(ptr[n] & (uint16_t)0x01FF);
 8000906:	697b      	ldr	r3, [r7, #20]
 8000908:	687a      	ldr	r2, [r7, #4]
 800090a:	4413      	add	r3, r2
 800090c:	781b      	ldrb	r3, [r3, #0]
 800090e:	4618      	mov	r0, r3
 8000910:	f7ff ffcc 	bl	80008ac <uart_put_char>
    for (n = 0; n < len; n++) {
 8000914:	697b      	ldr	r3, [r7, #20]
 8000916:	3301      	adds	r3, #1
 8000918:	617b      	str	r3, [r7, #20]
 800091a:	697a      	ldr	r2, [r7, #20]
 800091c:	683b      	ldr	r3, [r7, #0]
 800091e:	429a      	cmp	r2, r3
 8000920:	dbe8      	blt.n	80008f4 <_write_r+0x14>
    }

    return len;
 8000922:	683b      	ldr	r3, [r7, #0]
}
 8000924:	4618      	mov	r0, r3
 8000926:	3718      	adds	r7, #24
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}

0800092c <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
    if(USART_GetITStatus(USART2, USART_IT_RXNE) != RESET)
 8000930:	4915      	ldr	r1, [pc, #84]	; (8000988 <USART2_IRQHandler+0x5c>)
 8000932:	4816      	ldr	r0, [pc, #88]	; (800098c <USART2_IRQHandler+0x60>)
 8000934:	f7ff ff25 	bl	8000782 <USART_GetITStatus>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d021      	beq.n	8000982 <USART2_IRQHandler+0x56>
    {
        UART_BUFFER[UART_END_IDX++] = (uint8_t)(USART2->RDR & 0xFF);
 800093e:	4b13      	ldr	r3, [pc, #76]	; (800098c <USART2_IRQHandler+0x60>)
 8000940:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000942:	b299      	uxth	r1, r3
 8000944:	4b12      	ldr	r3, [pc, #72]	; (8000990 <USART2_IRQHandler+0x64>)
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	b2db      	uxtb	r3, r3
 800094a:	1c5a      	adds	r2, r3, #1
 800094c:	b2d0      	uxtb	r0, r2
 800094e:	4a10      	ldr	r2, [pc, #64]	; (8000990 <USART2_IRQHandler+0x64>)
 8000950:	7010      	strb	r0, [r2, #0]
 8000952:	461a      	mov	r2, r3
 8000954:	b2c9      	uxtb	r1, r1
 8000956:	4b0f      	ldr	r3, [pc, #60]	; (8000994 <USART2_IRQHandler+0x68>)
 8000958:	5499      	strb	r1, [r3, r2]
        if (UART_COUNT == UART_BUFFER_LENGTH-1){
 800095a:	4b0f      	ldr	r3, [pc, #60]	; (8000998 <USART2_IRQHandler+0x6c>)
 800095c:	781b      	ldrb	r3, [r3, #0]
 800095e:	b2db      	uxtb	r3, r3
 8000960:	2bff      	cmp	r3, #255	; 0xff
 8000962:	d107      	bne.n	8000974 <USART2_IRQHandler+0x48>
            UART_START_IDX++;
 8000964:	4b0d      	ldr	r3, [pc, #52]	; (800099c <USART2_IRQHandler+0x70>)
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	b2db      	uxtb	r3, r3
 800096a:	3301      	adds	r3, #1
 800096c:	b2da      	uxtb	r2, r3
 800096e:	4b0b      	ldr	r3, [pc, #44]	; (800099c <USART2_IRQHandler+0x70>)
 8000970:	701a      	strb	r2, [r3, #0]
        } else {
            UART_COUNT++;
        }
    }
}
 8000972:	e006      	b.n	8000982 <USART2_IRQHandler+0x56>
            UART_COUNT++;
 8000974:	4b08      	ldr	r3, [pc, #32]	; (8000998 <USART2_IRQHandler+0x6c>)
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	b2db      	uxtb	r3, r3
 800097a:	3301      	adds	r3, #1
 800097c:	b2da      	uxtb	r2, r3
 800097e:	4b06      	ldr	r3, [pc, #24]	; (8000998 <USART2_IRQHandler+0x6c>)
 8000980:	701a      	strb	r2, [r3, #0]
}
 8000982:	bf00      	nop
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	00050105 	.word	0x00050105
 800098c:	40004400 	.word	0x40004400
 8000990:	200001a4 	.word	0x200001a4
 8000994:	200000a4 	.word	0x200000a4
 8000998:	200001a6 	.word	0x200001a6
 800099c:	200001a5 	.word	0x200001a5

080009a0 <uart_get_count>:
    UART_START_IDX = 0;
    UART_END_IDX = 0;
    UART_COUNT = 0;
}

uint8_t uart_get_count(){
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
    return UART_COUNT;
 80009a4:	4b03      	ldr	r3, [pc, #12]	; (80009b4 <uart_get_count+0x14>)
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	b2db      	uxtb	r3, r3
}
 80009aa:	4618      	mov	r0, r3
 80009ac:	46bd      	mov	sp, r7
 80009ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b2:	4770      	bx	lr
 80009b4:	200001a6 	.word	0x200001a6

080009b8 <uart_init>:

void uart_init(uint32_t baud) {
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b094      	sub	sp, #80	; 0x50
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
    setbuf(stdout, NULL); // Set stdout to disable line buffering
 80009c0:	4b86      	ldr	r3, [pc, #536]	; (8000bdc <uart_init+0x224>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	689b      	ldr	r3, [r3, #8]
 80009c6:	2100      	movs	r1, #0
 80009c8:	4618      	mov	r0, r3
 80009ca:	f000 fff3 	bl	80019b4 <setbuf>
    setbuf(stdin,  NULL); // Set stdin  to disable line buffering
 80009ce:	4b83      	ldr	r3, [pc, #524]	; (8000bdc <uart_init+0x224>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	685b      	ldr	r3, [r3, #4]
 80009d4:	2100      	movs	r1, #0
 80009d6:	4618      	mov	r0, r3
 80009d8:	f000 ffec 	bl	80019b4 <setbuf>

    // Enable Clocks
    RCC->AHBENR  |= RCC_AHBPeriph_GPIOA;    // Enable Clock for GPIO Bank A
 80009dc:	4b80      	ldr	r3, [pc, #512]	; (8000be0 <uart_init+0x228>)
 80009de:	695b      	ldr	r3, [r3, #20]
 80009e0:	4a7f      	ldr	r2, [pc, #508]	; (8000be0 <uart_init+0x228>)
 80009e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009e6:	6153      	str	r3, [r2, #20]
    RCC->APB1ENR |= RCC_APB1Periph_USART2;  // Enable Clock for USART2
 80009e8:	4b7d      	ldr	r3, [pc, #500]	; (8000be0 <uart_init+0x228>)
 80009ea:	69db      	ldr	r3, [r3, #28]
 80009ec:	4a7c      	ldr	r2, [pc, #496]	; (8000be0 <uart_init+0x228>)
 80009ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009f2:	61d3      	str	r3, [r2, #28]

    // Connect pins to USART2
    GPIOA->AFR[2 >> 0x03] &= ~(0x0000000F << ((2 & 0x00000007) * 4)); // Clear alternate function for PA2
 80009f4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80009f8:	6a1b      	ldr	r3, [r3, #32]
 80009fa:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80009fe:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000a02:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[2 >> 0x03] |=  (0x00000007 << ((2 & 0x00000007) * 4)); // Set alternate 7 function for PA2
 8000a04:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000a08:	6a1b      	ldr	r3, [r3, #32]
 8000a0a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000a0e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000a12:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[3 >> 0x03] &= ~(0x0000000F << ((3 & 0x00000007) * 4)); // Clear alternate function for PA3
 8000a14:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000a18:	6a1b      	ldr	r3, [r3, #32]
 8000a1a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000a1e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8000a22:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[3 >> 0x03] |=  (0x00000007 << ((3 & 0x00000007) * 4)); // Set alternate 7 function for PA3
 8000a24:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000a28:	6a1b      	ldr	r3, [r3, #32]
 8000a2a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000a2e:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8000a32:	6213      	str	r3, [r2, #32]

    // Configure pins PA2 and PA3 for 10 MHz alternate function
    GPIOA->OSPEEDR &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear speed register
 8000a34:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000a38:	689b      	ldr	r3, [r3, #8]
 8000a3a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000a3e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000a42:	6093      	str	r3, [r2, #8]
    GPIOA->OSPEEDR |=  (0x00000001 << (2 * 2) | 0x00000001 << (3 * 2));    // set speed register (0x01 - 10 MHz, 0x02 - 2 MHz, 0x03 - 50 MHz)
 8000a44:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000a48:	689b      	ldr	r3, [r3, #8]
 8000a4a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000a4e:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8000a52:	6093      	str	r3, [r2, #8]
    GPIOA->OTYPER  &= ~(0x0001     << (2)     | 0x0001     << (3));        // Clear output type register
 8000a54:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000a58:	889b      	ldrh	r3, [r3, #4]
 8000a5a:	b29b      	uxth	r3, r3
 8000a5c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000a60:	f023 030c 	bic.w	r3, r3, #12
 8000a64:	b29b      	uxth	r3, r3
 8000a66:	8093      	strh	r3, [r2, #4]
    GPIOA->OTYPER  |=  (0x0000     << (2)     | 0x0000     << (3));        // Set output type register (0x00 - Push pull, 0x01 - Open drain)
 8000a68:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000a6c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000a70:	8892      	ldrh	r2, [r2, #4]
 8000a72:	b292      	uxth	r2, r2
 8000a74:	809a      	strh	r2, [r3, #4]
    GPIOA->MODER   &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear mode register
 8000a76:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000a80:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000a84:	6013      	str	r3, [r2, #0]
    GPIOA->MODER   |=  (0x00000002 << (2 * 2) | 0x00000002 << (3 * 2));    // Set mode register (0x00 - Input, 0x01 - Output, 0x02 - Alternate Function, 0x03 - Analog in/out)
 8000a86:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000a90:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8000a94:	6013      	str	r3, [r2, #0]
    GPIOA->PUPDR   &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear push/pull register
 8000a96:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000a9a:	68db      	ldr	r3, [r3, #12]
 8000a9c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000aa0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000aa4:	60d3      	str	r3, [r2, #12]
    GPIOA->PUPDR   |=  (0x00000001 << (2 * 2) | 0x00000001 << (3 * 2));    // Set push/pull register (0x00 - No pull, 0x01 - Pull-up, 0x02 - Pull-down)
 8000aa6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000aaa:	68db      	ldr	r3, [r3, #12]
 8000aac:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000ab0:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8000ab4:	60d3      	str	r3, [r2, #12]

    //Configure USART2
    USART2->CR1 &= ~0x00000001; // Disable USART2
 8000ab6:	4b4b      	ldr	r3, [pc, #300]	; (8000be4 <uart_init+0x22c>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	4a4a      	ldr	r2, [pc, #296]	; (8000be4 <uart_init+0x22c>)
 8000abc:	f023 0301 	bic.w	r3, r3, #1
 8000ac0:	6013      	str	r3, [r2, #0]
    USART2->CR2 &= ~0x00003000; // Clear CR2 Configuration
 8000ac2:	4b48      	ldr	r3, [pc, #288]	; (8000be4 <uart_init+0x22c>)
 8000ac4:	685b      	ldr	r3, [r3, #4]
 8000ac6:	4a47      	ldr	r2, [pc, #284]	; (8000be4 <uart_init+0x22c>)
 8000ac8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000acc:	6053      	str	r3, [r2, #4]
    USART2->CR2 |=  0x00000000; // Set 1 stop bits
 8000ace:	4b45      	ldr	r3, [pc, #276]	; (8000be4 <uart_init+0x22c>)
 8000ad0:	4a44      	ldr	r2, [pc, #272]	; (8000be4 <uart_init+0x22c>)
 8000ad2:	685b      	ldr	r3, [r3, #4]
 8000ad4:	6053      	str	r3, [r2, #4]
    USART2->CR1 &= ~(0x00001000 | 0x00000400 | 0x00000200 | 0x00000008 | 0x00000004); // Clear CR1 Configuration
 8000ad6:	4b43      	ldr	r3, [pc, #268]	; (8000be4 <uart_init+0x22c>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	4a42      	ldr	r2, [pc, #264]	; (8000be4 <uart_init+0x22c>)
 8000adc:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8000ae0:	f023 030c 	bic.w	r3, r3, #12
 8000ae4:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000000; // Set word length to 8 bits
 8000ae6:	4b3f      	ldr	r3, [pc, #252]	; (8000be4 <uart_init+0x22c>)
 8000ae8:	4a3e      	ldr	r2, [pc, #248]	; (8000be4 <uart_init+0x22c>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000000; // Set parity bits to none
 8000aee:	4b3d      	ldr	r3, [pc, #244]	; (8000be4 <uart_init+0x22c>)
 8000af0:	4a3c      	ldr	r2, [pc, #240]	; (8000be4 <uart_init+0x22c>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000004 | 0x00000008; // Set mode to RX and TX
 8000af6:	4b3b      	ldr	r3, [pc, #236]	; (8000be4 <uart_init+0x22c>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	4a3a      	ldr	r2, [pc, #232]	; (8000be4 <uart_init+0x22c>)
 8000afc:	f043 030c 	orr.w	r3, r3, #12
 8000b00:	6013      	str	r3, [r2, #0]
    USART2->CR3 &= ~(0x00000100 | 0x00000200); // Clear CR3 Configuration
 8000b02:	4b38      	ldr	r3, [pc, #224]	; (8000be4 <uart_init+0x22c>)
 8000b04:	689b      	ldr	r3, [r3, #8]
 8000b06:	4a37      	ldr	r2, [pc, #220]	; (8000be4 <uart_init+0x22c>)
 8000b08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000b0c:	6093      	str	r3, [r2, #8]
    USART2->CR3 |=  0x00000000; // Set hardware flow control to none
 8000b0e:	4b35      	ldr	r3, [pc, #212]	; (8000be4 <uart_init+0x22c>)
 8000b10:	4a34      	ldr	r2, [pc, #208]	; (8000be4 <uart_init+0x22c>)
 8000b12:	689b      	ldr	r3, [r3, #8]
 8000b14:	6093      	str	r3, [r2, #8]

    uint32_t divider = 0, apbclock = 0, tmpreg = 0;
 8000b16:	2300      	movs	r3, #0
 8000b18:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	647b      	str	r3, [r7, #68]	; 0x44
 8000b1e:	2300      	movs	r3, #0
 8000b20:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_ClocksTypeDef RCC_ClocksStatus;
    RCC_GetClocksFreq(&RCC_ClocksStatus); // Get USART2 Clock frequency
 8000b22:	f107 0308 	add.w	r3, r7, #8
 8000b26:	4618      	mov	r0, r3
 8000b28:	f7ff fbaa 	bl	8000280 <RCC_GetClocksFreq>
    apbclock = RCC_ClocksStatus.USART2CLK_Frequency;
 8000b2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b2e:	647b      	str	r3, [r7, #68]	; 0x44

    if ((USART2->CR1 & 0x00008000) != 0) {
 8000b30:	4b2c      	ldr	r3, [pc, #176]	; (8000be4 <uart_init+0x22c>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d010      	beq.n	8000b5e <uart_init+0x1a6>
      // (divider * 10) computing in case Oversampling mode is 8 Samples
      divider = (2 * apbclock) / baud;
 8000b3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000b3e:	005a      	lsls	r2, r3, #1
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b46:	64fb      	str	r3, [r7, #76]	; 0x4c
      tmpreg  = (2 * apbclock) % baud;
 8000b48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000b4a:	005b      	lsls	r3, r3, #1
 8000b4c:	687a      	ldr	r2, [r7, #4]
 8000b4e:	fbb3 f2f2 	udiv	r2, r3, r2
 8000b52:	6879      	ldr	r1, [r7, #4]
 8000b54:	fb01 f202 	mul.w	r2, r1, r2
 8000b58:	1a9b      	subs	r3, r3, r2
 8000b5a:	64bb      	str	r3, [r7, #72]	; 0x48
 8000b5c:	e00d      	b.n	8000b7a <uart_init+0x1c2>
    } else {
      // (divider * 10) computing in case Oversampling mode is 16 Samples
      divider = apbclock / baud;
 8000b5e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b66:	64fb      	str	r3, [r7, #76]	; 0x4c
      tmpreg  = apbclock % baud;
 8000b68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000b6a:	687a      	ldr	r2, [r7, #4]
 8000b6c:	fbb3 f2f2 	udiv	r2, r3, r2
 8000b70:	6879      	ldr	r1, [r7, #4]
 8000b72:	fb01 f202 	mul.w	r2, r1, r2
 8000b76:	1a9b      	subs	r3, r3, r2
 8000b78:	64bb      	str	r3, [r7, #72]	; 0x48
    }

    if (tmpreg >=  baud / 2) {
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	085b      	lsrs	r3, r3, #1
 8000b7e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000b80:	429a      	cmp	r2, r3
 8000b82:	d302      	bcc.n	8000b8a <uart_init+0x1d2>
        divider++;
 8000b84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000b86:	3301      	adds	r3, #1
 8000b88:	64fb      	str	r3, [r7, #76]	; 0x4c
    }

    if ((USART2->CR1 & 0x00008000) != 0) {
 8000b8a:	4b16      	ldr	r3, [pc, #88]	; (8000be4 <uart_init+0x22c>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d00b      	beq.n	8000bae <uart_init+0x1f6>
        // get the LSB of divider and shift it to the right by 1 bit
        tmpreg = (divider & (uint16_t)0x000F) >> 1;
 8000b96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000b98:	085b      	lsrs	r3, r3, #1
 8000b9a:	f003 0307 	and.w	r3, r3, #7
 8000b9e:	64bb      	str	r3, [r7, #72]	; 0x48
        // update the divider value
        divider = (divider & (uint16_t)0xFFF0) | tmpreg;
 8000ba0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000ba2:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8000ba6:	4013      	ands	r3, r2
 8000ba8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000baa:	4313      	orrs	r3, r2
 8000bac:	64fb      	str	r3, [r7, #76]	; 0x4c
    }

    USART2->BRR = (uint16_t)divider; // Configure baud rate
 8000bae:	4b0d      	ldr	r3, [pc, #52]	; (8000be4 <uart_init+0x22c>)
 8000bb0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000bb2:	b292      	uxth	r2, r2
 8000bb4:	819a      	strh	r2, [r3, #12]
    USART2->CR1 |= 0x00000001; // Enable USART2
 8000bb6:	4b0b      	ldr	r3, [pc, #44]	; (8000be4 <uart_init+0x22c>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	4a0a      	ldr	r2, [pc, #40]	; (8000be4 <uart_init+0x22c>)
 8000bbc:	f043 0301 	orr.w	r3, r3, #1
 8000bc0:	6013      	str	r3, [r2, #0]

    USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
 8000bc2:	2201      	movs	r2, #1
 8000bc4:	4908      	ldr	r1, [pc, #32]	; (8000be8 <uart_init+0x230>)
 8000bc6:	4807      	ldr	r0, [pc, #28]	; (8000be4 <uart_init+0x22c>)
 8000bc8:	f7ff fd80 	bl	80006cc <USART_ITConfig>
    NVIC_EnableIRQ(USART2_IRQn);
 8000bcc:	2026      	movs	r0, #38	; 0x26
 8000bce:	f7ff fe29 	bl	8000824 <NVIC_EnableIRQ>
}
 8000bd2:	bf00      	nop
 8000bd4:	3750      	adds	r7, #80	; 0x50
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	20000084 	.word	0x20000084
 8000be0:	40021000 	.word	0x40021000
 8000be4:	40004400 	.word	0x40004400
 8000be8:	00050105 	.word	0x00050105

08000bec <get_terminfo>:
#endif

#define ESC "\x1b"
#define CSI ESC "["

const terminfo_t *get_terminfo(void) {
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
	static terminfo_t the_terminfo = {
			.initialized = 0,
			.x_size = 0,
			.y_size = 0
	};
	return (const terminfo_t *)&the_terminfo;
 8000bf0:	4b02      	ldr	r3, [pc, #8]	; (8000bfc <get_terminfo+0x10>)
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr
 8000bfc:	200001a8 	.word	0x200001a8

08000c00 <read_uart_timeout_breakchar>:

int read_uart_timeout_breakchar(uint32_t timeout, char *rxbuf, uint16_t rxbuflen, uint8_t breakchar)
{
 8000c00:	b590      	push	{r4, r7, lr}
 8000c02:	b087      	sub	sp, #28
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	60f8      	str	r0, [r7, #12]
 8000c08:	60b9      	str	r1, [r7, #8]
 8000c0a:	4611      	mov	r1, r2
 8000c0c:	461a      	mov	r2, r3
 8000c0e:	460b      	mov	r3, r1
 8000c10:	80fb      	strh	r3, [r7, #6]
 8000c12:	4613      	mov	r3, r2
 8000c14:	717b      	strb	r3, [r7, #5]
	int rx = 0;
 8000c16:	2300      	movs	r3, #0
 8000c18:	617b      	str	r3, [r7, #20]
	int tt;
	if (rxbuflen == 0)
 8000c1a:	88fb      	ldrh	r3, [r7, #6]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d101      	bne.n	8000c24 <read_uart_timeout_breakchar+0x24>
		return 0;
 8000c20:	2300      	movs	r3, #0
 8000c22:	e02e      	b.n	8000c82 <read_uart_timeout_breakchar+0x82>
	do {
		tt = timeout;
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	613b      	str	r3, [r7, #16]
		while (uart_get_count() == 0 && tt--)
 8000c28:	bf00      	nop
 8000c2a:	f7ff feb9 	bl	80009a0 <uart_get_count>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d104      	bne.n	8000c3e <read_uart_timeout_breakchar+0x3e>
 8000c34:	693b      	ldr	r3, [r7, #16]
 8000c36:	1e5a      	subs	r2, r3, #1
 8000c38:	613a      	str	r2, [r7, #16]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d1f5      	bne.n	8000c2a <read_uart_timeout_breakchar+0x2a>
			;
		if (uart_get_count() == 0)
 8000c3e:	f7ff feaf 	bl	80009a0 <uart_get_count>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d101      	bne.n	8000c4c <read_uart_timeout_breakchar+0x4c>
			return rx;
 8000c48:	697b      	ldr	r3, [r7, #20]
 8000c4a:	e01a      	b.n	8000c82 <read_uart_timeout_breakchar+0x82>
		rxbuf[rx] = uart_get_char();
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	68ba      	ldr	r2, [r7, #8]
 8000c50:	18d4      	adds	r4, r2, r3
 8000c52:	f7ff fe01 	bl	8000858 <uart_get_char>
 8000c56:	4603      	mov	r3, r0
 8000c58:	7023      	strb	r3, [r4, #0]
		if (rxbuf[rx++] == breakchar)
 8000c5a:	697b      	ldr	r3, [r7, #20]
 8000c5c:	1c5a      	adds	r2, r3, #1
 8000c5e:	617a      	str	r2, [r7, #20]
 8000c60:	461a      	mov	r2, r3
 8000c62:	68bb      	ldr	r3, [r7, #8]
 8000c64:	4413      	add	r3, r2
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	797a      	ldrb	r2, [r7, #5]
 8000c6a:	429a      	cmp	r2, r3
 8000c6c:	d101      	bne.n	8000c72 <read_uart_timeout_breakchar+0x72>
			return rx;
 8000c6e:	697b      	ldr	r3, [r7, #20]
 8000c70:	e007      	b.n	8000c82 <read_uart_timeout_breakchar+0x82>
	} while(tt && rx < rxbuflen);
 8000c72:	693b      	ldr	r3, [r7, #16]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d003      	beq.n	8000c80 <read_uart_timeout_breakchar+0x80>
 8000c78:	88fb      	ldrh	r3, [r7, #6]
 8000c7a:	697a      	ldr	r2, [r7, #20]
 8000c7c:	429a      	cmp	r2, r3
 8000c7e:	dbd1      	blt.n	8000c24 <read_uart_timeout_breakchar+0x24>
	return rx;
 8000c80:	697b      	ldr	r3, [r7, #20]
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	371c      	adds	r7, #28
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd90      	pop	{r4, r7, pc}
	...

08000c8c <init_term>:

void init_term(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b08c      	sub	sp, #48	; 0x30
 8000c90:	af00      	add	r7, sp, #0
	terminfo_t *ti = (terminfo_t *)get_terminfo();
 8000c92:	f7ff ffab 	bl	8000bec <get_terminfo>
 8000c96:	62f8      	str	r0, [r7, #44]	; 0x2c
	// Drain input buffer
	while (uart_get_count())
 8000c98:	e001      	b.n	8000c9e <init_term+0x12>
		uart_get_char();
 8000c9a:	f7ff fddd 	bl	8000858 <uart_get_char>
	while (uart_get_count())
 8000c9e:	f7ff fe7f 	bl	80009a0 <uart_get_count>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d1f8      	bne.n	8000c9a <init_term+0xe>

	// Soft Terminal Reset, Reset Colors, Clear Screen, Cursor at 999/999, Report Curser Position
	printf(/* CSI "!p" */ CSI "0m" CSI "2J" CSI "999;999H" CSI "6n" );
 8000ca8:	483b      	ldr	r0, [pc, #236]	; (8000d98 <init_term+0x10c>)
 8000caa:	f000 fe69 	bl	8001980 <iprintf>

	// Read from serial port until a response ending with R is received or timeout
	char buf[32];
	int r = read_uart_timeout_breakchar(10000, buf, sizeof(buf)-1, 'R');
 8000cae:	4639      	mov	r1, r7
 8000cb0:	2352      	movs	r3, #82	; 0x52
 8000cb2:	221f      	movs	r2, #31
 8000cb4:	f242 7010 	movw	r0, #10000	; 0x2710
 8000cb8:	f7ff ffa2 	bl	8000c00 <read_uart_timeout_breakchar>
 8000cbc:	62b8      	str	r0, [r7, #40]	; 0x28
	// Parse the response, it should look like ESC [ rows ; cols R
	do {
		if (r < 1 || buf[r-1] != 'R')
 8000cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	dd5a      	ble.n	8000d7a <init_term+0xee>
 8000cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cc6:	3b01      	subs	r3, #1
 8000cc8:	3330      	adds	r3, #48	; 0x30
 8000cca:	443b      	add	r3, r7
 8000ccc:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 8000cd0:	2b52      	cmp	r3, #82	; 0x52
 8000cd2:	d152      	bne.n	8000d7a <init_term+0xee>
			break;
		buf[r] = '\0';
 8000cd4:	463a      	mov	r2, r7
 8000cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cd8:	4413      	add	r3, r2
 8000cda:	2200      	movs	r2, #0
 8000cdc:	701a      	strb	r2, [r3, #0]
		char *s = rindex(buf, '\x1b');
 8000cde:	463b      	mov	r3, r7
 8000ce0:	211b      	movs	r1, #27
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f000 ff67 	bl	8001bb6 <rindex>
 8000ce8:	6278      	str	r0, [r7, #36]	; 0x24
		if (!s || !*s || *++s != '[')
 8000cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d044      	beq.n	8000d7a <init_term+0xee>
 8000cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d040      	beq.n	8000d7a <init_term+0xee>
 8000cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cfa:	3301      	adds	r3, #1
 8000cfc:	627b      	str	r3, [r7, #36]	; 0x24
 8000cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d00:	781b      	ldrb	r3, [r3, #0]
 8000d02:	2b5b      	cmp	r3, #91	; 0x5b
 8000d04:	d139      	bne.n	8000d7a <init_term+0xee>
			break;
		s = strtok(++s, ";");
 8000d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d08:	3301      	adds	r3, #1
 8000d0a:	627b      	str	r3, [r7, #36]	; 0x24
 8000d0c:	4923      	ldr	r1, [pc, #140]	; (8000d9c <init_term+0x110>)
 8000d0e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000d10:	f000 ff7e 	bl	8001c10 <strtok>
 8000d14:	6278      	str	r0, [r7, #36]	; 0x24
		if (!s)
 8000d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d027      	beq.n	8000d6c <init_term+0xe0>
			break;
		uint16_t rows = atoi(s);
 8000d1c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000d1e:	f000 fcdc 	bl	80016da <atoi>
 8000d22:	4603      	mov	r3, r0
 8000d24:	847b      	strh	r3, [r7, #34]	; 0x22
		if (rows < 1)
 8000d26:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d021      	beq.n	8000d70 <init_term+0xe4>
			break;
		s = strtok(NULL, "R");
 8000d2c:	491c      	ldr	r1, [pc, #112]	; (8000da0 <init_term+0x114>)
 8000d2e:	2000      	movs	r0, #0
 8000d30:	f000 ff6e 	bl	8001c10 <strtok>
 8000d34:	6278      	str	r0, [r7, #36]	; 0x24
		if (!s)
 8000d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d01b      	beq.n	8000d74 <init_term+0xe8>
			break;
		uint16_t cols = atoi(s);
 8000d3c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000d3e:	f000 fccc 	bl	80016da <atoi>
 8000d42:	4603      	mov	r3, r0
 8000d44:	843b      	strh	r3, [r7, #32]
		if (cols < 1)
 8000d46:	8c3b      	ldrh	r3, [r7, #32]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d015      	beq.n	8000d78 <init_term+0xec>
			break;
		printf("\n" CSI "HTerminal size detected: %dx%d. ", cols, rows);
 8000d4c:	8c3b      	ldrh	r3, [r7, #32]
 8000d4e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8000d50:	4619      	mov	r1, r3
 8000d52:	4814      	ldr	r0, [pc, #80]	; (8000da4 <init_term+0x118>)
 8000d54:	f000 fe14 	bl	8001980 <iprintf>
		ti->x_size = cols;
 8000d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d5a:	8c3a      	ldrh	r2, [r7, #32]
 8000d5c:	805a      	strh	r2, [r3, #2]
		ti->y_size = rows;
 8000d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d60:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8000d62:	809a      	strh	r2, [r3, #4]
		ti->initialized = 1;
 8000d64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d66:	2201      	movs	r2, #1
 8000d68:	701a      	strb	r2, [r3, #0]
		return;
 8000d6a:	e012      	b.n	8000d92 <init_term+0x106>
			break;
 8000d6c:	bf00      	nop
 8000d6e:	e004      	b.n	8000d7a <init_term+0xee>
			break;
 8000d70:	bf00      	nop
 8000d72:	e002      	b.n	8000d7a <init_term+0xee>
			break;
 8000d74:	bf00      	nop
 8000d76:	e000      	b.n	8000d7a <init_term+0xee>
			break;
 8000d78:	bf00      	nop
	} while(0);

	printf("\n" CSI "HFailed to detect terminal size. Assuming 80x24. ");
 8000d7a:	480b      	ldr	r0, [pc, #44]	; (8000da8 <init_term+0x11c>)
 8000d7c:	f000 fe00 	bl	8001980 <iprintf>
	ti->x_size = 80;
 8000d80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d82:	2250      	movs	r2, #80	; 0x50
 8000d84:	805a      	strh	r2, [r3, #2]
	ti->y_size = 24;
 8000d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d88:	2218      	movs	r2, #24
 8000d8a:	809a      	strh	r2, [r3, #4]
	ti->initialized = 1;
 8000d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d8e:	2201      	movs	r2, #1
 8000d90:	701a      	strb	r2, [r3, #0]
}
 8000d92:	3730      	adds	r7, #48	; 0x30
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	08002a78 	.word	0x08002a78
 8000d9c:	08002a90 	.word	0x08002a90
 8000da0:	08002a94 	.word	0x08002a94
 8000da4:	08002a98 	.word	0x08002a98
 8000da8:	08002abc 	.word	0x08002abc

08000dac <color>:
*/
  printf(ESC "[%dm", background+40);
}

void color(uint8_t foreground, uint8_t background)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b084      	sub	sp, #16
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	4603      	mov	r3, r0
 8000db4:	460a      	mov	r2, r1
 8000db6:	71fb      	strb	r3, [r7, #7]
 8000db8:	4613      	mov	r3, r2
 8000dba:	71bb      	strb	r3, [r7, #6]
// combination of fgcolor() and bgcolor() - uses less bandwidth
  uint8_t type = 22;             // normal text
 8000dbc:	2316      	movs	r3, #22
 8000dbe:	73fb      	strb	r3, [r7, #15]
	if (foreground > 7) {
 8000dc0:	79fb      	ldrb	r3, [r7, #7]
 8000dc2:	2b07      	cmp	r3, #7
 8000dc4:	d904      	bls.n	8000dd0 <color+0x24>
	  type = 1;                // bold text
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	73fb      	strb	r3, [r7, #15]
		foreground -= 8;
 8000dca:	79fb      	ldrb	r3, [r7, #7]
 8000dcc:	3b08      	subs	r3, #8
 8000dce:	71fb      	strb	r3, [r7, #7]
	}
  printf(ESC "[%d;%d;%dm", type, foreground+30, background+40);
 8000dd0:	7bf9      	ldrb	r1, [r7, #15]
 8000dd2:	79fb      	ldrb	r3, [r7, #7]
 8000dd4:	f103 021e 	add.w	r2, r3, #30
 8000dd8:	79bb      	ldrb	r3, [r7, #6]
 8000dda:	3328      	adds	r3, #40	; 0x28
 8000ddc:	4803      	ldr	r0, [pc, #12]	; (8000dec <color+0x40>)
 8000dde:	f000 fdcf 	bl	8001980 <iprintf>
}
 8000de2:	bf00      	nop
 8000de4:	3710      	adds	r7, #16
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	08002b08 	.word	0x08002b08

08000df0 <hide_cursor>:
{
	printf(ESC "[H" ESC "[2J");
}

void hide_cursor(uint8_t on)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	4603      	mov	r3, r0
 8000df8:	71fb      	strb	r3, [r7, #7]
	printf(CSI "?25%c", on ? 'l' : 'h');
 8000dfa:	79fb      	ldrb	r3, [r7, #7]
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d001      	beq.n	8000e04 <hide_cursor+0x14>
 8000e00:	236c      	movs	r3, #108	; 0x6c
 8000e02:	e000      	b.n	8000e06 <hide_cursor+0x16>
 8000e04:	2368      	movs	r3, #104	; 0x68
 8000e06:	4619      	mov	r1, r3
 8000e08:	4803      	ldr	r0, [pc, #12]	; (8000e18 <hide_cursor+0x28>)
 8000e0a:	f000 fdb9 	bl	8001980 <iprintf>
}
 8000e0e:	bf00      	nop
 8000e10:	3708      	adds	r7, #8
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	08002b20 	.word	0x08002b20

08000e1c <gotoxy>:
{
	printf(ESC "[%sm", on ? "7" : "27");
}

void gotoxy(uint16_t x, uint16_t y)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	4603      	mov	r3, r0
 8000e24:	460a      	mov	r2, r1
 8000e26:	80fb      	strh	r3, [r7, #6]
 8000e28:	4613      	mov	r3, r2
 8000e2a:	80bb      	strh	r3, [r7, #4]
	printf(ESC "[%d;%df", y+1, x+1);
 8000e2c:	88bb      	ldrh	r3, [r7, #4]
 8000e2e:	1c59      	adds	r1, r3, #1
 8000e30:	88fb      	ldrh	r3, [r7, #6]
 8000e32:	3301      	adds	r3, #1
 8000e34:	461a      	mov	r2, r3
 8000e36:	4803      	ldr	r0, [pc, #12]	; (8000e44 <gotoxy+0x28>)
 8000e38:	f000 fda2 	bl	8001980 <iprintf>
}
 8000e3c:	bf00      	nop
 8000e3e:	3708      	adds	r7, #8
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	08002b48 	.word	0x08002b48

08000e48 <window>:
		{ .tl=L_TL_D, .tr=L_TR_D, .bl=L_BL_D, .br=L_BR_D, .h=L_H_D, .v=L_V_D, .fgcol=15, .bgcol=4, .no_title=1 },
		{ .tl=L_TL, .tr=L_TR, .bl=L_BL, .br=L_BR, .h=L_H, .v=L_V, .fgcol=0, .bgcol=7, .no_title=1 }
};

void window(uint16_t x1, uint16_t y1, uint16_t width, uint16_t height, uint8_t style, const char *title)
{
 8000e48:	b590      	push	{r4, r7, lr}
 8000e4a:	b08b      	sub	sp, #44	; 0x2c
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	4604      	mov	r4, r0
 8000e50:	4608      	mov	r0, r1
 8000e52:	4611      	mov	r1, r2
 8000e54:	461a      	mov	r2, r3
 8000e56:	4623      	mov	r3, r4
 8000e58:	80fb      	strh	r3, [r7, #6]
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	80bb      	strh	r3, [r7, #4]
 8000e5e:	460b      	mov	r3, r1
 8000e60:	807b      	strh	r3, [r7, #2]
 8000e62:	4613      	mov	r3, r2
 8000e64:	803b      	strh	r3, [r7, #0]
	char *titlebuf = NULL;
 8000e66:	2300      	movs	r3, #0
 8000e68:	627b      	str	r3, [r7, #36]	; 0x24
	int title_len;
	const window_style_t *st;
	if (style<sizeof(window_styles)/sizeof(window_style_t)) {
 8000e6a:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8000e6e:	2b03      	cmp	r3, #3
 8000e70:	d806      	bhi.n	8000e80 <window+0x38>
		st = &window_styles[style];
 8000e72:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8000e76:	015b      	lsls	r3, r3, #5
 8000e78:	4a72      	ldr	r2, [pc, #456]	; (8001044 <window+0x1fc>)
 8000e7a:	4413      	add	r3, r2
 8000e7c:	61fb      	str	r3, [r7, #28]
 8000e7e:	e001      	b.n	8000e84 <window+0x3c>
	} else {
		st = &window_styles[0];
 8000e80:	4b70      	ldr	r3, [pc, #448]	; (8001044 <window+0x1fc>)
 8000e82:	61fb      	str	r3, [r7, #28]
	}

	if (st->no_title) {
 8000e84:	69fb      	ldr	r3, [r7, #28]
 8000e86:	7e1b      	ldrb	r3, [r3, #24]
 8000e88:	f003 0301 	and.w	r3, r3, #1
 8000e8c:	b2db      	uxtb	r3, r3
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d002      	beq.n	8000e98 <window+0x50>
		title_len = 0;
 8000e92:	2300      	movs	r3, #0
 8000e94:	623b      	str	r3, [r7, #32]
 8000e96:	e038      	b.n	8000f0a <window+0xc2>
	} else {
		title_len = strlen(title);
 8000e98:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8000e9a:	f7ff f999 	bl	80001d0 <strlen>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	623b      	str	r3, [r7, #32]
		if (title_len > width-x1-6) {
 8000ea2:	887a      	ldrh	r2, [r7, #2]
 8000ea4:	88fb      	ldrh	r3, [r7, #6]
 8000ea6:	1ad3      	subs	r3, r2, r3
 8000ea8:	3b05      	subs	r3, #5
 8000eaa:	6a3a      	ldr	r2, [r7, #32]
 8000eac:	429a      	cmp	r2, r3
 8000eae:	db09      	blt.n	8000ec4 <window+0x7c>
			title_len = width-x1-6;
 8000eb0:	887a      	ldrh	r2, [r7, #2]
 8000eb2:	88fb      	ldrh	r3, [r7, #6]
 8000eb4:	1ad3      	subs	r3, r2, r3
 8000eb6:	3b06      	subs	r3, #6
 8000eb8:	623b      	str	r3, [r7, #32]
			if (title_len < 1) {
 8000eba:	6a3b      	ldr	r3, [r7, #32]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	dc01      	bgt.n	8000ec4 <window+0x7c>
				title_len = 0;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	623b      	str	r3, [r7, #32]
			}
		}
		if (title_len > 1) {
 8000ec4:	6a3b      	ldr	r3, [r7, #32]
 8000ec6:	2b01      	cmp	r3, #1
 8000ec8:	dd1d      	ble.n	8000f06 <window+0xbe>
			titlebuf = alloca(title_len+1);
 8000eca:	6a3b      	ldr	r3, [r7, #32]
 8000ecc:	3301      	adds	r3, #1
 8000ece:	3307      	adds	r3, #7
 8000ed0:	08db      	lsrs	r3, r3, #3
 8000ed2:	00db      	lsls	r3, r3, #3
 8000ed4:	ebad 0d03 	sub.w	sp, sp, r3
 8000ed8:	466b      	mov	r3, sp
 8000eda:	3307      	adds	r3, #7
 8000edc:	08db      	lsrs	r3, r3, #3
 8000ede:	00db      	lsls	r3, r3, #3
 8000ee0:	627b      	str	r3, [r7, #36]	; 0x24
			strncpy(titlebuf, title, title_len);
 8000ee2:	6a3b      	ldr	r3, [r7, #32]
 8000ee4:	461a      	mov	r2, r3
 8000ee6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8000ee8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000eea:	f000 fe66 	bl	8001bba <strncpy>
			titlebuf[title_len-1]='\xaf';
 8000eee:	6a3b      	ldr	r3, [r7, #32]
 8000ef0:	3b01      	subs	r3, #1
 8000ef2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ef4:	4413      	add	r3, r2
 8000ef6:	22af      	movs	r2, #175	; 0xaf
 8000ef8:	701a      	strb	r2, [r3, #0]
			titlebuf[title_len]='\0';
 8000efa:	6a3b      	ldr	r3, [r7, #32]
 8000efc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000efe:	4413      	add	r3, r2
 8000f00:	2200      	movs	r2, #0
 8000f02:	701a      	strb	r2, [r3, #0]
 8000f04:	e001      	b.n	8000f0a <window+0xc2>
		} else {
			title_len = 0;
 8000f06:	2300      	movs	r3, #0
 8000f08:	623b      	str	r3, [r7, #32]
		}
	}
	gotoxy(x1,y1);
 8000f0a:	88ba      	ldrh	r2, [r7, #4]
 8000f0c:	88fb      	ldrh	r3, [r7, #6]
 8000f0e:	4611      	mov	r1, r2
 8000f10:	4618      	mov	r0, r3
 8000f12:	f7ff ff83 	bl	8000e1c <gotoxy>
	color(st->fgcol, st->bgcol);
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	7e5a      	ldrb	r2, [r3, #25]
 8000f1a:	69fb      	ldr	r3, [r7, #28]
 8000f1c:	7e9b      	ldrb	r3, [r3, #26]
 8000f1e:	4619      	mov	r1, r3
 8000f20:	4610      	mov	r0, r2
 8000f22:	f7ff ff43 	bl	8000dac <color>
	// Draw corner and 1 line
	printf(st->tr);
 8000f26:	69fb      	ldr	r3, [r7, #28]
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f000 fd28 	bl	8001980 <iprintf>
	if (title_len) {
 8000f30:	6a3b      	ldr	r3, [r7, #32]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d016      	beq.n	8000f64 <window+0x11c>
		color(st->titlefg, st->titlebg);
 8000f36:	69fb      	ldr	r3, [r7, #28]
 8000f38:	7eda      	ldrb	r2, [r3, #27]
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	7f1b      	ldrb	r3, [r3, #28]
 8000f3e:	4619      	mov	r1, r3
 8000f40:	4610      	mov	r0, r2
 8000f42:	f7ff ff33 	bl	8000dac <color>
		printf(" %s ", titlebuf);
 8000f46:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000f48:	483f      	ldr	r0, [pc, #252]	; (8001048 <window+0x200>)
 8000f4a:	f000 fd19 	bl	8001980 <iprintf>
		color(st->fgcol, st->bgcol);
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	7e5a      	ldrb	r2, [r3, #25]
 8000f52:	69fb      	ldr	r3, [r7, #28]
 8000f54:	7e9b      	ldrb	r3, [r3, #26]
 8000f56:	4619      	mov	r1, r3
 8000f58:	4610      	mov	r0, r2
 8000f5a:	f7ff ff27 	bl	8000dac <color>
		title_len+=2;
 8000f5e:	6a3b      	ldr	r3, [r7, #32]
 8000f60:	3302      	adds	r3, #2
 8000f62:	623b      	str	r3, [r7, #32]
	}
	for (int c=0; c<width-title_len-2; c++) {
 8000f64:	2300      	movs	r3, #0
 8000f66:	61bb      	str	r3, [r7, #24]
 8000f68:	e007      	b.n	8000f7a <window+0x132>
		printf(st->h);
 8000f6a:	69fb      	ldr	r3, [r7, #28]
 8000f6c:	691b      	ldr	r3, [r3, #16]
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f000 fd06 	bl	8001980 <iprintf>
	for (int c=0; c<width-title_len-2; c++) {
 8000f74:	69bb      	ldr	r3, [r7, #24]
 8000f76:	3301      	adds	r3, #1
 8000f78:	61bb      	str	r3, [r7, #24]
 8000f7a:	887a      	ldrh	r2, [r7, #2]
 8000f7c:	6a3b      	ldr	r3, [r7, #32]
 8000f7e:	1ad3      	subs	r3, r2, r3
 8000f80:	3b02      	subs	r3, #2
 8000f82:	69ba      	ldr	r2, [r7, #24]
 8000f84:	429a      	cmp	r2, r3
 8000f86:	dbf0      	blt.n	8000f6a <window+0x122>
	}
	printf(st->tl);
 8000f88:	69fb      	ldr	r3, [r7, #28]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f000 fcf7 	bl	8001980 <iprintf>
	for (int y=y1+1; y<y1+height-1; y++) {
 8000f92:	88bb      	ldrh	r3, [r7, #4]
 8000f94:	3301      	adds	r3, #1
 8000f96:	617b      	str	r3, [r7, #20]
 8000f98:	e024      	b.n	8000fe4 <window+0x19c>
		gotoxy(x1, y);
 8000f9a:	697b      	ldr	r3, [r7, #20]
 8000f9c:	b29a      	uxth	r2, r3
 8000f9e:	88fb      	ldrh	r3, [r7, #6]
 8000fa0:	4611      	mov	r1, r2
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f7ff ff3a 	bl	8000e1c <gotoxy>
		printf(st->v);
 8000fa8:	69fb      	ldr	r3, [r7, #28]
 8000faa:	695b      	ldr	r3, [r3, #20]
 8000fac:	4618      	mov	r0, r3
 8000fae:	f000 fce7 	bl	8001980 <iprintf>
		for (int x=x1+1; x<x1+width-1; x++) {
 8000fb2:	88fb      	ldrh	r3, [r7, #6]
 8000fb4:	3301      	adds	r3, #1
 8000fb6:	613b      	str	r3, [r7, #16]
 8000fb8:	e005      	b.n	8000fc6 <window+0x17e>
			printf(" ");
 8000fba:	2020      	movs	r0, #32
 8000fbc:	f000 fcf2 	bl	80019a4 <putchar>
		for (int x=x1+1; x<x1+width-1; x++) {
 8000fc0:	693b      	ldr	r3, [r7, #16]
 8000fc2:	3301      	adds	r3, #1
 8000fc4:	613b      	str	r3, [r7, #16]
 8000fc6:	88fa      	ldrh	r2, [r7, #6]
 8000fc8:	887b      	ldrh	r3, [r7, #2]
 8000fca:	4413      	add	r3, r2
 8000fcc:	3b01      	subs	r3, #1
 8000fce:	693a      	ldr	r2, [r7, #16]
 8000fd0:	429a      	cmp	r2, r3
 8000fd2:	dbf2      	blt.n	8000fba <window+0x172>
		}
		printf(st->v);
 8000fd4:	69fb      	ldr	r3, [r7, #28]
 8000fd6:	695b      	ldr	r3, [r3, #20]
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f000 fcd1 	bl	8001980 <iprintf>
	for (int y=y1+1; y<y1+height-1; y++) {
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	617b      	str	r3, [r7, #20]
 8000fe4:	88ba      	ldrh	r2, [r7, #4]
 8000fe6:	883b      	ldrh	r3, [r7, #0]
 8000fe8:	4413      	add	r3, r2
 8000fea:	3b01      	subs	r3, #1
 8000fec:	697a      	ldr	r2, [r7, #20]
 8000fee:	429a      	cmp	r2, r3
 8000ff0:	dbd3      	blt.n	8000f9a <window+0x152>
	}
	gotoxy(x1,y1+height-1);
 8000ff2:	88ba      	ldrh	r2, [r7, #4]
 8000ff4:	883b      	ldrh	r3, [r7, #0]
 8000ff6:	4413      	add	r3, r2
 8000ff8:	b29b      	uxth	r3, r3
 8000ffa:	3b01      	subs	r3, #1
 8000ffc:	b29a      	uxth	r2, r3
 8000ffe:	88fb      	ldrh	r3, [r7, #6]
 8001000:	4611      	mov	r1, r2
 8001002:	4618      	mov	r0, r3
 8001004:	f7ff ff0a 	bl	8000e1c <gotoxy>
	printf(st->bl);
 8001008:	69fb      	ldr	r3, [r7, #28]
 800100a:	68db      	ldr	r3, [r3, #12]
 800100c:	4618      	mov	r0, r3
 800100e:	f000 fcb7 	bl	8001980 <iprintf>
	for (int c=0; c<width-2; c++) {
 8001012:	2300      	movs	r3, #0
 8001014:	60fb      	str	r3, [r7, #12]
 8001016:	e007      	b.n	8001028 <window+0x1e0>
		printf(st->h);
 8001018:	69fb      	ldr	r3, [r7, #28]
 800101a:	691b      	ldr	r3, [r3, #16]
 800101c:	4618      	mov	r0, r3
 800101e:	f000 fcaf 	bl	8001980 <iprintf>
	for (int c=0; c<width-2; c++) {
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	3301      	adds	r3, #1
 8001026:	60fb      	str	r3, [r7, #12]
 8001028:	887b      	ldrh	r3, [r7, #2]
 800102a:	3b02      	subs	r3, #2
 800102c:	68fa      	ldr	r2, [r7, #12]
 800102e:	429a      	cmp	r2, r3
 8001030:	dbf2      	blt.n	8001018 <window+0x1d0>
	}
	printf(st->br);
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	689b      	ldr	r3, [r3, #8]
 8001036:	4618      	mov	r0, r3
 8001038:	f000 fca2 	bl	8001980 <iprintf>
}
 800103c:	bf00      	nop
 800103e:	372c      	adds	r7, #44	; 0x2c
 8001040:	46bd      	mov	sp, r7
 8001042:	bd90      	pop	{r4, r7, pc}
 8001044:	08002bc0 	.word	0x08002bc0
 8001048:	08002b84 	.word	0x08002b84

0800104c <usleep>:
	vector_t v; // velocity
	vector_t p; // position
} ball_t;

static void usleep(uint32_t microseconds)
{
 800104c:	b480      	push	{r7}
 800104e:	b085      	sub	sp, #20
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
	for (int c=0; c<microseconds; c++) {
 8001054:	2300      	movs	r3, #0
 8001056:	60fb      	str	r3, [r7, #12]
 8001058:	e01a      	b.n	8001090 <usleep+0x44>
 		asm volatile("nop"); asm volatile("nop"); asm volatile("nop"); asm volatile("nop");
 800105a:	bf00      	nop
 800105c:	bf00      	nop
 800105e:	bf00      	nop
 8001060:	bf00      	nop
 		asm volatile("nop"); asm volatile("nop"); asm volatile("nop"); asm volatile("nop");
 8001062:	bf00      	nop
 8001064:	bf00      	nop
 8001066:	bf00      	nop
 8001068:	bf00      	nop
 		asm volatile("nop"); asm volatile("nop"); asm volatile("nop"); asm volatile("nop");
 800106a:	bf00      	nop
 800106c:	bf00      	nop
 800106e:	bf00      	nop
 8001070:	bf00      	nop
 		asm volatile("nop"); asm volatile("nop"); asm volatile("nop"); asm volatile("nop");
 8001072:	bf00      	nop
 8001074:	bf00      	nop
 8001076:	bf00      	nop
 8001078:	bf00      	nop
 		asm volatile("nop"); asm volatile("nop"); asm volatile("nop"); asm volatile("nop");
 800107a:	bf00      	nop
 800107c:	bf00      	nop
 800107e:	bf00      	nop
 8001080:	bf00      	nop
 		asm volatile("nop"); asm volatile("nop"); asm volatile("nop"); asm volatile("nop");
 8001082:	bf00      	nop
 8001084:	bf00      	nop
 8001086:	bf00      	nop
 8001088:	bf00      	nop
	for (int c=0; c<microseconds; c++) {
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	3301      	adds	r3, #1
 800108e:	60fb      	str	r3, [r7, #12]
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	687a      	ldr	r2, [r7, #4]
 8001094:	429a      	cmp	r2, r3
 8001096:	d8e0      	bhi.n	800105a <usleep+0xe>
	}
}
 8001098:	bf00      	nop
 800109a:	bf00      	nop
 800109c:	3714      	adds	r7, #20
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr

080010a6 <update_pos>:

static void update_pos(ball_t *b)
{
 80010a6:	b480      	push	{r7}
 80010a8:	b083      	sub	sp, #12
 80010aa:	af00      	add	r7, sp, #0
 80010ac:	6078      	str	r0, [r7, #4]
	b->p.x += b->v.x;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	689a      	ldr	r2, [r3, #8]
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	441a      	add	r2, r3
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	609a      	str	r2, [r3, #8]
	b->p.y += b->v.y;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	68da      	ldr	r2, [r3, #12]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	441a      	add	r2, r3
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	60da      	str	r2, [r3, #12]
}
 80010ca:	bf00      	nop
 80010cc:	370c      	adds	r7, #12
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
	...

080010d8 <bounce>:

static void bounce(playfield_t *pf)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b094      	sub	sp, #80	; 0x50
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
	ball_t b;
	int hits=0;
 80010e0:	2300      	movs	r3, #0
 80010e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80010e4:	2300      	movs	r3, #0
 80010e6:	873b      	strh	r3, [r7, #56]	; 0x38
	return v << 2;
}

inline __attribute__((always_inline)) fixed32_16_t int16_to_fixed32_16(int16_t v)
{
	return v << 16;
 80010e8:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 80010ec:	041b      	lsls	r3, r3, #16
	// Start position: 0,0
	b.p.x = int16_to_fixed32_16(0);
 80010ee:	613b      	str	r3, [r7, #16]
 80010f0:	2300      	movs	r3, #0
 80010f2:	877b      	strh	r3, [r7, #58]	; 0x3a
 80010f4:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 80010f8:	041b      	lsls	r3, r3, #16
	b.p.y = int16_to_fixed32_16(0);
 80010fa:	617b      	str	r3, [r7, #20]
 80010fc:	2301      	movs	r3, #1
 80010fe:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8001100:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 8001104:	041b      	lsls	r3, r3, #16
	// Start velocity: 1.25, 0.75
	//b.v.x = (1 << 16) | 0x8000;
	//b.v.x = (1 << 16) | 0xa000;
	// Start velocity: 1,1
	b.v.x = int16_to_fixed32_16(1);
 8001106:	60bb      	str	r3, [r7, #8]
 8001108:	2301      	movs	r3, #1
 800110a:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800110c:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 8001110:	041b      	lsls	r3, r3, #16
	b.v.y = int16_to_fixed32_16(1);
 8001112:	60fb      	str	r3, [r7, #12]
	while(1) {
		// Update hit counter
		gotoxy(pf->xoffset+pf->status_x, pf->xoffset+pf->status_y);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	889a      	ldrh	r2, [r3, #4]
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	891b      	ldrh	r3, [r3, #8]
 800111c:	4413      	add	r3, r2
 800111e:	b298      	uxth	r0, r3
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	889a      	ldrh	r2, [r3, #4]
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	895b      	ldrh	r3, [r3, #10]
 8001128:	4413      	add	r3, r2
 800112a:	b29b      	uxth	r3, r3
 800112c:	4619      	mov	r1, r3
 800112e:	f7ff fe75 	bl	8000e1c <gotoxy>
		color(11,4);
 8001132:	2104      	movs	r1, #4
 8001134:	200b      	movs	r0, #11
 8001136:	f7ff fe39 	bl	8000dac <color>
		printf("Hits: %4d\n", hits);
 800113a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800113c:	4882      	ldr	r0, [pc, #520]	; (8001348 <bounce+0x270>)
 800113e:	f000 fc1f 	bl	8001980 <iprintf>

		int16_t rounded_x, rounded_y;
		rounded_x = round_fixed32_16(b.p.x);
 8001142:	693b      	ldr	r3, [r7, #16]
 8001144:	633b      	str	r3, [r7, #48]	; 0x30
	return (int64_t)(x * (int64_t)(y) << 16) >> 32;
}

inline  __attribute__((always_inline)) int16_t round_fixed32_16(fixed32_16_t v)
{
	return (v >> 16) + ((v >> 15) & 1);
 8001146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001148:	141b      	asrs	r3, r3, #16
 800114a:	b29a      	uxth	r2, r3
 800114c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800114e:	13db      	asrs	r3, r3, #15
 8001150:	b29b      	uxth	r3, r3
 8001152:	f003 0301 	and.w	r3, r3, #1
 8001156:	b29b      	uxth	r3, r3
 8001158:	4413      	add	r3, r2
 800115a:	b29b      	uxth	r3, r3
 800115c:	b21b      	sxth	r3, r3
 800115e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
		rounded_y = round_fixed32_16(b.p.y);
 8001162:	697b      	ldr	r3, [r7, #20]
 8001164:	637b      	str	r3, [r7, #52]	; 0x34
 8001166:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001168:	141b      	asrs	r3, r3, #16
 800116a:	b29a      	uxth	r2, r3
 800116c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800116e:	13db      	asrs	r3, r3, #15
 8001170:	b29b      	uxth	r3, r3
 8001172:	f003 0301 	and.w	r3, r3, #1
 8001176:	b29b      	uxth	r3, r3
 8001178:	4413      	add	r3, r2
 800117a:	b29b      	uxth	r3, r3
 800117c:	b21b      	sxth	r3, r3
 800117e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

		int obscured = 0;
 8001182:	2300      	movs	r3, #0
 8001184:	64bb      	str	r3, [r7, #72]	; 0x48
		// Check if the ball is obscured by the infobox
		if ( (rounded_x >= pf->status_x-3) && (rounded_x <= pf->status_x-2+14) &&
 8001186:	f9b7 2044 	ldrsh.w	r2, [r7, #68]	; 0x44
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	891b      	ldrh	r3, [r3, #8]
 800118e:	3b03      	subs	r3, #3
 8001190:	429a      	cmp	r2, r3
 8001192:	db16      	blt.n	80011c2 <bounce+0xea>
 8001194:	f9b7 2044 	ldrsh.w	r2, [r7, #68]	; 0x44
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	891b      	ldrh	r3, [r3, #8]
 800119c:	330c      	adds	r3, #12
 800119e:	429a      	cmp	r2, r3
 80011a0:	dc0f      	bgt.n	80011c2 <bounce+0xea>
			 (rounded_y >= pf->status_y-1) && (rounded_y <= pf->status_y-1+3))
 80011a2:	f9b7 2042 	ldrsh.w	r2, [r7, #66]	; 0x42
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	895b      	ldrh	r3, [r3, #10]
 80011aa:	3b01      	subs	r3, #1
		if ( (rounded_x >= pf->status_x-3) && (rounded_x <= pf->status_x-2+14) &&
 80011ac:	429a      	cmp	r2, r3
 80011ae:	db08      	blt.n	80011c2 <bounce+0xea>
			 (rounded_y >= pf->status_y-1) && (rounded_y <= pf->status_y-1+3))
 80011b0:	f9b7 2042 	ldrsh.w	r2, [r7, #66]	; 0x42
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	895b      	ldrh	r3, [r3, #10]
 80011b8:	3302      	adds	r3, #2
 80011ba:	429a      	cmp	r2, r3
 80011bc:	dc01      	bgt.n	80011c2 <bounce+0xea>
			obscured = 1;
 80011be:	2301      	movs	r3, #1
 80011c0:	64bb      	str	r3, [r7, #72]	; 0x48

		// Draw the ball
		if (!obscured) {
 80011c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d116      	bne.n	80011f6 <bounce+0x11e>
			gotoxy(pf->xoffset+rounded_x, pf->yoffset+rounded_y);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	889a      	ldrh	r2, [r3, #4]
 80011cc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80011d0:	4413      	add	r3, r2
 80011d2:	b298      	uxth	r0, r3
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	88da      	ldrh	r2, [r3, #6]
 80011d8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80011dc:	4413      	add	r3, r2
 80011de:	b29b      	uxth	r3, r3
 80011e0:	4619      	mov	r1, r3
 80011e2:	f7ff fe1b 	bl	8000e1c <gotoxy>
			color(13,7);
 80011e6:	2107      	movs	r1, #7
 80011e8:	200d      	movs	r0, #13
 80011ea:	f7ff fddf 	bl	8000dac <color>
			printf("\xfe");
 80011ee:	f06f 0001 	mvn.w	r0, #1
 80011f2:	f000 fbd7 	bl	80019a4 <putchar>
		}

		// Wait for a bit
		usleep(100000);
 80011f6:	4855      	ldr	r0, [pc, #340]	; (800134c <bounce+0x274>)
 80011f8:	f7ff ff28 	bl	800104c <usleep>

		// Now delete the ball from the old position
		if (!obscured) {
 80011fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d111      	bne.n	8001226 <bounce+0x14e>
			gotoxy(pf->xoffset+rounded_x, pf->yoffset+rounded_y);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	889a      	ldrh	r2, [r3, #4]
 8001206:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800120a:	4413      	add	r3, r2
 800120c:	b298      	uxth	r0, r3
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	88da      	ldrh	r2, [r3, #6]
 8001212:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8001216:	4413      	add	r3, r2
 8001218:	b29b      	uxth	r3, r3
 800121a:	4619      	mov	r1, r3
 800121c:	f7ff fdfe 	bl	8000e1c <gotoxy>
			printf(" ");
 8001220:	2020      	movs	r0, #32
 8001222:	f000 fbbf 	bl	80019a4 <putchar>
		}

		// Update ball's position
		update_pos(&b);
 8001226:	f107 0308 	add.w	r3, r7, #8
 800122a:	4618      	mov	r0, r3
 800122c:	f7ff ff3b 	bl	80010a6 <update_pos>
		int16_t newx, newy;
		newx = round_fixed32_16(b.p.x);
 8001230:	693b      	ldr	r3, [r7, #16]
 8001232:	62bb      	str	r3, [r7, #40]	; 0x28
 8001234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001236:	141b      	asrs	r3, r3, #16
 8001238:	b29a      	uxth	r2, r3
 800123a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800123c:	13db      	asrs	r3, r3, #15
 800123e:	b29b      	uxth	r3, r3
 8001240:	f003 0301 	and.w	r3, r3, #1
 8001244:	b29b      	uxth	r3, r3
 8001246:	4413      	add	r3, r2
 8001248:	b29b      	uxth	r3, r3
 800124a:	b21b      	sxth	r3, r3
 800124c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
		newy = round_fixed32_16(b.p.y);
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001256:	141b      	asrs	r3, r3, #16
 8001258:	b29a      	uxth	r2, r3
 800125a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800125c:	13db      	asrs	r3, r3, #15
 800125e:	b29b      	uxth	r3, r3
 8001260:	f003 0301 	and.w	r3, r3, #1
 8001264:	b29b      	uxth	r3, r3
 8001266:	4413      	add	r3, r2
 8001268:	b29b      	uxth	r3, r3
 800126a:	b21b      	sxth	r3, r3
 800126c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46

		// Check for collission with walls
		if (newx<0 || newx >= pf->xsize) {
 8001270:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 8001274:	2b00      	cmp	r3, #0
 8001276:	db05      	blt.n	8001284 <bounce+0x1ac>
 8001278:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 800127c:	687a      	ldr	r2, [r7, #4]
 800127e:	8812      	ldrh	r2, [r2, #0]
 8001280:	4293      	cmp	r3, r2
 8001282:	db2a      	blt.n	80012da <bounce+0x202>
			b.v.x = -b.v.x;
 8001284:	68bb      	ldr	r3, [r7, #8]
 8001286:	425b      	negs	r3, r3
 8001288:	60bb      	str	r3, [r7, #8]
			update_pos(&b);
 800128a:	f107 0308 	add.w	r3, r7, #8
 800128e:	4618      	mov	r0, r3
 8001290:	f7ff ff09 	bl	80010a6 <update_pos>
			newx = round_fixed32_16(b.p.x);
 8001294:	693b      	ldr	r3, [r7, #16]
 8001296:	623b      	str	r3, [r7, #32]
 8001298:	6a3b      	ldr	r3, [r7, #32]
 800129a:	141b      	asrs	r3, r3, #16
 800129c:	b29a      	uxth	r2, r3
 800129e:	6a3b      	ldr	r3, [r7, #32]
 80012a0:	13db      	asrs	r3, r3, #15
 80012a2:	b29b      	uxth	r3, r3
 80012a4:	f003 0301 	and.w	r3, r3, #1
 80012a8:	b29b      	uxth	r3, r3
 80012aa:	4413      	add	r3, r2
 80012ac:	b29b      	uxth	r3, r3
 80012ae:	b21b      	sxth	r3, r3
 80012b0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			newy = round_fixed32_16(b.p.y);
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	627b      	str	r3, [r7, #36]	; 0x24
 80012b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ba:	141b      	asrs	r3, r3, #16
 80012bc:	b29a      	uxth	r2, r3
 80012be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012c0:	13db      	asrs	r3, r3, #15
 80012c2:	b29b      	uxth	r3, r3
 80012c4:	f003 0301 	and.w	r3, r3, #1
 80012c8:	b29b      	uxth	r3, r3
 80012ca:	4413      	add	r3, r2
 80012cc:	b29b      	uxth	r3, r3
 80012ce:	b21b      	sxth	r3, r3
 80012d0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
			hits++;
 80012d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80012d6:	3301      	adds	r3, #1
 80012d8:	64fb      	str	r3, [r7, #76]	; 0x4c
		}
		if (newy < 0 || newy >= pf->ysize) {
 80012da:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 80012de:	2b00      	cmp	r3, #0
 80012e0:	db06      	blt.n	80012f0 <bounce+0x218>
 80012e2:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 80012e6:	687a      	ldr	r2, [r7, #4]
 80012e8:	8852      	ldrh	r2, [r2, #2]
 80012ea:	4293      	cmp	r3, r2
 80012ec:	f6ff af12 	blt.w	8001114 <bounce+0x3c>
			b.v.y = -b.v.y;
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	425b      	negs	r3, r3
 80012f4:	60fb      	str	r3, [r7, #12]
			update_pos(&b);
 80012f6:	f107 0308 	add.w	r3, r7, #8
 80012fa:	4618      	mov	r0, r3
 80012fc:	f7ff fed3 	bl	80010a6 <update_pos>
			newx = round_fixed32_16(b.p.x);
 8001300:	693b      	ldr	r3, [r7, #16]
 8001302:	61bb      	str	r3, [r7, #24]
 8001304:	69bb      	ldr	r3, [r7, #24]
 8001306:	141b      	asrs	r3, r3, #16
 8001308:	b29a      	uxth	r2, r3
 800130a:	69bb      	ldr	r3, [r7, #24]
 800130c:	13db      	asrs	r3, r3, #15
 800130e:	b29b      	uxth	r3, r3
 8001310:	f003 0301 	and.w	r3, r3, #1
 8001314:	b29b      	uxth	r3, r3
 8001316:	4413      	add	r3, r2
 8001318:	b29b      	uxth	r3, r3
 800131a:	b21b      	sxth	r3, r3
 800131c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			newy = round_fixed32_16(b.p.y);
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	61fb      	str	r3, [r7, #28]
 8001324:	69fb      	ldr	r3, [r7, #28]
 8001326:	141b      	asrs	r3, r3, #16
 8001328:	b29a      	uxth	r2, r3
 800132a:	69fb      	ldr	r3, [r7, #28]
 800132c:	13db      	asrs	r3, r3, #15
 800132e:	b29b      	uxth	r3, r3
 8001330:	f003 0301 	and.w	r3, r3, #1
 8001334:	b29b      	uxth	r3, r3
 8001336:	4413      	add	r3, r2
 8001338:	b29b      	uxth	r3, r3
 800133a:	b21b      	sxth	r3, r3
 800133c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
			hits++;
 8001340:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001342:	3301      	adds	r3, #1
 8001344:	64fb      	str	r3, [r7, #76]	; 0x4c
	while(1) {
 8001346:	e6e5      	b.n	8001114 <bounce+0x3c>
 8001348:	08002b8c 	.word	0x08002b8c
 800134c:	000186a0 	.word	0x000186a0

08001350 <bounceball>:
		// Check for collision with infobox
	}
}

void bounceball(void)
{
 8001350:	b590      	push	{r4, r7, lr}
 8001352:	b087      	sub	sp, #28
 8001354:	af02      	add	r7, sp, #8
	playfield_t pf;

	const terminfo_t *ti = get_terminfo();
 8001356:	f7ff fc49 	bl	8000bec <get_terminfo>
 800135a:	60f8      	str	r0, [r7, #12]
	if (!ti->initialized) {
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d101      	bne.n	8001368 <bounceball+0x18>
		init_term();
 8001364:	f7ff fc92 	bl	8000c8c <init_term>
	}
	pf.xsize = (ti->x_size-4);
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	885b      	ldrh	r3, [r3, #2]
 800136c:	3b04      	subs	r3, #4
 800136e:	b29b      	uxth	r3, r3
 8001370:	803b      	strh	r3, [r7, #0]
	pf.ysize = (ti->y_size-4);
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	889b      	ldrh	r3, [r3, #4]
 8001376:	3b04      	subs	r3, #4
 8001378:	b29b      	uxth	r3, r3
 800137a:	807b      	strh	r3, [r7, #2]
	pf.xoffset=2;
 800137c:	2302      	movs	r3, #2
 800137e:	80bb      	strh	r3, [r7, #4]
	pf.yoffset=2;
 8001380:	2302      	movs	r3, #2
 8001382:	80fb      	strh	r3, [r7, #6]
	pf.status_x = (pf.xsize >> 1) - (12 >> 1); // " Hits: #### ": 12 chars
 8001384:	883b      	ldrh	r3, [r7, #0]
 8001386:	085b      	lsrs	r3, r3, #1
 8001388:	b29b      	uxth	r3, r3
 800138a:	3b06      	subs	r3, #6
 800138c:	b29b      	uxth	r3, r3
 800138e:	813b      	strh	r3, [r7, #8]
	pf.status_y = pf.ysize >> 1;
 8001390:	887b      	ldrh	r3, [r7, #2]
 8001392:	085b      	lsrs	r3, r3, #1
 8001394:	b29b      	uxth	r3, r3
 8001396:	817b      	strh	r3, [r7, #10]
	printf(" Playfield size: %dx%d. Let's Bounce!", pf.xsize, pf.ysize);
 8001398:	883b      	ldrh	r3, [r7, #0]
 800139a:	4619      	mov	r1, r3
 800139c:	887b      	ldrh	r3, [r7, #2]
 800139e:	461a      	mov	r2, r3
 80013a0:	4819      	ldr	r0, [pc, #100]	; (8001408 <bounceball+0xb8>)
 80013a2:	f000 faed 	bl	8001980 <iprintf>
	hide_cursor(1);
 80013a6:	2001      	movs	r0, #1
 80013a8:	f7ff fd22 	bl	8000df0 <hide_cursor>
	window(pf.xoffset-1,pf.yoffset-1,pf.xsize+2,pf.ysize+2,3,NULL);
 80013ac:	88bb      	ldrh	r3, [r7, #4]
 80013ae:	3b01      	subs	r3, #1
 80013b0:	b298      	uxth	r0, r3
 80013b2:	88fb      	ldrh	r3, [r7, #6]
 80013b4:	3b01      	subs	r3, #1
 80013b6:	b299      	uxth	r1, r3
 80013b8:	883b      	ldrh	r3, [r7, #0]
 80013ba:	3302      	adds	r3, #2
 80013bc:	b29a      	uxth	r2, r3
 80013be:	887b      	ldrh	r3, [r7, #2]
 80013c0:	3302      	adds	r3, #2
 80013c2:	b29b      	uxth	r3, r3
 80013c4:	2400      	movs	r4, #0
 80013c6:	9401      	str	r4, [sp, #4]
 80013c8:	2403      	movs	r4, #3
 80013ca:	9400      	str	r4, [sp, #0]
 80013cc:	f7ff fd3c 	bl	8000e48 <window>
	window(pf.xoffset+pf.status_x-2,pf.yoffset+pf.status_y-1,14,3,4,NULL);
 80013d0:	88ba      	ldrh	r2, [r7, #4]
 80013d2:	893b      	ldrh	r3, [r7, #8]
 80013d4:	4413      	add	r3, r2
 80013d6:	b29b      	uxth	r3, r3
 80013d8:	3b02      	subs	r3, #2
 80013da:	b298      	uxth	r0, r3
 80013dc:	88fa      	ldrh	r2, [r7, #6]
 80013de:	897b      	ldrh	r3, [r7, #10]
 80013e0:	4413      	add	r3, r2
 80013e2:	b29b      	uxth	r3, r3
 80013e4:	3b01      	subs	r3, #1
 80013e6:	b299      	uxth	r1, r3
 80013e8:	2300      	movs	r3, #0
 80013ea:	9301      	str	r3, [sp, #4]
 80013ec:	2304      	movs	r3, #4
 80013ee:	9300      	str	r3, [sp, #0]
 80013f0:	2303      	movs	r3, #3
 80013f2:	220e      	movs	r2, #14
 80013f4:	f7ff fd28 	bl	8000e48 <window>
	bounce(&pf);
 80013f8:	463b      	mov	r3, r7
 80013fa:	4618      	mov	r0, r3
 80013fc:	f7ff fe6c 	bl	80010d8 <bounce>
}
 8001400:	bf00      	nop
 8001402:	3714      	adds	r7, #20
 8001404:	46bd      	mov	sp, r7
 8001406:	bd90      	pop	{r4, r7, pc}
 8001408:	08002b98 	.word	0x08002b98

0800140c <main>:
#include "ansi.h"
#include "fixedpoint_trig.h"
#include "bounceball.h"

int main(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0

// Setup communication with the PC
	uart_init(460800);
 8001410:	f44f 20e1 	mov.w	r0, #460800	; 0x70800
 8001414:	f7ff fad0 	bl	80009b8 <uart_init>
	init_term();
 8001418:	f7ff fc38 	bl	8000c8c <init_term>

#if 1
	bounceball();
 800141c:	f7ff ff98 	bl	8001350 <bounceball>
	color(7,0);
	clrscr();
	test_fp_sincos();
#endif

	for(;;);
 8001420:	e7fe      	b.n	8001420 <main+0x14>

08001422 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001422:	b480      	push	{r7}
 8001424:	af00      	add	r7, sp, #0
	return 1;
 8001426:	2301      	movs	r3, #1
}
 8001428:	4618      	mov	r0, r3
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr

08001432 <_kill>:

int _kill(int pid, int sig)
{
 8001432:	b580      	push	{r7, lr}
 8001434:	b082      	sub	sp, #8
 8001436:	af00      	add	r7, sp, #0
 8001438:	6078      	str	r0, [r7, #4]
 800143a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800143c:	f000 fc78 	bl	8001d30 <__errno>
 8001440:	4603      	mov	r3, r0
 8001442:	2216      	movs	r2, #22
 8001444:	601a      	str	r2, [r3, #0]
	return -1;
 8001446:	f04f 33ff 	mov.w	r3, #4294967295
}
 800144a:	4618      	mov	r0, r3
 800144c:	3708      	adds	r7, #8
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}

08001452 <_exit>:

void _exit (int status)
{
 8001452:	b580      	push	{r7, lr}
 8001454:	b082      	sub	sp, #8
 8001456:	af00      	add	r7, sp, #0
 8001458:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800145a:	f04f 31ff 	mov.w	r1, #4294967295
 800145e:	6878      	ldr	r0, [r7, #4]
 8001460:	f7ff ffe7 	bl	8001432 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001464:	e7fe      	b.n	8001464 <_exit+0x12>

08001466 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001466:	b580      	push	{r7, lr}
 8001468:	b086      	sub	sp, #24
 800146a:	af00      	add	r7, sp, #0
 800146c:	60f8      	str	r0, [r7, #12]
 800146e:	60b9      	str	r1, [r7, #8]
 8001470:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001472:	2300      	movs	r3, #0
 8001474:	617b      	str	r3, [r7, #20]
 8001476:	e00a      	b.n	800148e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001478:	f3af 8000 	nop.w
 800147c:	4601      	mov	r1, r0
 800147e:	68bb      	ldr	r3, [r7, #8]
 8001480:	1c5a      	adds	r2, r3, #1
 8001482:	60ba      	str	r2, [r7, #8]
 8001484:	b2ca      	uxtb	r2, r1
 8001486:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	3301      	adds	r3, #1
 800148c:	617b      	str	r3, [r7, #20]
 800148e:	697a      	ldr	r2, [r7, #20]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	429a      	cmp	r2, r3
 8001494:	dbf0      	blt.n	8001478 <_read+0x12>
	}

return len;
 8001496:	687b      	ldr	r3, [r7, #4]
}
 8001498:	4618      	mov	r0, r3
 800149a:	3718      	adds	r7, #24
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}

080014a0 <_close>:
	}
	return len;
}

int _close(int file)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b083      	sub	sp, #12
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
	return -1;
 80014a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	370c      	adds	r7, #12
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr

080014b8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b083      	sub	sp, #12
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
 80014c0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014c8:	605a      	str	r2, [r3, #4]
	return 0;
 80014ca:	2300      	movs	r3, #0
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	370c      	adds	r7, #12
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr

080014d8 <_isatty>:

int _isatty(int file)
{
 80014d8:	b480      	push	{r7}
 80014da:	b083      	sub	sp, #12
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
	return 1;
 80014e0:	2301      	movs	r3, #1
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	370c      	adds	r7, #12
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr

080014ee <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80014ee:	b480      	push	{r7}
 80014f0:	b085      	sub	sp, #20
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	60f8      	str	r0, [r7, #12]
 80014f6:	60b9      	str	r1, [r7, #8]
 80014f8:	607a      	str	r2, [r7, #4]
	return 0;
 80014fa:	2300      	movs	r3, #0
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	3714      	adds	r7, #20
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr

08001508 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b084      	sub	sp, #16
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001510:	4b11      	ldr	r3, [pc, #68]	; (8001558 <_sbrk+0x50>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d102      	bne.n	800151e <_sbrk+0x16>
		heap_end = &end;
 8001518:	4b0f      	ldr	r3, [pc, #60]	; (8001558 <_sbrk+0x50>)
 800151a:	4a10      	ldr	r2, [pc, #64]	; (800155c <_sbrk+0x54>)
 800151c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800151e:	4b0e      	ldr	r3, [pc, #56]	; (8001558 <_sbrk+0x50>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001524:	4b0c      	ldr	r3, [pc, #48]	; (8001558 <_sbrk+0x50>)
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	4413      	add	r3, r2
 800152c:	466a      	mov	r2, sp
 800152e:	4293      	cmp	r3, r2
 8001530:	d907      	bls.n	8001542 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001532:	f000 fbfd 	bl	8001d30 <__errno>
 8001536:	4603      	mov	r3, r0
 8001538:	220c      	movs	r2, #12
 800153a:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 800153c:	f04f 33ff 	mov.w	r3, #4294967295
 8001540:	e006      	b.n	8001550 <_sbrk+0x48>
	}

	heap_end += incr;
 8001542:	4b05      	ldr	r3, [pc, #20]	; (8001558 <_sbrk+0x50>)
 8001544:	681a      	ldr	r2, [r3, #0]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	4413      	add	r3, r2
 800154a:	4a03      	ldr	r2, [pc, #12]	; (8001558 <_sbrk+0x50>)
 800154c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800154e:	68fb      	ldr	r3, [r7, #12]
}
 8001550:	4618      	mov	r0, r3
 8001552:	3710      	adds	r7, #16
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	200001b0 	.word	0x200001b0
 800155c:	20000300 	.word	0x20000300

08001560 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001564:	4b1f      	ldr	r3, [pc, #124]	; (80015e4 <SystemInit+0x84>)
 8001566:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800156a:	4a1e      	ldr	r2, [pc, #120]	; (80015e4 <SystemInit+0x84>)
 800156c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001570:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001574:	4b1c      	ldr	r3, [pc, #112]	; (80015e8 <SystemInit+0x88>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a1b      	ldr	r2, [pc, #108]	; (80015e8 <SystemInit+0x88>)
 800157a:	f043 0301 	orr.w	r3, r3, #1
 800157e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00C;
 8001580:	4b19      	ldr	r3, [pc, #100]	; (80015e8 <SystemInit+0x88>)
 8001582:	685a      	ldr	r2, [r3, #4]
 8001584:	4918      	ldr	r1, [pc, #96]	; (80015e8 <SystemInit+0x88>)
 8001586:	4b19      	ldr	r3, [pc, #100]	; (80015ec <SystemInit+0x8c>)
 8001588:	4013      	ands	r3, r2
 800158a:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800158c:	4b16      	ldr	r3, [pc, #88]	; (80015e8 <SystemInit+0x88>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a15      	ldr	r2, [pc, #84]	; (80015e8 <SystemInit+0x88>)
 8001592:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001596:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800159a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800159c:	4b12      	ldr	r3, [pc, #72]	; (80015e8 <SystemInit+0x88>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a11      	ldr	r2, [pc, #68]	; (80015e8 <SystemInit+0x88>)
 80015a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015a6:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 80015a8:	4b0f      	ldr	r3, [pc, #60]	; (80015e8 <SystemInit+0x88>)
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	4a0e      	ldr	r2, [pc, #56]	; (80015e8 <SystemInit+0x88>)
 80015ae:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80015b2:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 80015b4:	4b0c      	ldr	r3, [pc, #48]	; (80015e8 <SystemInit+0x88>)
 80015b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015b8:	4a0b      	ldr	r2, [pc, #44]	; (80015e8 <SystemInit+0x88>)
 80015ba:	f023 030f 	bic.w	r3, r3, #15
 80015be:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= (uint32_t)0xFF00FCCC;
 80015c0:	4b09      	ldr	r3, [pc, #36]	; (80015e8 <SystemInit+0x88>)
 80015c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015c4:	4908      	ldr	r1, [pc, #32]	; (80015e8 <SystemInit+0x88>)
 80015c6:	4b0a      	ldr	r3, [pc, #40]	; (80015f0 <SystemInit+0x90>)
 80015c8:	4013      	ands	r3, r2
 80015ca:	630b      	str	r3, [r1, #48]	; 0x30
  
  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80015cc:	4b06      	ldr	r3, [pc, #24]	; (80015e8 <SystemInit+0x88>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	609a      	str	r2, [r3, #8]

  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 80015d2:	f000 f80f 	bl	80015f4 <SetSysClock>
  
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80015d6:	4b03      	ldr	r3, [pc, #12]	; (80015e4 <SystemInit+0x84>)
 80015d8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80015dc:	609a      	str	r2, [r3, #8]
#endif  
}
 80015de:	bf00      	nop
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	e000ed00 	.word	0xe000ed00
 80015e8:	40021000 	.word	0x40021000
 80015ec:	f87fc00c 	.word	0xf87fc00c
 80015f0:	ff00fccc 	.word	0xff00fccc

080015f4 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).             
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
  /* At this stage the HSI is already enabled and used as System clock source */
  
  /* SYSCLK, HCLK, PCLK configuration ----------------------------------------*/

  /* Enable Prefetch Buffer and set Flash Latency */
  FLASH->ACR = FLASH_ACR_PRFTBE | (uint32_t)FLASH_ACR_LATENCY_1;
 80015f8:	4b21      	ldr	r3, [pc, #132]	; (8001680 <SetSysClock+0x8c>)
 80015fa:	2212      	movs	r2, #18
 80015fc:	601a      	str	r2, [r3, #0]

  /* HCLK = SYSCLK / 1 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 80015fe:	4b21      	ldr	r3, [pc, #132]	; (8001684 <SetSysClock+0x90>)
 8001600:	4a20      	ldr	r2, [pc, #128]	; (8001684 <SetSysClock+0x90>)
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	6053      	str	r3, [r2, #4]

  /* PCLK2 = HCLK / 1 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8001606:	4b1f      	ldr	r3, [pc, #124]	; (8001684 <SetSysClock+0x90>)
 8001608:	4a1e      	ldr	r2, [pc, #120]	; (8001684 <SetSysClock+0x90>)
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	6053      	str	r3, [r2, #4]

  /* PCLK1 = HCLK / 2 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 800160e:	4b1d      	ldr	r3, [pc, #116]	; (8001684 <SetSysClock+0x90>)
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	4a1c      	ldr	r2, [pc, #112]	; (8001684 <SetSysClock+0x90>)
 8001614:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001618:	6053      	str	r3, [r2, #4]

  /*  PLL configuration */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 800161a:	4b1a      	ldr	r3, [pc, #104]	; (8001684 <SetSysClock+0x90>)
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	4a19      	ldr	r2, [pc, #100]	; (8001684 <SetSysClock+0x90>)
 8001620:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8001624:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSI_Div2 | RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLMULL16);
 8001626:	4b17      	ldr	r3, [pc, #92]	; (8001684 <SetSysClock+0x90>)
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	4a16      	ldr	r2, [pc, #88]	; (8001684 <SetSysClock+0x90>)
 800162c:	f443 1360 	orr.w	r3, r3, #3670016	; 0x380000
 8001630:	6053      	str	r3, [r2, #4]

  /* Enable PLL */
  RCC->CR |= RCC_CR_PLLON;
 8001632:	4b14      	ldr	r3, [pc, #80]	; (8001684 <SetSysClock+0x90>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4a13      	ldr	r2, [pc, #76]	; (8001684 <SetSysClock+0x90>)
 8001638:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800163c:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is ready */
  while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800163e:	bf00      	nop
 8001640:	4b10      	ldr	r3, [pc, #64]	; (8001684 <SetSysClock+0x90>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001648:	2b00      	cmp	r3, #0
 800164a:	d0f9      	beq.n	8001640 <SetSysClock+0x4c>
  {
  }

  /* Select PLL as system clock source */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 800164c:	4b0d      	ldr	r3, [pc, #52]	; (8001684 <SetSysClock+0x90>)
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	4a0c      	ldr	r2, [pc, #48]	; (8001684 <SetSysClock+0x90>)
 8001652:	f023 0303 	bic.w	r3, r3, #3
 8001656:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
 8001658:	4b0a      	ldr	r3, [pc, #40]	; (8001684 <SetSysClock+0x90>)
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	4a09      	ldr	r2, [pc, #36]	; (8001684 <SetSysClock+0x90>)
 800165e:	f043 0302 	orr.w	r3, r3, #2
 8001662:	6053      	str	r3, [r2, #4]

  /* Wait till PLL is used as system clock source */
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 8001664:	bf00      	nop
 8001666:	4b07      	ldr	r3, [pc, #28]	; (8001684 <SetSysClock+0x90>)
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	f003 030c 	and.w	r3, r3, #12
 800166e:	2b08      	cmp	r3, #8
 8001670:	d1f9      	bne.n	8001666 <SetSysClock+0x72>
  {
  }
}
 8001672:	bf00      	nop
 8001674:	bf00      	nop
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	40022000 	.word	0x40022000
 8001684:	40021000 	.word	0x40021000

08001688 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001688:	480d      	ldr	r0, [pc, #52]	; (80016c0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800168a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800168c:	480d      	ldr	r0, [pc, #52]	; (80016c4 <LoopForever+0x6>)
  ldr r1, =_edata
 800168e:	490e      	ldr	r1, [pc, #56]	; (80016c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001690:	4a0e      	ldr	r2, [pc, #56]	; (80016cc <LoopForever+0xe>)
  movs r3, #0
 8001692:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001694:	e002      	b.n	800169c <LoopCopyDataInit>

08001696 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001696:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001698:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800169a:	3304      	adds	r3, #4

0800169c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800169c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800169e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016a0:	d3f9      	bcc.n	8001696 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016a2:	4a0b      	ldr	r2, [pc, #44]	; (80016d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80016a4:	4c0b      	ldr	r4, [pc, #44]	; (80016d4 <LoopForever+0x16>)
  movs r3, #0
 80016a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016a8:	e001      	b.n	80016ae <LoopFillZerobss>

080016aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016ac:	3204      	adds	r2, #4

080016ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016b0:	d3fb      	bcc.n	80016aa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80016b2:	f7ff ff55 	bl	8001560 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80016b6:	f000 fb41 	bl	8001d3c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80016ba:	f7ff fea7 	bl	800140c <main>

080016be <LoopForever>:

LoopForever:
    b LoopForever
 80016be:	e7fe      	b.n	80016be <LoopForever>
  ldr   r0, =_estack
 80016c0:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80016c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016c8:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 80016cc:	08002e2c 	.word	0x08002e2c
  ldr r2, =_sbss
 80016d0:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 80016d4:	20000300 	.word	0x20000300

080016d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80016d8:	e7fe      	b.n	80016d8 <ADC1_2_IRQHandler>

080016da <atoi>:
 80016da:	220a      	movs	r2, #10
 80016dc:	2100      	movs	r1, #0
 80016de:	f000 b883 	b.w	80017e8 <strtol>
	...

080016e4 <_strtol_l.constprop.0>:
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80016ea:	d001      	beq.n	80016f0 <_strtol_l.constprop.0+0xc>
 80016ec:	2b24      	cmp	r3, #36	; 0x24
 80016ee:	d906      	bls.n	80016fe <_strtol_l.constprop.0+0x1a>
 80016f0:	f000 fb1e 	bl	8001d30 <__errno>
 80016f4:	2316      	movs	r3, #22
 80016f6:	6003      	str	r3, [r0, #0]
 80016f8:	2000      	movs	r0, #0
 80016fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80016fe:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80017e4 <_strtol_l.constprop.0+0x100>
 8001702:	460d      	mov	r5, r1
 8001704:	462e      	mov	r6, r5
 8001706:	f815 4b01 	ldrb.w	r4, [r5], #1
 800170a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800170e:	f017 0708 	ands.w	r7, r7, #8
 8001712:	d1f7      	bne.n	8001704 <_strtol_l.constprop.0+0x20>
 8001714:	2c2d      	cmp	r4, #45	; 0x2d
 8001716:	d132      	bne.n	800177e <_strtol_l.constprop.0+0x9a>
 8001718:	782c      	ldrb	r4, [r5, #0]
 800171a:	2701      	movs	r7, #1
 800171c:	1cb5      	adds	r5, r6, #2
 800171e:	2b00      	cmp	r3, #0
 8001720:	d05b      	beq.n	80017da <_strtol_l.constprop.0+0xf6>
 8001722:	2b10      	cmp	r3, #16
 8001724:	d109      	bne.n	800173a <_strtol_l.constprop.0+0x56>
 8001726:	2c30      	cmp	r4, #48	; 0x30
 8001728:	d107      	bne.n	800173a <_strtol_l.constprop.0+0x56>
 800172a:	782c      	ldrb	r4, [r5, #0]
 800172c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8001730:	2c58      	cmp	r4, #88	; 0x58
 8001732:	d14d      	bne.n	80017d0 <_strtol_l.constprop.0+0xec>
 8001734:	786c      	ldrb	r4, [r5, #1]
 8001736:	2310      	movs	r3, #16
 8001738:	3502      	adds	r5, #2
 800173a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800173e:	f108 38ff 	add.w	r8, r8, #4294967295
 8001742:	f04f 0e00 	mov.w	lr, #0
 8001746:	fbb8 f9f3 	udiv	r9, r8, r3
 800174a:	4676      	mov	r6, lr
 800174c:	fb03 8a19 	mls	sl, r3, r9, r8
 8001750:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8001754:	f1bc 0f09 	cmp.w	ip, #9
 8001758:	d816      	bhi.n	8001788 <_strtol_l.constprop.0+0xa4>
 800175a:	4664      	mov	r4, ip
 800175c:	42a3      	cmp	r3, r4
 800175e:	dd24      	ble.n	80017aa <_strtol_l.constprop.0+0xc6>
 8001760:	f1be 3fff 	cmp.w	lr, #4294967295
 8001764:	d008      	beq.n	8001778 <_strtol_l.constprop.0+0x94>
 8001766:	45b1      	cmp	r9, r6
 8001768:	d31c      	bcc.n	80017a4 <_strtol_l.constprop.0+0xc0>
 800176a:	d101      	bne.n	8001770 <_strtol_l.constprop.0+0x8c>
 800176c:	45a2      	cmp	sl, r4
 800176e:	db19      	blt.n	80017a4 <_strtol_l.constprop.0+0xc0>
 8001770:	fb06 4603 	mla	r6, r6, r3, r4
 8001774:	f04f 0e01 	mov.w	lr, #1
 8001778:	f815 4b01 	ldrb.w	r4, [r5], #1
 800177c:	e7e8      	b.n	8001750 <_strtol_l.constprop.0+0x6c>
 800177e:	2c2b      	cmp	r4, #43	; 0x2b
 8001780:	bf04      	itt	eq
 8001782:	782c      	ldrbeq	r4, [r5, #0]
 8001784:	1cb5      	addeq	r5, r6, #2
 8001786:	e7ca      	b.n	800171e <_strtol_l.constprop.0+0x3a>
 8001788:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800178c:	f1bc 0f19 	cmp.w	ip, #25
 8001790:	d801      	bhi.n	8001796 <_strtol_l.constprop.0+0xb2>
 8001792:	3c37      	subs	r4, #55	; 0x37
 8001794:	e7e2      	b.n	800175c <_strtol_l.constprop.0+0x78>
 8001796:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800179a:	f1bc 0f19 	cmp.w	ip, #25
 800179e:	d804      	bhi.n	80017aa <_strtol_l.constprop.0+0xc6>
 80017a0:	3c57      	subs	r4, #87	; 0x57
 80017a2:	e7db      	b.n	800175c <_strtol_l.constprop.0+0x78>
 80017a4:	f04f 3eff 	mov.w	lr, #4294967295
 80017a8:	e7e6      	b.n	8001778 <_strtol_l.constprop.0+0x94>
 80017aa:	f1be 3fff 	cmp.w	lr, #4294967295
 80017ae:	d105      	bne.n	80017bc <_strtol_l.constprop.0+0xd8>
 80017b0:	2322      	movs	r3, #34	; 0x22
 80017b2:	6003      	str	r3, [r0, #0]
 80017b4:	4646      	mov	r6, r8
 80017b6:	b942      	cbnz	r2, 80017ca <_strtol_l.constprop.0+0xe6>
 80017b8:	4630      	mov	r0, r6
 80017ba:	e79e      	b.n	80016fa <_strtol_l.constprop.0+0x16>
 80017bc:	b107      	cbz	r7, 80017c0 <_strtol_l.constprop.0+0xdc>
 80017be:	4276      	negs	r6, r6
 80017c0:	2a00      	cmp	r2, #0
 80017c2:	d0f9      	beq.n	80017b8 <_strtol_l.constprop.0+0xd4>
 80017c4:	f1be 0f00 	cmp.w	lr, #0
 80017c8:	d000      	beq.n	80017cc <_strtol_l.constprop.0+0xe8>
 80017ca:	1e69      	subs	r1, r5, #1
 80017cc:	6011      	str	r1, [r2, #0]
 80017ce:	e7f3      	b.n	80017b8 <_strtol_l.constprop.0+0xd4>
 80017d0:	2430      	movs	r4, #48	; 0x30
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d1b1      	bne.n	800173a <_strtol_l.constprop.0+0x56>
 80017d6:	2308      	movs	r3, #8
 80017d8:	e7af      	b.n	800173a <_strtol_l.constprop.0+0x56>
 80017da:	2c30      	cmp	r4, #48	; 0x30
 80017dc:	d0a5      	beq.n	800172a <_strtol_l.constprop.0+0x46>
 80017de:	230a      	movs	r3, #10
 80017e0:	e7ab      	b.n	800173a <_strtol_l.constprop.0+0x56>
 80017e2:	bf00      	nop
 80017e4:	08002c41 	.word	0x08002c41

080017e8 <strtol>:
 80017e8:	4613      	mov	r3, r2
 80017ea:	460a      	mov	r2, r1
 80017ec:	4601      	mov	r1, r0
 80017ee:	4802      	ldr	r0, [pc, #8]	; (80017f8 <strtol+0x10>)
 80017f0:	6800      	ldr	r0, [r0, #0]
 80017f2:	f7ff bf77 	b.w	80016e4 <_strtol_l.constprop.0>
 80017f6:	bf00      	nop
 80017f8:	20000084 	.word	0x20000084

080017fc <std>:
 80017fc:	2300      	movs	r3, #0
 80017fe:	b510      	push	{r4, lr}
 8001800:	4604      	mov	r4, r0
 8001802:	e9c0 3300 	strd	r3, r3, [r0]
 8001806:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800180a:	6083      	str	r3, [r0, #8]
 800180c:	8181      	strh	r1, [r0, #12]
 800180e:	6643      	str	r3, [r0, #100]	; 0x64
 8001810:	81c2      	strh	r2, [r0, #14]
 8001812:	6183      	str	r3, [r0, #24]
 8001814:	4619      	mov	r1, r3
 8001816:	2208      	movs	r2, #8
 8001818:	305c      	adds	r0, #92	; 0x5c
 800181a:	f000 f9c4 	bl	8001ba6 <memset>
 800181e:	4b0d      	ldr	r3, [pc, #52]	; (8001854 <std+0x58>)
 8001820:	6263      	str	r3, [r4, #36]	; 0x24
 8001822:	4b0d      	ldr	r3, [pc, #52]	; (8001858 <std+0x5c>)
 8001824:	62a3      	str	r3, [r4, #40]	; 0x28
 8001826:	4b0d      	ldr	r3, [pc, #52]	; (800185c <std+0x60>)
 8001828:	62e3      	str	r3, [r4, #44]	; 0x2c
 800182a:	4b0d      	ldr	r3, [pc, #52]	; (8001860 <std+0x64>)
 800182c:	6323      	str	r3, [r4, #48]	; 0x30
 800182e:	4b0d      	ldr	r3, [pc, #52]	; (8001864 <std+0x68>)
 8001830:	6224      	str	r4, [r4, #32]
 8001832:	429c      	cmp	r4, r3
 8001834:	d006      	beq.n	8001844 <std+0x48>
 8001836:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800183a:	4294      	cmp	r4, r2
 800183c:	d002      	beq.n	8001844 <std+0x48>
 800183e:	33d0      	adds	r3, #208	; 0xd0
 8001840:	429c      	cmp	r4, r3
 8001842:	d105      	bne.n	8001850 <std+0x54>
 8001844:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001848:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800184c:	f000 ba9a 	b.w	8001d84 <__retarget_lock_init_recursive>
 8001850:	bd10      	pop	{r4, pc}
 8001852:	bf00      	nop
 8001854:	08001b21 	.word	0x08001b21
 8001858:	08001b43 	.word	0x08001b43
 800185c:	08001b7b 	.word	0x08001b7b
 8001860:	08001b9f 	.word	0x08001b9f
 8001864:	200001b4 	.word	0x200001b4

08001868 <stdio_exit_handler>:
 8001868:	4a02      	ldr	r2, [pc, #8]	; (8001874 <stdio_exit_handler+0xc>)
 800186a:	4903      	ldr	r1, [pc, #12]	; (8001878 <stdio_exit_handler+0x10>)
 800186c:	4803      	ldr	r0, [pc, #12]	; (800187c <stdio_exit_handler+0x14>)
 800186e:	f000 b869 	b.w	8001944 <_fwalk_sglue>
 8001872:	bf00      	nop
 8001874:	2000002c 	.word	0x2000002c
 8001878:	0800267d 	.word	0x0800267d
 800187c:	20000038 	.word	0x20000038

08001880 <cleanup_stdio>:
 8001880:	6841      	ldr	r1, [r0, #4]
 8001882:	4b0c      	ldr	r3, [pc, #48]	; (80018b4 <cleanup_stdio+0x34>)
 8001884:	4299      	cmp	r1, r3
 8001886:	b510      	push	{r4, lr}
 8001888:	4604      	mov	r4, r0
 800188a:	d001      	beq.n	8001890 <cleanup_stdio+0x10>
 800188c:	f000 fef6 	bl	800267c <_fflush_r>
 8001890:	68a1      	ldr	r1, [r4, #8]
 8001892:	4b09      	ldr	r3, [pc, #36]	; (80018b8 <cleanup_stdio+0x38>)
 8001894:	4299      	cmp	r1, r3
 8001896:	d002      	beq.n	800189e <cleanup_stdio+0x1e>
 8001898:	4620      	mov	r0, r4
 800189a:	f000 feef 	bl	800267c <_fflush_r>
 800189e:	68e1      	ldr	r1, [r4, #12]
 80018a0:	4b06      	ldr	r3, [pc, #24]	; (80018bc <cleanup_stdio+0x3c>)
 80018a2:	4299      	cmp	r1, r3
 80018a4:	d004      	beq.n	80018b0 <cleanup_stdio+0x30>
 80018a6:	4620      	mov	r0, r4
 80018a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80018ac:	f000 bee6 	b.w	800267c <_fflush_r>
 80018b0:	bd10      	pop	{r4, pc}
 80018b2:	bf00      	nop
 80018b4:	200001b4 	.word	0x200001b4
 80018b8:	2000021c 	.word	0x2000021c
 80018bc:	20000284 	.word	0x20000284

080018c0 <global_stdio_init.part.0>:
 80018c0:	b510      	push	{r4, lr}
 80018c2:	4b0b      	ldr	r3, [pc, #44]	; (80018f0 <global_stdio_init.part.0+0x30>)
 80018c4:	4c0b      	ldr	r4, [pc, #44]	; (80018f4 <global_stdio_init.part.0+0x34>)
 80018c6:	4a0c      	ldr	r2, [pc, #48]	; (80018f8 <global_stdio_init.part.0+0x38>)
 80018c8:	601a      	str	r2, [r3, #0]
 80018ca:	4620      	mov	r0, r4
 80018cc:	2200      	movs	r2, #0
 80018ce:	2104      	movs	r1, #4
 80018d0:	f7ff ff94 	bl	80017fc <std>
 80018d4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80018d8:	2201      	movs	r2, #1
 80018da:	2109      	movs	r1, #9
 80018dc:	f7ff ff8e 	bl	80017fc <std>
 80018e0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80018e4:	2202      	movs	r2, #2
 80018e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80018ea:	2112      	movs	r1, #18
 80018ec:	f7ff bf86 	b.w	80017fc <std>
 80018f0:	200002ec 	.word	0x200002ec
 80018f4:	200001b4 	.word	0x200001b4
 80018f8:	08001869 	.word	0x08001869

080018fc <__sfp_lock_acquire>:
 80018fc:	4801      	ldr	r0, [pc, #4]	; (8001904 <__sfp_lock_acquire+0x8>)
 80018fe:	f000 ba42 	b.w	8001d86 <__retarget_lock_acquire_recursive>
 8001902:	bf00      	nop
 8001904:	200002f5 	.word	0x200002f5

08001908 <__sfp_lock_release>:
 8001908:	4801      	ldr	r0, [pc, #4]	; (8001910 <__sfp_lock_release+0x8>)
 800190a:	f000 ba3d 	b.w	8001d88 <__retarget_lock_release_recursive>
 800190e:	bf00      	nop
 8001910:	200002f5 	.word	0x200002f5

08001914 <__sinit>:
 8001914:	b510      	push	{r4, lr}
 8001916:	4604      	mov	r4, r0
 8001918:	f7ff fff0 	bl	80018fc <__sfp_lock_acquire>
 800191c:	6a23      	ldr	r3, [r4, #32]
 800191e:	b11b      	cbz	r3, 8001928 <__sinit+0x14>
 8001920:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001924:	f7ff bff0 	b.w	8001908 <__sfp_lock_release>
 8001928:	4b04      	ldr	r3, [pc, #16]	; (800193c <__sinit+0x28>)
 800192a:	6223      	str	r3, [r4, #32]
 800192c:	4b04      	ldr	r3, [pc, #16]	; (8001940 <__sinit+0x2c>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d1f5      	bne.n	8001920 <__sinit+0xc>
 8001934:	f7ff ffc4 	bl	80018c0 <global_stdio_init.part.0>
 8001938:	e7f2      	b.n	8001920 <__sinit+0xc>
 800193a:	bf00      	nop
 800193c:	08001881 	.word	0x08001881
 8001940:	200002ec 	.word	0x200002ec

08001944 <_fwalk_sglue>:
 8001944:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001948:	4607      	mov	r7, r0
 800194a:	4688      	mov	r8, r1
 800194c:	4614      	mov	r4, r2
 800194e:	2600      	movs	r6, #0
 8001950:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001954:	f1b9 0901 	subs.w	r9, r9, #1
 8001958:	d505      	bpl.n	8001966 <_fwalk_sglue+0x22>
 800195a:	6824      	ldr	r4, [r4, #0]
 800195c:	2c00      	cmp	r4, #0
 800195e:	d1f7      	bne.n	8001950 <_fwalk_sglue+0xc>
 8001960:	4630      	mov	r0, r6
 8001962:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001966:	89ab      	ldrh	r3, [r5, #12]
 8001968:	2b01      	cmp	r3, #1
 800196a:	d907      	bls.n	800197c <_fwalk_sglue+0x38>
 800196c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001970:	3301      	adds	r3, #1
 8001972:	d003      	beq.n	800197c <_fwalk_sglue+0x38>
 8001974:	4629      	mov	r1, r5
 8001976:	4638      	mov	r0, r7
 8001978:	47c0      	blx	r8
 800197a:	4306      	orrs	r6, r0
 800197c:	3568      	adds	r5, #104	; 0x68
 800197e:	e7e9      	b.n	8001954 <_fwalk_sglue+0x10>

08001980 <iprintf>:
 8001980:	b40f      	push	{r0, r1, r2, r3}
 8001982:	b507      	push	{r0, r1, r2, lr}
 8001984:	4906      	ldr	r1, [pc, #24]	; (80019a0 <iprintf+0x20>)
 8001986:	ab04      	add	r3, sp, #16
 8001988:	6808      	ldr	r0, [r1, #0]
 800198a:	f853 2b04 	ldr.w	r2, [r3], #4
 800198e:	6881      	ldr	r1, [r0, #8]
 8001990:	9301      	str	r3, [sp, #4]
 8001992:	f000 fb43 	bl	800201c <_vfiprintf_r>
 8001996:	b003      	add	sp, #12
 8001998:	f85d eb04 	ldr.w	lr, [sp], #4
 800199c:	b004      	add	sp, #16
 800199e:	4770      	bx	lr
 80019a0:	20000084 	.word	0x20000084

080019a4 <putchar>:
 80019a4:	4b02      	ldr	r3, [pc, #8]	; (80019b0 <putchar+0xc>)
 80019a6:	4601      	mov	r1, r0
 80019a8:	6818      	ldr	r0, [r3, #0]
 80019aa:	6882      	ldr	r2, [r0, #8]
 80019ac:	f000 bf02 	b.w	80027b4 <_putc_r>
 80019b0:	20000084 	.word	0x20000084

080019b4 <setbuf>:
 80019b4:	fab1 f281 	clz	r2, r1
 80019b8:	0952      	lsrs	r2, r2, #5
 80019ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019be:	0052      	lsls	r2, r2, #1
 80019c0:	f000 b800 	b.w	80019c4 <setvbuf>

080019c4 <setvbuf>:
 80019c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80019c8:	461d      	mov	r5, r3
 80019ca:	4b54      	ldr	r3, [pc, #336]	; (8001b1c <setvbuf+0x158>)
 80019cc:	681f      	ldr	r7, [r3, #0]
 80019ce:	4604      	mov	r4, r0
 80019d0:	460e      	mov	r6, r1
 80019d2:	4690      	mov	r8, r2
 80019d4:	b127      	cbz	r7, 80019e0 <setvbuf+0x1c>
 80019d6:	6a3b      	ldr	r3, [r7, #32]
 80019d8:	b913      	cbnz	r3, 80019e0 <setvbuf+0x1c>
 80019da:	4638      	mov	r0, r7
 80019dc:	f7ff ff9a 	bl	8001914 <__sinit>
 80019e0:	f1b8 0f02 	cmp.w	r8, #2
 80019e4:	d006      	beq.n	80019f4 <setvbuf+0x30>
 80019e6:	f1b8 0f01 	cmp.w	r8, #1
 80019ea:	f200 8094 	bhi.w	8001b16 <setvbuf+0x152>
 80019ee:	2d00      	cmp	r5, #0
 80019f0:	f2c0 8091 	blt.w	8001b16 <setvbuf+0x152>
 80019f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80019f6:	07da      	lsls	r2, r3, #31
 80019f8:	d405      	bmi.n	8001a06 <setvbuf+0x42>
 80019fa:	89a3      	ldrh	r3, [r4, #12]
 80019fc:	059b      	lsls	r3, r3, #22
 80019fe:	d402      	bmi.n	8001a06 <setvbuf+0x42>
 8001a00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001a02:	f000 f9c0 	bl	8001d86 <__retarget_lock_acquire_recursive>
 8001a06:	4621      	mov	r1, r4
 8001a08:	4638      	mov	r0, r7
 8001a0a:	f000 fe37 	bl	800267c <_fflush_r>
 8001a0e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001a10:	b141      	cbz	r1, 8001a24 <setvbuf+0x60>
 8001a12:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001a16:	4299      	cmp	r1, r3
 8001a18:	d002      	beq.n	8001a20 <setvbuf+0x5c>
 8001a1a:	4638      	mov	r0, r7
 8001a1c:	f000 f9d4 	bl	8001dc8 <_free_r>
 8001a20:	2300      	movs	r3, #0
 8001a22:	6363      	str	r3, [r4, #52]	; 0x34
 8001a24:	2300      	movs	r3, #0
 8001a26:	61a3      	str	r3, [r4, #24]
 8001a28:	6063      	str	r3, [r4, #4]
 8001a2a:	89a3      	ldrh	r3, [r4, #12]
 8001a2c:	0618      	lsls	r0, r3, #24
 8001a2e:	d503      	bpl.n	8001a38 <setvbuf+0x74>
 8001a30:	6921      	ldr	r1, [r4, #16]
 8001a32:	4638      	mov	r0, r7
 8001a34:	f000 f9c8 	bl	8001dc8 <_free_r>
 8001a38:	89a3      	ldrh	r3, [r4, #12]
 8001a3a:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8001a3e:	f023 0303 	bic.w	r3, r3, #3
 8001a42:	f1b8 0f02 	cmp.w	r8, #2
 8001a46:	81a3      	strh	r3, [r4, #12]
 8001a48:	d05f      	beq.n	8001b0a <setvbuf+0x146>
 8001a4a:	ab01      	add	r3, sp, #4
 8001a4c:	466a      	mov	r2, sp
 8001a4e:	4621      	mov	r1, r4
 8001a50:	4638      	mov	r0, r7
 8001a52:	f000 fe4d 	bl	80026f0 <__swhatbuf_r>
 8001a56:	89a3      	ldrh	r3, [r4, #12]
 8001a58:	4318      	orrs	r0, r3
 8001a5a:	81a0      	strh	r0, [r4, #12]
 8001a5c:	bb2d      	cbnz	r5, 8001aaa <setvbuf+0xe6>
 8001a5e:	9d00      	ldr	r5, [sp, #0]
 8001a60:	4628      	mov	r0, r5
 8001a62:	f000 f9fd 	bl	8001e60 <malloc>
 8001a66:	4606      	mov	r6, r0
 8001a68:	2800      	cmp	r0, #0
 8001a6a:	d150      	bne.n	8001b0e <setvbuf+0x14a>
 8001a6c:	f8dd 9000 	ldr.w	r9, [sp]
 8001a70:	45a9      	cmp	r9, r5
 8001a72:	d13e      	bne.n	8001af2 <setvbuf+0x12e>
 8001a74:	f04f 35ff 	mov.w	r5, #4294967295
 8001a78:	2200      	movs	r2, #0
 8001a7a:	60a2      	str	r2, [r4, #8]
 8001a7c:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8001a80:	6022      	str	r2, [r4, #0]
 8001a82:	6122      	str	r2, [r4, #16]
 8001a84:	2201      	movs	r2, #1
 8001a86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001a8a:	6162      	str	r2, [r4, #20]
 8001a8c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001a8e:	f043 0302 	orr.w	r3, r3, #2
 8001a92:	07d1      	lsls	r1, r2, #31
 8001a94:	81a3      	strh	r3, [r4, #12]
 8001a96:	d404      	bmi.n	8001aa2 <setvbuf+0xde>
 8001a98:	059b      	lsls	r3, r3, #22
 8001a9a:	d402      	bmi.n	8001aa2 <setvbuf+0xde>
 8001a9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001a9e:	f000 f973 	bl	8001d88 <__retarget_lock_release_recursive>
 8001aa2:	4628      	mov	r0, r5
 8001aa4:	b003      	add	sp, #12
 8001aa6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001aaa:	2e00      	cmp	r6, #0
 8001aac:	d0d8      	beq.n	8001a60 <setvbuf+0x9c>
 8001aae:	6a3b      	ldr	r3, [r7, #32]
 8001ab0:	b913      	cbnz	r3, 8001ab8 <setvbuf+0xf4>
 8001ab2:	4638      	mov	r0, r7
 8001ab4:	f7ff ff2e 	bl	8001914 <__sinit>
 8001ab8:	f1b8 0f01 	cmp.w	r8, #1
 8001abc:	bf08      	it	eq
 8001abe:	89a3      	ldrheq	r3, [r4, #12]
 8001ac0:	6026      	str	r6, [r4, #0]
 8001ac2:	bf04      	itt	eq
 8001ac4:	f043 0301 	orreq.w	r3, r3, #1
 8001ac8:	81a3      	strheq	r3, [r4, #12]
 8001aca:	89a3      	ldrh	r3, [r4, #12]
 8001acc:	f013 0208 	ands.w	r2, r3, #8
 8001ad0:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8001ad4:	d01d      	beq.n	8001b12 <setvbuf+0x14e>
 8001ad6:	07da      	lsls	r2, r3, #31
 8001ad8:	bf41      	itttt	mi
 8001ada:	2200      	movmi	r2, #0
 8001adc:	426d      	negmi	r5, r5
 8001ade:	60a2      	strmi	r2, [r4, #8]
 8001ae0:	61a5      	strmi	r5, [r4, #24]
 8001ae2:	bf58      	it	pl
 8001ae4:	60a5      	strpl	r5, [r4, #8]
 8001ae6:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8001ae8:	f015 0501 	ands.w	r5, r5, #1
 8001aec:	d0d4      	beq.n	8001a98 <setvbuf+0xd4>
 8001aee:	2500      	movs	r5, #0
 8001af0:	e7d7      	b.n	8001aa2 <setvbuf+0xde>
 8001af2:	4648      	mov	r0, r9
 8001af4:	f000 f9b4 	bl	8001e60 <malloc>
 8001af8:	4606      	mov	r6, r0
 8001afa:	2800      	cmp	r0, #0
 8001afc:	d0ba      	beq.n	8001a74 <setvbuf+0xb0>
 8001afe:	89a3      	ldrh	r3, [r4, #12]
 8001b00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b04:	81a3      	strh	r3, [r4, #12]
 8001b06:	464d      	mov	r5, r9
 8001b08:	e7d1      	b.n	8001aae <setvbuf+0xea>
 8001b0a:	2500      	movs	r5, #0
 8001b0c:	e7b4      	b.n	8001a78 <setvbuf+0xb4>
 8001b0e:	46a9      	mov	r9, r5
 8001b10:	e7f5      	b.n	8001afe <setvbuf+0x13a>
 8001b12:	60a2      	str	r2, [r4, #8]
 8001b14:	e7e7      	b.n	8001ae6 <setvbuf+0x122>
 8001b16:	f04f 35ff 	mov.w	r5, #4294967295
 8001b1a:	e7c2      	b.n	8001aa2 <setvbuf+0xde>
 8001b1c:	20000084 	.word	0x20000084

08001b20 <__sread>:
 8001b20:	b510      	push	{r4, lr}
 8001b22:	460c      	mov	r4, r1
 8001b24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001b28:	f000 f8f0 	bl	8001d0c <_read_r>
 8001b2c:	2800      	cmp	r0, #0
 8001b2e:	bfab      	itete	ge
 8001b30:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001b32:	89a3      	ldrhlt	r3, [r4, #12]
 8001b34:	181b      	addge	r3, r3, r0
 8001b36:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001b3a:	bfac      	ite	ge
 8001b3c:	6563      	strge	r3, [r4, #84]	; 0x54
 8001b3e:	81a3      	strhlt	r3, [r4, #12]
 8001b40:	bd10      	pop	{r4, pc}

08001b42 <__swrite>:
 8001b42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001b46:	461f      	mov	r7, r3
 8001b48:	898b      	ldrh	r3, [r1, #12]
 8001b4a:	05db      	lsls	r3, r3, #23
 8001b4c:	4605      	mov	r5, r0
 8001b4e:	460c      	mov	r4, r1
 8001b50:	4616      	mov	r6, r2
 8001b52:	d505      	bpl.n	8001b60 <__swrite+0x1e>
 8001b54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001b58:	2302      	movs	r3, #2
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	f000 f8c4 	bl	8001ce8 <_lseek_r>
 8001b60:	89a3      	ldrh	r3, [r4, #12]
 8001b62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001b66:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001b6a:	81a3      	strh	r3, [r4, #12]
 8001b6c:	4632      	mov	r2, r6
 8001b6e:	463b      	mov	r3, r7
 8001b70:	4628      	mov	r0, r5
 8001b72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001b76:	f7fe beb3 	b.w	80008e0 <_write_r>

08001b7a <__sseek>:
 8001b7a:	b510      	push	{r4, lr}
 8001b7c:	460c      	mov	r4, r1
 8001b7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001b82:	f000 f8b1 	bl	8001ce8 <_lseek_r>
 8001b86:	1c43      	adds	r3, r0, #1
 8001b88:	89a3      	ldrh	r3, [r4, #12]
 8001b8a:	bf15      	itete	ne
 8001b8c:	6560      	strne	r0, [r4, #84]	; 0x54
 8001b8e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001b92:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001b96:	81a3      	strheq	r3, [r4, #12]
 8001b98:	bf18      	it	ne
 8001b9a:	81a3      	strhne	r3, [r4, #12]
 8001b9c:	bd10      	pop	{r4, pc}

08001b9e <__sclose>:
 8001b9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001ba2:	f000 b891 	b.w	8001cc8 <_close_r>

08001ba6 <memset>:
 8001ba6:	4402      	add	r2, r0
 8001ba8:	4603      	mov	r3, r0
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d100      	bne.n	8001bb0 <memset+0xa>
 8001bae:	4770      	bx	lr
 8001bb0:	f803 1b01 	strb.w	r1, [r3], #1
 8001bb4:	e7f9      	b.n	8001baa <memset+0x4>

08001bb6 <rindex>:
 8001bb6:	f000 b813 	b.w	8001be0 <strrchr>

08001bba <strncpy>:
 8001bba:	b510      	push	{r4, lr}
 8001bbc:	3901      	subs	r1, #1
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	b132      	cbz	r2, 8001bd0 <strncpy+0x16>
 8001bc2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8001bc6:	f803 4b01 	strb.w	r4, [r3], #1
 8001bca:	3a01      	subs	r2, #1
 8001bcc:	2c00      	cmp	r4, #0
 8001bce:	d1f7      	bne.n	8001bc0 <strncpy+0x6>
 8001bd0:	441a      	add	r2, r3
 8001bd2:	2100      	movs	r1, #0
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d100      	bne.n	8001bda <strncpy+0x20>
 8001bd8:	bd10      	pop	{r4, pc}
 8001bda:	f803 1b01 	strb.w	r1, [r3], #1
 8001bde:	e7f9      	b.n	8001bd4 <strncpy+0x1a>

08001be0 <strrchr>:
 8001be0:	b513      	push	{r0, r1, r4, lr}
 8001be2:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
 8001be6:	4603      	mov	r3, r0
 8001be8:	d110      	bne.n	8001c0c <strrchr+0x2c>
 8001bea:	b002      	add	sp, #8
 8001bec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001bf0:	f000 beaa 	b.w	8002948 <strchr>
 8001bf4:	1c43      	adds	r3, r0, #1
 8001bf6:	4604      	mov	r4, r0
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	9101      	str	r1, [sp, #4]
 8001bfc:	f000 fea4 	bl	8002948 <strchr>
 8001c00:	9901      	ldr	r1, [sp, #4]
 8001c02:	2800      	cmp	r0, #0
 8001c04:	d1f6      	bne.n	8001bf4 <strrchr+0x14>
 8001c06:	4620      	mov	r0, r4
 8001c08:	b002      	add	sp, #8
 8001c0a:	bd10      	pop	{r4, pc}
 8001c0c:	2400      	movs	r4, #0
 8001c0e:	e7f3      	b.n	8001bf8 <strrchr+0x18>

08001c10 <strtok>:
 8001c10:	4b16      	ldr	r3, [pc, #88]	; (8001c6c <strtok+0x5c>)
 8001c12:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001c14:	681e      	ldr	r6, [r3, #0]
 8001c16:	6c74      	ldr	r4, [r6, #68]	; 0x44
 8001c18:	4605      	mov	r5, r0
 8001c1a:	b9fc      	cbnz	r4, 8001c5c <strtok+0x4c>
 8001c1c:	2050      	movs	r0, #80	; 0x50
 8001c1e:	9101      	str	r1, [sp, #4]
 8001c20:	f000 f91e 	bl	8001e60 <malloc>
 8001c24:	9901      	ldr	r1, [sp, #4]
 8001c26:	6470      	str	r0, [r6, #68]	; 0x44
 8001c28:	4602      	mov	r2, r0
 8001c2a:	b920      	cbnz	r0, 8001c36 <strtok+0x26>
 8001c2c:	4b10      	ldr	r3, [pc, #64]	; (8001c70 <strtok+0x60>)
 8001c2e:	4811      	ldr	r0, [pc, #68]	; (8001c74 <strtok+0x64>)
 8001c30:	215b      	movs	r1, #91	; 0x5b
 8001c32:	f000 f8ab 	bl	8001d8c <__assert_func>
 8001c36:	e9c0 4400 	strd	r4, r4, [r0]
 8001c3a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8001c3e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8001c42:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8001c46:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8001c4a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8001c4e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8001c52:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8001c56:	6184      	str	r4, [r0, #24]
 8001c58:	7704      	strb	r4, [r0, #28]
 8001c5a:	6244      	str	r4, [r0, #36]	; 0x24
 8001c5c:	6c72      	ldr	r2, [r6, #68]	; 0x44
 8001c5e:	2301      	movs	r3, #1
 8001c60:	4628      	mov	r0, r5
 8001c62:	b002      	add	sp, #8
 8001c64:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8001c68:	f000 b806 	b.w	8001c78 <__strtok_r>
 8001c6c:	20000084 	.word	0x20000084
 8001c70:	08002d41 	.word	0x08002d41
 8001c74:	08002d58 	.word	0x08002d58

08001c78 <__strtok_r>:
 8001c78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c7a:	b908      	cbnz	r0, 8001c80 <__strtok_r+0x8>
 8001c7c:	6810      	ldr	r0, [r2, #0]
 8001c7e:	b188      	cbz	r0, 8001ca4 <__strtok_r+0x2c>
 8001c80:	4604      	mov	r4, r0
 8001c82:	4620      	mov	r0, r4
 8001c84:	f814 5b01 	ldrb.w	r5, [r4], #1
 8001c88:	460f      	mov	r7, r1
 8001c8a:	f817 6b01 	ldrb.w	r6, [r7], #1
 8001c8e:	b91e      	cbnz	r6, 8001c98 <__strtok_r+0x20>
 8001c90:	b965      	cbnz	r5, 8001cac <__strtok_r+0x34>
 8001c92:	6015      	str	r5, [r2, #0]
 8001c94:	4628      	mov	r0, r5
 8001c96:	e005      	b.n	8001ca4 <__strtok_r+0x2c>
 8001c98:	42b5      	cmp	r5, r6
 8001c9a:	d1f6      	bne.n	8001c8a <__strtok_r+0x12>
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d1f0      	bne.n	8001c82 <__strtok_r+0xa>
 8001ca0:	6014      	str	r4, [r2, #0]
 8001ca2:	7003      	strb	r3, [r0, #0]
 8001ca4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ca6:	461c      	mov	r4, r3
 8001ca8:	e00c      	b.n	8001cc4 <__strtok_r+0x4c>
 8001caa:	b915      	cbnz	r5, 8001cb2 <__strtok_r+0x3a>
 8001cac:	f814 3b01 	ldrb.w	r3, [r4], #1
 8001cb0:	460e      	mov	r6, r1
 8001cb2:	f816 5b01 	ldrb.w	r5, [r6], #1
 8001cb6:	42ab      	cmp	r3, r5
 8001cb8:	d1f7      	bne.n	8001caa <__strtok_r+0x32>
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d0f3      	beq.n	8001ca6 <__strtok_r+0x2e>
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	f804 3c01 	strb.w	r3, [r4, #-1]
 8001cc4:	6014      	str	r4, [r2, #0]
 8001cc6:	e7ed      	b.n	8001ca4 <__strtok_r+0x2c>

08001cc8 <_close_r>:
 8001cc8:	b538      	push	{r3, r4, r5, lr}
 8001cca:	4d06      	ldr	r5, [pc, #24]	; (8001ce4 <_close_r+0x1c>)
 8001ccc:	2300      	movs	r3, #0
 8001cce:	4604      	mov	r4, r0
 8001cd0:	4608      	mov	r0, r1
 8001cd2:	602b      	str	r3, [r5, #0]
 8001cd4:	f7ff fbe4 	bl	80014a0 <_close>
 8001cd8:	1c43      	adds	r3, r0, #1
 8001cda:	d102      	bne.n	8001ce2 <_close_r+0x1a>
 8001cdc:	682b      	ldr	r3, [r5, #0]
 8001cde:	b103      	cbz	r3, 8001ce2 <_close_r+0x1a>
 8001ce0:	6023      	str	r3, [r4, #0]
 8001ce2:	bd38      	pop	{r3, r4, r5, pc}
 8001ce4:	200002f0 	.word	0x200002f0

08001ce8 <_lseek_r>:
 8001ce8:	b538      	push	{r3, r4, r5, lr}
 8001cea:	4d07      	ldr	r5, [pc, #28]	; (8001d08 <_lseek_r+0x20>)
 8001cec:	4604      	mov	r4, r0
 8001cee:	4608      	mov	r0, r1
 8001cf0:	4611      	mov	r1, r2
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	602a      	str	r2, [r5, #0]
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	f7ff fbf9 	bl	80014ee <_lseek>
 8001cfc:	1c43      	adds	r3, r0, #1
 8001cfe:	d102      	bne.n	8001d06 <_lseek_r+0x1e>
 8001d00:	682b      	ldr	r3, [r5, #0]
 8001d02:	b103      	cbz	r3, 8001d06 <_lseek_r+0x1e>
 8001d04:	6023      	str	r3, [r4, #0]
 8001d06:	bd38      	pop	{r3, r4, r5, pc}
 8001d08:	200002f0 	.word	0x200002f0

08001d0c <_read_r>:
 8001d0c:	b538      	push	{r3, r4, r5, lr}
 8001d0e:	4d07      	ldr	r5, [pc, #28]	; (8001d2c <_read_r+0x20>)
 8001d10:	4604      	mov	r4, r0
 8001d12:	4608      	mov	r0, r1
 8001d14:	4611      	mov	r1, r2
 8001d16:	2200      	movs	r2, #0
 8001d18:	602a      	str	r2, [r5, #0]
 8001d1a:	461a      	mov	r2, r3
 8001d1c:	f7ff fba3 	bl	8001466 <_read>
 8001d20:	1c43      	adds	r3, r0, #1
 8001d22:	d102      	bne.n	8001d2a <_read_r+0x1e>
 8001d24:	682b      	ldr	r3, [r5, #0]
 8001d26:	b103      	cbz	r3, 8001d2a <_read_r+0x1e>
 8001d28:	6023      	str	r3, [r4, #0]
 8001d2a:	bd38      	pop	{r3, r4, r5, pc}
 8001d2c:	200002f0 	.word	0x200002f0

08001d30 <__errno>:
 8001d30:	4b01      	ldr	r3, [pc, #4]	; (8001d38 <__errno+0x8>)
 8001d32:	6818      	ldr	r0, [r3, #0]
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop
 8001d38:	20000084 	.word	0x20000084

08001d3c <__libc_init_array>:
 8001d3c:	b570      	push	{r4, r5, r6, lr}
 8001d3e:	4d0d      	ldr	r5, [pc, #52]	; (8001d74 <__libc_init_array+0x38>)
 8001d40:	4c0d      	ldr	r4, [pc, #52]	; (8001d78 <__libc_init_array+0x3c>)
 8001d42:	1b64      	subs	r4, r4, r5
 8001d44:	10a4      	asrs	r4, r4, #2
 8001d46:	2600      	movs	r6, #0
 8001d48:	42a6      	cmp	r6, r4
 8001d4a:	d109      	bne.n	8001d60 <__libc_init_array+0x24>
 8001d4c:	4d0b      	ldr	r5, [pc, #44]	; (8001d7c <__libc_init_array+0x40>)
 8001d4e:	4c0c      	ldr	r4, [pc, #48]	; (8001d80 <__libc_init_array+0x44>)
 8001d50:	f000 fe86 	bl	8002a60 <_init>
 8001d54:	1b64      	subs	r4, r4, r5
 8001d56:	10a4      	asrs	r4, r4, #2
 8001d58:	2600      	movs	r6, #0
 8001d5a:	42a6      	cmp	r6, r4
 8001d5c:	d105      	bne.n	8001d6a <__libc_init_array+0x2e>
 8001d5e:	bd70      	pop	{r4, r5, r6, pc}
 8001d60:	f855 3b04 	ldr.w	r3, [r5], #4
 8001d64:	4798      	blx	r3
 8001d66:	3601      	adds	r6, #1
 8001d68:	e7ee      	b.n	8001d48 <__libc_init_array+0xc>
 8001d6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8001d6e:	4798      	blx	r3
 8001d70:	3601      	adds	r6, #1
 8001d72:	e7f2      	b.n	8001d5a <__libc_init_array+0x1e>
 8001d74:	08002e24 	.word	0x08002e24
 8001d78:	08002e24 	.word	0x08002e24
 8001d7c:	08002e24 	.word	0x08002e24
 8001d80:	08002e28 	.word	0x08002e28

08001d84 <__retarget_lock_init_recursive>:
 8001d84:	4770      	bx	lr

08001d86 <__retarget_lock_acquire_recursive>:
 8001d86:	4770      	bx	lr

08001d88 <__retarget_lock_release_recursive>:
 8001d88:	4770      	bx	lr
	...

08001d8c <__assert_func>:
 8001d8c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8001d8e:	4614      	mov	r4, r2
 8001d90:	461a      	mov	r2, r3
 8001d92:	4b09      	ldr	r3, [pc, #36]	; (8001db8 <__assert_func+0x2c>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4605      	mov	r5, r0
 8001d98:	68d8      	ldr	r0, [r3, #12]
 8001d9a:	b14c      	cbz	r4, 8001db0 <__assert_func+0x24>
 8001d9c:	4b07      	ldr	r3, [pc, #28]	; (8001dbc <__assert_func+0x30>)
 8001d9e:	9100      	str	r1, [sp, #0]
 8001da0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8001da4:	4906      	ldr	r1, [pc, #24]	; (8001dc0 <__assert_func+0x34>)
 8001da6:	462b      	mov	r3, r5
 8001da8:	f000 fc90 	bl	80026cc <fiprintf>
 8001dac:	f000 fe0c 	bl	80029c8 <abort>
 8001db0:	4b04      	ldr	r3, [pc, #16]	; (8001dc4 <__assert_func+0x38>)
 8001db2:	461c      	mov	r4, r3
 8001db4:	e7f3      	b.n	8001d9e <__assert_func+0x12>
 8001db6:	bf00      	nop
 8001db8:	20000084 	.word	0x20000084
 8001dbc:	08002db2 	.word	0x08002db2
 8001dc0:	08002dbf 	.word	0x08002dbf
 8001dc4:	08002ded 	.word	0x08002ded

08001dc8 <_free_r>:
 8001dc8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001dca:	2900      	cmp	r1, #0
 8001dcc:	d044      	beq.n	8001e58 <_free_r+0x90>
 8001dce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001dd2:	9001      	str	r0, [sp, #4]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	f1a1 0404 	sub.w	r4, r1, #4
 8001dda:	bfb8      	it	lt
 8001ddc:	18e4      	addlt	r4, r4, r3
 8001dde:	f000 f8e7 	bl	8001fb0 <__malloc_lock>
 8001de2:	4a1e      	ldr	r2, [pc, #120]	; (8001e5c <_free_r+0x94>)
 8001de4:	9801      	ldr	r0, [sp, #4]
 8001de6:	6813      	ldr	r3, [r2, #0]
 8001de8:	b933      	cbnz	r3, 8001df8 <_free_r+0x30>
 8001dea:	6063      	str	r3, [r4, #4]
 8001dec:	6014      	str	r4, [r2, #0]
 8001dee:	b003      	add	sp, #12
 8001df0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001df4:	f000 b8e2 	b.w	8001fbc <__malloc_unlock>
 8001df8:	42a3      	cmp	r3, r4
 8001dfa:	d908      	bls.n	8001e0e <_free_r+0x46>
 8001dfc:	6825      	ldr	r5, [r4, #0]
 8001dfe:	1961      	adds	r1, r4, r5
 8001e00:	428b      	cmp	r3, r1
 8001e02:	bf01      	itttt	eq
 8001e04:	6819      	ldreq	r1, [r3, #0]
 8001e06:	685b      	ldreq	r3, [r3, #4]
 8001e08:	1949      	addeq	r1, r1, r5
 8001e0a:	6021      	streq	r1, [r4, #0]
 8001e0c:	e7ed      	b.n	8001dea <_free_r+0x22>
 8001e0e:	461a      	mov	r2, r3
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	b10b      	cbz	r3, 8001e18 <_free_r+0x50>
 8001e14:	42a3      	cmp	r3, r4
 8001e16:	d9fa      	bls.n	8001e0e <_free_r+0x46>
 8001e18:	6811      	ldr	r1, [r2, #0]
 8001e1a:	1855      	adds	r5, r2, r1
 8001e1c:	42a5      	cmp	r5, r4
 8001e1e:	d10b      	bne.n	8001e38 <_free_r+0x70>
 8001e20:	6824      	ldr	r4, [r4, #0]
 8001e22:	4421      	add	r1, r4
 8001e24:	1854      	adds	r4, r2, r1
 8001e26:	42a3      	cmp	r3, r4
 8001e28:	6011      	str	r1, [r2, #0]
 8001e2a:	d1e0      	bne.n	8001dee <_free_r+0x26>
 8001e2c:	681c      	ldr	r4, [r3, #0]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	6053      	str	r3, [r2, #4]
 8001e32:	440c      	add	r4, r1
 8001e34:	6014      	str	r4, [r2, #0]
 8001e36:	e7da      	b.n	8001dee <_free_r+0x26>
 8001e38:	d902      	bls.n	8001e40 <_free_r+0x78>
 8001e3a:	230c      	movs	r3, #12
 8001e3c:	6003      	str	r3, [r0, #0]
 8001e3e:	e7d6      	b.n	8001dee <_free_r+0x26>
 8001e40:	6825      	ldr	r5, [r4, #0]
 8001e42:	1961      	adds	r1, r4, r5
 8001e44:	428b      	cmp	r3, r1
 8001e46:	bf04      	itt	eq
 8001e48:	6819      	ldreq	r1, [r3, #0]
 8001e4a:	685b      	ldreq	r3, [r3, #4]
 8001e4c:	6063      	str	r3, [r4, #4]
 8001e4e:	bf04      	itt	eq
 8001e50:	1949      	addeq	r1, r1, r5
 8001e52:	6021      	streq	r1, [r4, #0]
 8001e54:	6054      	str	r4, [r2, #4]
 8001e56:	e7ca      	b.n	8001dee <_free_r+0x26>
 8001e58:	b003      	add	sp, #12
 8001e5a:	bd30      	pop	{r4, r5, pc}
 8001e5c:	200002f8 	.word	0x200002f8

08001e60 <malloc>:
 8001e60:	4b02      	ldr	r3, [pc, #8]	; (8001e6c <malloc+0xc>)
 8001e62:	4601      	mov	r1, r0
 8001e64:	6818      	ldr	r0, [r3, #0]
 8001e66:	f000 b823 	b.w	8001eb0 <_malloc_r>
 8001e6a:	bf00      	nop
 8001e6c:	20000084 	.word	0x20000084

08001e70 <sbrk_aligned>:
 8001e70:	b570      	push	{r4, r5, r6, lr}
 8001e72:	4e0e      	ldr	r6, [pc, #56]	; (8001eac <sbrk_aligned+0x3c>)
 8001e74:	460c      	mov	r4, r1
 8001e76:	6831      	ldr	r1, [r6, #0]
 8001e78:	4605      	mov	r5, r0
 8001e7a:	b911      	cbnz	r1, 8001e82 <sbrk_aligned+0x12>
 8001e7c:	f000 fd94 	bl	80029a8 <_sbrk_r>
 8001e80:	6030      	str	r0, [r6, #0]
 8001e82:	4621      	mov	r1, r4
 8001e84:	4628      	mov	r0, r5
 8001e86:	f000 fd8f 	bl	80029a8 <_sbrk_r>
 8001e8a:	1c43      	adds	r3, r0, #1
 8001e8c:	d00a      	beq.n	8001ea4 <sbrk_aligned+0x34>
 8001e8e:	1cc4      	adds	r4, r0, #3
 8001e90:	f024 0403 	bic.w	r4, r4, #3
 8001e94:	42a0      	cmp	r0, r4
 8001e96:	d007      	beq.n	8001ea8 <sbrk_aligned+0x38>
 8001e98:	1a21      	subs	r1, r4, r0
 8001e9a:	4628      	mov	r0, r5
 8001e9c:	f000 fd84 	bl	80029a8 <_sbrk_r>
 8001ea0:	3001      	adds	r0, #1
 8001ea2:	d101      	bne.n	8001ea8 <sbrk_aligned+0x38>
 8001ea4:	f04f 34ff 	mov.w	r4, #4294967295
 8001ea8:	4620      	mov	r0, r4
 8001eaa:	bd70      	pop	{r4, r5, r6, pc}
 8001eac:	200002fc 	.word	0x200002fc

08001eb0 <_malloc_r>:
 8001eb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001eb4:	1ccd      	adds	r5, r1, #3
 8001eb6:	f025 0503 	bic.w	r5, r5, #3
 8001eba:	3508      	adds	r5, #8
 8001ebc:	2d0c      	cmp	r5, #12
 8001ebe:	bf38      	it	cc
 8001ec0:	250c      	movcc	r5, #12
 8001ec2:	2d00      	cmp	r5, #0
 8001ec4:	4607      	mov	r7, r0
 8001ec6:	db01      	blt.n	8001ecc <_malloc_r+0x1c>
 8001ec8:	42a9      	cmp	r1, r5
 8001eca:	d905      	bls.n	8001ed8 <_malloc_r+0x28>
 8001ecc:	230c      	movs	r3, #12
 8001ece:	603b      	str	r3, [r7, #0]
 8001ed0:	2600      	movs	r6, #0
 8001ed2:	4630      	mov	r0, r6
 8001ed4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001ed8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8001fac <_malloc_r+0xfc>
 8001edc:	f000 f868 	bl	8001fb0 <__malloc_lock>
 8001ee0:	f8d8 3000 	ldr.w	r3, [r8]
 8001ee4:	461c      	mov	r4, r3
 8001ee6:	bb5c      	cbnz	r4, 8001f40 <_malloc_r+0x90>
 8001ee8:	4629      	mov	r1, r5
 8001eea:	4638      	mov	r0, r7
 8001eec:	f7ff ffc0 	bl	8001e70 <sbrk_aligned>
 8001ef0:	1c43      	adds	r3, r0, #1
 8001ef2:	4604      	mov	r4, r0
 8001ef4:	d155      	bne.n	8001fa2 <_malloc_r+0xf2>
 8001ef6:	f8d8 4000 	ldr.w	r4, [r8]
 8001efa:	4626      	mov	r6, r4
 8001efc:	2e00      	cmp	r6, #0
 8001efe:	d145      	bne.n	8001f8c <_malloc_r+0xdc>
 8001f00:	2c00      	cmp	r4, #0
 8001f02:	d048      	beq.n	8001f96 <_malloc_r+0xe6>
 8001f04:	6823      	ldr	r3, [r4, #0]
 8001f06:	4631      	mov	r1, r6
 8001f08:	4638      	mov	r0, r7
 8001f0a:	eb04 0903 	add.w	r9, r4, r3
 8001f0e:	f000 fd4b 	bl	80029a8 <_sbrk_r>
 8001f12:	4581      	cmp	r9, r0
 8001f14:	d13f      	bne.n	8001f96 <_malloc_r+0xe6>
 8001f16:	6821      	ldr	r1, [r4, #0]
 8001f18:	1a6d      	subs	r5, r5, r1
 8001f1a:	4629      	mov	r1, r5
 8001f1c:	4638      	mov	r0, r7
 8001f1e:	f7ff ffa7 	bl	8001e70 <sbrk_aligned>
 8001f22:	3001      	adds	r0, #1
 8001f24:	d037      	beq.n	8001f96 <_malloc_r+0xe6>
 8001f26:	6823      	ldr	r3, [r4, #0]
 8001f28:	442b      	add	r3, r5
 8001f2a:	6023      	str	r3, [r4, #0]
 8001f2c:	f8d8 3000 	ldr.w	r3, [r8]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d038      	beq.n	8001fa6 <_malloc_r+0xf6>
 8001f34:	685a      	ldr	r2, [r3, #4]
 8001f36:	42a2      	cmp	r2, r4
 8001f38:	d12b      	bne.n	8001f92 <_malloc_r+0xe2>
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	605a      	str	r2, [r3, #4]
 8001f3e:	e00f      	b.n	8001f60 <_malloc_r+0xb0>
 8001f40:	6822      	ldr	r2, [r4, #0]
 8001f42:	1b52      	subs	r2, r2, r5
 8001f44:	d41f      	bmi.n	8001f86 <_malloc_r+0xd6>
 8001f46:	2a0b      	cmp	r2, #11
 8001f48:	d917      	bls.n	8001f7a <_malloc_r+0xca>
 8001f4a:	1961      	adds	r1, r4, r5
 8001f4c:	42a3      	cmp	r3, r4
 8001f4e:	6025      	str	r5, [r4, #0]
 8001f50:	bf18      	it	ne
 8001f52:	6059      	strne	r1, [r3, #4]
 8001f54:	6863      	ldr	r3, [r4, #4]
 8001f56:	bf08      	it	eq
 8001f58:	f8c8 1000 	streq.w	r1, [r8]
 8001f5c:	5162      	str	r2, [r4, r5]
 8001f5e:	604b      	str	r3, [r1, #4]
 8001f60:	4638      	mov	r0, r7
 8001f62:	f104 060b 	add.w	r6, r4, #11
 8001f66:	f000 f829 	bl	8001fbc <__malloc_unlock>
 8001f6a:	f026 0607 	bic.w	r6, r6, #7
 8001f6e:	1d23      	adds	r3, r4, #4
 8001f70:	1af2      	subs	r2, r6, r3
 8001f72:	d0ae      	beq.n	8001ed2 <_malloc_r+0x22>
 8001f74:	1b9b      	subs	r3, r3, r6
 8001f76:	50a3      	str	r3, [r4, r2]
 8001f78:	e7ab      	b.n	8001ed2 <_malloc_r+0x22>
 8001f7a:	42a3      	cmp	r3, r4
 8001f7c:	6862      	ldr	r2, [r4, #4]
 8001f7e:	d1dd      	bne.n	8001f3c <_malloc_r+0x8c>
 8001f80:	f8c8 2000 	str.w	r2, [r8]
 8001f84:	e7ec      	b.n	8001f60 <_malloc_r+0xb0>
 8001f86:	4623      	mov	r3, r4
 8001f88:	6864      	ldr	r4, [r4, #4]
 8001f8a:	e7ac      	b.n	8001ee6 <_malloc_r+0x36>
 8001f8c:	4634      	mov	r4, r6
 8001f8e:	6876      	ldr	r6, [r6, #4]
 8001f90:	e7b4      	b.n	8001efc <_malloc_r+0x4c>
 8001f92:	4613      	mov	r3, r2
 8001f94:	e7cc      	b.n	8001f30 <_malloc_r+0x80>
 8001f96:	230c      	movs	r3, #12
 8001f98:	603b      	str	r3, [r7, #0]
 8001f9a:	4638      	mov	r0, r7
 8001f9c:	f000 f80e 	bl	8001fbc <__malloc_unlock>
 8001fa0:	e797      	b.n	8001ed2 <_malloc_r+0x22>
 8001fa2:	6025      	str	r5, [r4, #0]
 8001fa4:	e7dc      	b.n	8001f60 <_malloc_r+0xb0>
 8001fa6:	605b      	str	r3, [r3, #4]
 8001fa8:	deff      	udf	#255	; 0xff
 8001faa:	bf00      	nop
 8001fac:	200002f8 	.word	0x200002f8

08001fb0 <__malloc_lock>:
 8001fb0:	4801      	ldr	r0, [pc, #4]	; (8001fb8 <__malloc_lock+0x8>)
 8001fb2:	f7ff bee8 	b.w	8001d86 <__retarget_lock_acquire_recursive>
 8001fb6:	bf00      	nop
 8001fb8:	200002f4 	.word	0x200002f4

08001fbc <__malloc_unlock>:
 8001fbc:	4801      	ldr	r0, [pc, #4]	; (8001fc4 <__malloc_unlock+0x8>)
 8001fbe:	f7ff bee3 	b.w	8001d88 <__retarget_lock_release_recursive>
 8001fc2:	bf00      	nop
 8001fc4:	200002f4 	.word	0x200002f4

08001fc8 <__sfputc_r>:
 8001fc8:	6893      	ldr	r3, [r2, #8]
 8001fca:	3b01      	subs	r3, #1
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	b410      	push	{r4}
 8001fd0:	6093      	str	r3, [r2, #8]
 8001fd2:	da08      	bge.n	8001fe6 <__sfputc_r+0x1e>
 8001fd4:	6994      	ldr	r4, [r2, #24]
 8001fd6:	42a3      	cmp	r3, r4
 8001fd8:	db01      	blt.n	8001fde <__sfputc_r+0x16>
 8001fda:	290a      	cmp	r1, #10
 8001fdc:	d103      	bne.n	8001fe6 <__sfputc_r+0x1e>
 8001fde:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001fe2:	f000 bc1b 	b.w	800281c <__swbuf_r>
 8001fe6:	6813      	ldr	r3, [r2, #0]
 8001fe8:	1c58      	adds	r0, r3, #1
 8001fea:	6010      	str	r0, [r2, #0]
 8001fec:	7019      	strb	r1, [r3, #0]
 8001fee:	4608      	mov	r0, r1
 8001ff0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001ff4:	4770      	bx	lr

08001ff6 <__sfputs_r>:
 8001ff6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ff8:	4606      	mov	r6, r0
 8001ffa:	460f      	mov	r7, r1
 8001ffc:	4614      	mov	r4, r2
 8001ffe:	18d5      	adds	r5, r2, r3
 8002000:	42ac      	cmp	r4, r5
 8002002:	d101      	bne.n	8002008 <__sfputs_r+0x12>
 8002004:	2000      	movs	r0, #0
 8002006:	e007      	b.n	8002018 <__sfputs_r+0x22>
 8002008:	f814 1b01 	ldrb.w	r1, [r4], #1
 800200c:	463a      	mov	r2, r7
 800200e:	4630      	mov	r0, r6
 8002010:	f7ff ffda 	bl	8001fc8 <__sfputc_r>
 8002014:	1c43      	adds	r3, r0, #1
 8002016:	d1f3      	bne.n	8002000 <__sfputs_r+0xa>
 8002018:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800201c <_vfiprintf_r>:
 800201c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002020:	460d      	mov	r5, r1
 8002022:	b09d      	sub	sp, #116	; 0x74
 8002024:	4614      	mov	r4, r2
 8002026:	4698      	mov	r8, r3
 8002028:	4606      	mov	r6, r0
 800202a:	b118      	cbz	r0, 8002034 <_vfiprintf_r+0x18>
 800202c:	6a03      	ldr	r3, [r0, #32]
 800202e:	b90b      	cbnz	r3, 8002034 <_vfiprintf_r+0x18>
 8002030:	f7ff fc70 	bl	8001914 <__sinit>
 8002034:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002036:	07d9      	lsls	r1, r3, #31
 8002038:	d405      	bmi.n	8002046 <_vfiprintf_r+0x2a>
 800203a:	89ab      	ldrh	r3, [r5, #12]
 800203c:	059a      	lsls	r2, r3, #22
 800203e:	d402      	bmi.n	8002046 <_vfiprintf_r+0x2a>
 8002040:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002042:	f7ff fea0 	bl	8001d86 <__retarget_lock_acquire_recursive>
 8002046:	89ab      	ldrh	r3, [r5, #12]
 8002048:	071b      	lsls	r3, r3, #28
 800204a:	d501      	bpl.n	8002050 <_vfiprintf_r+0x34>
 800204c:	692b      	ldr	r3, [r5, #16]
 800204e:	b99b      	cbnz	r3, 8002078 <_vfiprintf_r+0x5c>
 8002050:	4629      	mov	r1, r5
 8002052:	4630      	mov	r0, r6
 8002054:	f000 fc20 	bl	8002898 <__swsetup_r>
 8002058:	b170      	cbz	r0, 8002078 <_vfiprintf_r+0x5c>
 800205a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800205c:	07dc      	lsls	r4, r3, #31
 800205e:	d504      	bpl.n	800206a <_vfiprintf_r+0x4e>
 8002060:	f04f 30ff 	mov.w	r0, #4294967295
 8002064:	b01d      	add	sp, #116	; 0x74
 8002066:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800206a:	89ab      	ldrh	r3, [r5, #12]
 800206c:	0598      	lsls	r0, r3, #22
 800206e:	d4f7      	bmi.n	8002060 <_vfiprintf_r+0x44>
 8002070:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002072:	f7ff fe89 	bl	8001d88 <__retarget_lock_release_recursive>
 8002076:	e7f3      	b.n	8002060 <_vfiprintf_r+0x44>
 8002078:	2300      	movs	r3, #0
 800207a:	9309      	str	r3, [sp, #36]	; 0x24
 800207c:	2320      	movs	r3, #32
 800207e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002082:	f8cd 800c 	str.w	r8, [sp, #12]
 8002086:	2330      	movs	r3, #48	; 0x30
 8002088:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800223c <_vfiprintf_r+0x220>
 800208c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002090:	f04f 0901 	mov.w	r9, #1
 8002094:	4623      	mov	r3, r4
 8002096:	469a      	mov	sl, r3
 8002098:	f813 2b01 	ldrb.w	r2, [r3], #1
 800209c:	b10a      	cbz	r2, 80020a2 <_vfiprintf_r+0x86>
 800209e:	2a25      	cmp	r2, #37	; 0x25
 80020a0:	d1f9      	bne.n	8002096 <_vfiprintf_r+0x7a>
 80020a2:	ebba 0b04 	subs.w	fp, sl, r4
 80020a6:	d00b      	beq.n	80020c0 <_vfiprintf_r+0xa4>
 80020a8:	465b      	mov	r3, fp
 80020aa:	4622      	mov	r2, r4
 80020ac:	4629      	mov	r1, r5
 80020ae:	4630      	mov	r0, r6
 80020b0:	f7ff ffa1 	bl	8001ff6 <__sfputs_r>
 80020b4:	3001      	adds	r0, #1
 80020b6:	f000 80a9 	beq.w	800220c <_vfiprintf_r+0x1f0>
 80020ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80020bc:	445a      	add	r2, fp
 80020be:	9209      	str	r2, [sp, #36]	; 0x24
 80020c0:	f89a 3000 	ldrb.w	r3, [sl]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	f000 80a1 	beq.w	800220c <_vfiprintf_r+0x1f0>
 80020ca:	2300      	movs	r3, #0
 80020cc:	f04f 32ff 	mov.w	r2, #4294967295
 80020d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80020d4:	f10a 0a01 	add.w	sl, sl, #1
 80020d8:	9304      	str	r3, [sp, #16]
 80020da:	9307      	str	r3, [sp, #28]
 80020dc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80020e0:	931a      	str	r3, [sp, #104]	; 0x68
 80020e2:	4654      	mov	r4, sl
 80020e4:	2205      	movs	r2, #5
 80020e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80020ea:	4854      	ldr	r0, [pc, #336]	; (800223c <_vfiprintf_r+0x220>)
 80020ec:	f7fe f878 	bl	80001e0 <memchr>
 80020f0:	9a04      	ldr	r2, [sp, #16]
 80020f2:	b9d8      	cbnz	r0, 800212c <_vfiprintf_r+0x110>
 80020f4:	06d1      	lsls	r1, r2, #27
 80020f6:	bf44      	itt	mi
 80020f8:	2320      	movmi	r3, #32
 80020fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80020fe:	0713      	lsls	r3, r2, #28
 8002100:	bf44      	itt	mi
 8002102:	232b      	movmi	r3, #43	; 0x2b
 8002104:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002108:	f89a 3000 	ldrb.w	r3, [sl]
 800210c:	2b2a      	cmp	r3, #42	; 0x2a
 800210e:	d015      	beq.n	800213c <_vfiprintf_r+0x120>
 8002110:	9a07      	ldr	r2, [sp, #28]
 8002112:	4654      	mov	r4, sl
 8002114:	2000      	movs	r0, #0
 8002116:	f04f 0c0a 	mov.w	ip, #10
 800211a:	4621      	mov	r1, r4
 800211c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002120:	3b30      	subs	r3, #48	; 0x30
 8002122:	2b09      	cmp	r3, #9
 8002124:	d94d      	bls.n	80021c2 <_vfiprintf_r+0x1a6>
 8002126:	b1b0      	cbz	r0, 8002156 <_vfiprintf_r+0x13a>
 8002128:	9207      	str	r2, [sp, #28]
 800212a:	e014      	b.n	8002156 <_vfiprintf_r+0x13a>
 800212c:	eba0 0308 	sub.w	r3, r0, r8
 8002130:	fa09 f303 	lsl.w	r3, r9, r3
 8002134:	4313      	orrs	r3, r2
 8002136:	9304      	str	r3, [sp, #16]
 8002138:	46a2      	mov	sl, r4
 800213a:	e7d2      	b.n	80020e2 <_vfiprintf_r+0xc6>
 800213c:	9b03      	ldr	r3, [sp, #12]
 800213e:	1d19      	adds	r1, r3, #4
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	9103      	str	r1, [sp, #12]
 8002144:	2b00      	cmp	r3, #0
 8002146:	bfbb      	ittet	lt
 8002148:	425b      	neglt	r3, r3
 800214a:	f042 0202 	orrlt.w	r2, r2, #2
 800214e:	9307      	strge	r3, [sp, #28]
 8002150:	9307      	strlt	r3, [sp, #28]
 8002152:	bfb8      	it	lt
 8002154:	9204      	strlt	r2, [sp, #16]
 8002156:	7823      	ldrb	r3, [r4, #0]
 8002158:	2b2e      	cmp	r3, #46	; 0x2e
 800215a:	d10c      	bne.n	8002176 <_vfiprintf_r+0x15a>
 800215c:	7863      	ldrb	r3, [r4, #1]
 800215e:	2b2a      	cmp	r3, #42	; 0x2a
 8002160:	d134      	bne.n	80021cc <_vfiprintf_r+0x1b0>
 8002162:	9b03      	ldr	r3, [sp, #12]
 8002164:	1d1a      	adds	r2, r3, #4
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	9203      	str	r2, [sp, #12]
 800216a:	2b00      	cmp	r3, #0
 800216c:	bfb8      	it	lt
 800216e:	f04f 33ff 	movlt.w	r3, #4294967295
 8002172:	3402      	adds	r4, #2
 8002174:	9305      	str	r3, [sp, #20]
 8002176:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800224c <_vfiprintf_r+0x230>
 800217a:	7821      	ldrb	r1, [r4, #0]
 800217c:	2203      	movs	r2, #3
 800217e:	4650      	mov	r0, sl
 8002180:	f7fe f82e 	bl	80001e0 <memchr>
 8002184:	b138      	cbz	r0, 8002196 <_vfiprintf_r+0x17a>
 8002186:	9b04      	ldr	r3, [sp, #16]
 8002188:	eba0 000a 	sub.w	r0, r0, sl
 800218c:	2240      	movs	r2, #64	; 0x40
 800218e:	4082      	lsls	r2, r0
 8002190:	4313      	orrs	r3, r2
 8002192:	3401      	adds	r4, #1
 8002194:	9304      	str	r3, [sp, #16]
 8002196:	f814 1b01 	ldrb.w	r1, [r4], #1
 800219a:	4829      	ldr	r0, [pc, #164]	; (8002240 <_vfiprintf_r+0x224>)
 800219c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80021a0:	2206      	movs	r2, #6
 80021a2:	f7fe f81d 	bl	80001e0 <memchr>
 80021a6:	2800      	cmp	r0, #0
 80021a8:	d03f      	beq.n	800222a <_vfiprintf_r+0x20e>
 80021aa:	4b26      	ldr	r3, [pc, #152]	; (8002244 <_vfiprintf_r+0x228>)
 80021ac:	bb1b      	cbnz	r3, 80021f6 <_vfiprintf_r+0x1da>
 80021ae:	9b03      	ldr	r3, [sp, #12]
 80021b0:	3307      	adds	r3, #7
 80021b2:	f023 0307 	bic.w	r3, r3, #7
 80021b6:	3308      	adds	r3, #8
 80021b8:	9303      	str	r3, [sp, #12]
 80021ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80021bc:	443b      	add	r3, r7
 80021be:	9309      	str	r3, [sp, #36]	; 0x24
 80021c0:	e768      	b.n	8002094 <_vfiprintf_r+0x78>
 80021c2:	fb0c 3202 	mla	r2, ip, r2, r3
 80021c6:	460c      	mov	r4, r1
 80021c8:	2001      	movs	r0, #1
 80021ca:	e7a6      	b.n	800211a <_vfiprintf_r+0xfe>
 80021cc:	2300      	movs	r3, #0
 80021ce:	3401      	adds	r4, #1
 80021d0:	9305      	str	r3, [sp, #20]
 80021d2:	4619      	mov	r1, r3
 80021d4:	f04f 0c0a 	mov.w	ip, #10
 80021d8:	4620      	mov	r0, r4
 80021da:	f810 2b01 	ldrb.w	r2, [r0], #1
 80021de:	3a30      	subs	r2, #48	; 0x30
 80021e0:	2a09      	cmp	r2, #9
 80021e2:	d903      	bls.n	80021ec <_vfiprintf_r+0x1d0>
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d0c6      	beq.n	8002176 <_vfiprintf_r+0x15a>
 80021e8:	9105      	str	r1, [sp, #20]
 80021ea:	e7c4      	b.n	8002176 <_vfiprintf_r+0x15a>
 80021ec:	fb0c 2101 	mla	r1, ip, r1, r2
 80021f0:	4604      	mov	r4, r0
 80021f2:	2301      	movs	r3, #1
 80021f4:	e7f0      	b.n	80021d8 <_vfiprintf_r+0x1bc>
 80021f6:	ab03      	add	r3, sp, #12
 80021f8:	9300      	str	r3, [sp, #0]
 80021fa:	462a      	mov	r2, r5
 80021fc:	4b12      	ldr	r3, [pc, #72]	; (8002248 <_vfiprintf_r+0x22c>)
 80021fe:	a904      	add	r1, sp, #16
 8002200:	4630      	mov	r0, r6
 8002202:	f3af 8000 	nop.w
 8002206:	4607      	mov	r7, r0
 8002208:	1c78      	adds	r0, r7, #1
 800220a:	d1d6      	bne.n	80021ba <_vfiprintf_r+0x19e>
 800220c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800220e:	07d9      	lsls	r1, r3, #31
 8002210:	d405      	bmi.n	800221e <_vfiprintf_r+0x202>
 8002212:	89ab      	ldrh	r3, [r5, #12]
 8002214:	059a      	lsls	r2, r3, #22
 8002216:	d402      	bmi.n	800221e <_vfiprintf_r+0x202>
 8002218:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800221a:	f7ff fdb5 	bl	8001d88 <__retarget_lock_release_recursive>
 800221e:	89ab      	ldrh	r3, [r5, #12]
 8002220:	065b      	lsls	r3, r3, #25
 8002222:	f53f af1d 	bmi.w	8002060 <_vfiprintf_r+0x44>
 8002226:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002228:	e71c      	b.n	8002064 <_vfiprintf_r+0x48>
 800222a:	ab03      	add	r3, sp, #12
 800222c:	9300      	str	r3, [sp, #0]
 800222e:	462a      	mov	r2, r5
 8002230:	4b05      	ldr	r3, [pc, #20]	; (8002248 <_vfiprintf_r+0x22c>)
 8002232:	a904      	add	r1, sp, #16
 8002234:	4630      	mov	r0, r6
 8002236:	f000 f879 	bl	800232c <_printf_i>
 800223a:	e7e4      	b.n	8002206 <_vfiprintf_r+0x1ea>
 800223c:	08002dee 	.word	0x08002dee
 8002240:	08002df8 	.word	0x08002df8
 8002244:	00000000 	.word	0x00000000
 8002248:	08001ff7 	.word	0x08001ff7
 800224c:	08002df4 	.word	0x08002df4

08002250 <_printf_common>:
 8002250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002254:	4616      	mov	r6, r2
 8002256:	4699      	mov	r9, r3
 8002258:	688a      	ldr	r2, [r1, #8]
 800225a:	690b      	ldr	r3, [r1, #16]
 800225c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002260:	4293      	cmp	r3, r2
 8002262:	bfb8      	it	lt
 8002264:	4613      	movlt	r3, r2
 8002266:	6033      	str	r3, [r6, #0]
 8002268:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800226c:	4607      	mov	r7, r0
 800226e:	460c      	mov	r4, r1
 8002270:	b10a      	cbz	r2, 8002276 <_printf_common+0x26>
 8002272:	3301      	adds	r3, #1
 8002274:	6033      	str	r3, [r6, #0]
 8002276:	6823      	ldr	r3, [r4, #0]
 8002278:	0699      	lsls	r1, r3, #26
 800227a:	bf42      	ittt	mi
 800227c:	6833      	ldrmi	r3, [r6, #0]
 800227e:	3302      	addmi	r3, #2
 8002280:	6033      	strmi	r3, [r6, #0]
 8002282:	6825      	ldr	r5, [r4, #0]
 8002284:	f015 0506 	ands.w	r5, r5, #6
 8002288:	d106      	bne.n	8002298 <_printf_common+0x48>
 800228a:	f104 0a19 	add.w	sl, r4, #25
 800228e:	68e3      	ldr	r3, [r4, #12]
 8002290:	6832      	ldr	r2, [r6, #0]
 8002292:	1a9b      	subs	r3, r3, r2
 8002294:	42ab      	cmp	r3, r5
 8002296:	dc26      	bgt.n	80022e6 <_printf_common+0x96>
 8002298:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800229c:	1e13      	subs	r3, r2, #0
 800229e:	6822      	ldr	r2, [r4, #0]
 80022a0:	bf18      	it	ne
 80022a2:	2301      	movne	r3, #1
 80022a4:	0692      	lsls	r2, r2, #26
 80022a6:	d42b      	bmi.n	8002300 <_printf_common+0xb0>
 80022a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80022ac:	4649      	mov	r1, r9
 80022ae:	4638      	mov	r0, r7
 80022b0:	47c0      	blx	r8
 80022b2:	3001      	adds	r0, #1
 80022b4:	d01e      	beq.n	80022f4 <_printf_common+0xa4>
 80022b6:	6823      	ldr	r3, [r4, #0]
 80022b8:	6922      	ldr	r2, [r4, #16]
 80022ba:	f003 0306 	and.w	r3, r3, #6
 80022be:	2b04      	cmp	r3, #4
 80022c0:	bf02      	ittt	eq
 80022c2:	68e5      	ldreq	r5, [r4, #12]
 80022c4:	6833      	ldreq	r3, [r6, #0]
 80022c6:	1aed      	subeq	r5, r5, r3
 80022c8:	68a3      	ldr	r3, [r4, #8]
 80022ca:	bf0c      	ite	eq
 80022cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80022d0:	2500      	movne	r5, #0
 80022d2:	4293      	cmp	r3, r2
 80022d4:	bfc4      	itt	gt
 80022d6:	1a9b      	subgt	r3, r3, r2
 80022d8:	18ed      	addgt	r5, r5, r3
 80022da:	2600      	movs	r6, #0
 80022dc:	341a      	adds	r4, #26
 80022de:	42b5      	cmp	r5, r6
 80022e0:	d11a      	bne.n	8002318 <_printf_common+0xc8>
 80022e2:	2000      	movs	r0, #0
 80022e4:	e008      	b.n	80022f8 <_printf_common+0xa8>
 80022e6:	2301      	movs	r3, #1
 80022e8:	4652      	mov	r2, sl
 80022ea:	4649      	mov	r1, r9
 80022ec:	4638      	mov	r0, r7
 80022ee:	47c0      	blx	r8
 80022f0:	3001      	adds	r0, #1
 80022f2:	d103      	bne.n	80022fc <_printf_common+0xac>
 80022f4:	f04f 30ff 	mov.w	r0, #4294967295
 80022f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80022fc:	3501      	adds	r5, #1
 80022fe:	e7c6      	b.n	800228e <_printf_common+0x3e>
 8002300:	18e1      	adds	r1, r4, r3
 8002302:	1c5a      	adds	r2, r3, #1
 8002304:	2030      	movs	r0, #48	; 0x30
 8002306:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800230a:	4422      	add	r2, r4
 800230c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002310:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002314:	3302      	adds	r3, #2
 8002316:	e7c7      	b.n	80022a8 <_printf_common+0x58>
 8002318:	2301      	movs	r3, #1
 800231a:	4622      	mov	r2, r4
 800231c:	4649      	mov	r1, r9
 800231e:	4638      	mov	r0, r7
 8002320:	47c0      	blx	r8
 8002322:	3001      	adds	r0, #1
 8002324:	d0e6      	beq.n	80022f4 <_printf_common+0xa4>
 8002326:	3601      	adds	r6, #1
 8002328:	e7d9      	b.n	80022de <_printf_common+0x8e>
	...

0800232c <_printf_i>:
 800232c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002330:	7e0f      	ldrb	r7, [r1, #24]
 8002332:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002334:	2f78      	cmp	r7, #120	; 0x78
 8002336:	4691      	mov	r9, r2
 8002338:	4680      	mov	r8, r0
 800233a:	460c      	mov	r4, r1
 800233c:	469a      	mov	sl, r3
 800233e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002342:	d807      	bhi.n	8002354 <_printf_i+0x28>
 8002344:	2f62      	cmp	r7, #98	; 0x62
 8002346:	d80a      	bhi.n	800235e <_printf_i+0x32>
 8002348:	2f00      	cmp	r7, #0
 800234a:	f000 80d4 	beq.w	80024f6 <_printf_i+0x1ca>
 800234e:	2f58      	cmp	r7, #88	; 0x58
 8002350:	f000 80c0 	beq.w	80024d4 <_printf_i+0x1a8>
 8002354:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002358:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800235c:	e03a      	b.n	80023d4 <_printf_i+0xa8>
 800235e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002362:	2b15      	cmp	r3, #21
 8002364:	d8f6      	bhi.n	8002354 <_printf_i+0x28>
 8002366:	a101      	add	r1, pc, #4	; (adr r1, 800236c <_printf_i+0x40>)
 8002368:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800236c:	080023c5 	.word	0x080023c5
 8002370:	080023d9 	.word	0x080023d9
 8002374:	08002355 	.word	0x08002355
 8002378:	08002355 	.word	0x08002355
 800237c:	08002355 	.word	0x08002355
 8002380:	08002355 	.word	0x08002355
 8002384:	080023d9 	.word	0x080023d9
 8002388:	08002355 	.word	0x08002355
 800238c:	08002355 	.word	0x08002355
 8002390:	08002355 	.word	0x08002355
 8002394:	08002355 	.word	0x08002355
 8002398:	080024dd 	.word	0x080024dd
 800239c:	08002405 	.word	0x08002405
 80023a0:	08002497 	.word	0x08002497
 80023a4:	08002355 	.word	0x08002355
 80023a8:	08002355 	.word	0x08002355
 80023ac:	080024ff 	.word	0x080024ff
 80023b0:	08002355 	.word	0x08002355
 80023b4:	08002405 	.word	0x08002405
 80023b8:	08002355 	.word	0x08002355
 80023bc:	08002355 	.word	0x08002355
 80023c0:	0800249f 	.word	0x0800249f
 80023c4:	682b      	ldr	r3, [r5, #0]
 80023c6:	1d1a      	adds	r2, r3, #4
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	602a      	str	r2, [r5, #0]
 80023cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80023d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80023d4:	2301      	movs	r3, #1
 80023d6:	e09f      	b.n	8002518 <_printf_i+0x1ec>
 80023d8:	6820      	ldr	r0, [r4, #0]
 80023da:	682b      	ldr	r3, [r5, #0]
 80023dc:	0607      	lsls	r7, r0, #24
 80023de:	f103 0104 	add.w	r1, r3, #4
 80023e2:	6029      	str	r1, [r5, #0]
 80023e4:	d501      	bpl.n	80023ea <_printf_i+0xbe>
 80023e6:	681e      	ldr	r6, [r3, #0]
 80023e8:	e003      	b.n	80023f2 <_printf_i+0xc6>
 80023ea:	0646      	lsls	r6, r0, #25
 80023ec:	d5fb      	bpl.n	80023e6 <_printf_i+0xba>
 80023ee:	f9b3 6000 	ldrsh.w	r6, [r3]
 80023f2:	2e00      	cmp	r6, #0
 80023f4:	da03      	bge.n	80023fe <_printf_i+0xd2>
 80023f6:	232d      	movs	r3, #45	; 0x2d
 80023f8:	4276      	negs	r6, r6
 80023fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80023fe:	485a      	ldr	r0, [pc, #360]	; (8002568 <_printf_i+0x23c>)
 8002400:	230a      	movs	r3, #10
 8002402:	e012      	b.n	800242a <_printf_i+0xfe>
 8002404:	682b      	ldr	r3, [r5, #0]
 8002406:	6820      	ldr	r0, [r4, #0]
 8002408:	1d19      	adds	r1, r3, #4
 800240a:	6029      	str	r1, [r5, #0]
 800240c:	0605      	lsls	r5, r0, #24
 800240e:	d501      	bpl.n	8002414 <_printf_i+0xe8>
 8002410:	681e      	ldr	r6, [r3, #0]
 8002412:	e002      	b.n	800241a <_printf_i+0xee>
 8002414:	0641      	lsls	r1, r0, #25
 8002416:	d5fb      	bpl.n	8002410 <_printf_i+0xe4>
 8002418:	881e      	ldrh	r6, [r3, #0]
 800241a:	4853      	ldr	r0, [pc, #332]	; (8002568 <_printf_i+0x23c>)
 800241c:	2f6f      	cmp	r7, #111	; 0x6f
 800241e:	bf0c      	ite	eq
 8002420:	2308      	moveq	r3, #8
 8002422:	230a      	movne	r3, #10
 8002424:	2100      	movs	r1, #0
 8002426:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800242a:	6865      	ldr	r5, [r4, #4]
 800242c:	60a5      	str	r5, [r4, #8]
 800242e:	2d00      	cmp	r5, #0
 8002430:	bfa2      	ittt	ge
 8002432:	6821      	ldrge	r1, [r4, #0]
 8002434:	f021 0104 	bicge.w	r1, r1, #4
 8002438:	6021      	strge	r1, [r4, #0]
 800243a:	b90e      	cbnz	r6, 8002440 <_printf_i+0x114>
 800243c:	2d00      	cmp	r5, #0
 800243e:	d04b      	beq.n	80024d8 <_printf_i+0x1ac>
 8002440:	4615      	mov	r5, r2
 8002442:	fbb6 f1f3 	udiv	r1, r6, r3
 8002446:	fb03 6711 	mls	r7, r3, r1, r6
 800244a:	5dc7      	ldrb	r7, [r0, r7]
 800244c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002450:	4637      	mov	r7, r6
 8002452:	42bb      	cmp	r3, r7
 8002454:	460e      	mov	r6, r1
 8002456:	d9f4      	bls.n	8002442 <_printf_i+0x116>
 8002458:	2b08      	cmp	r3, #8
 800245a:	d10b      	bne.n	8002474 <_printf_i+0x148>
 800245c:	6823      	ldr	r3, [r4, #0]
 800245e:	07de      	lsls	r6, r3, #31
 8002460:	d508      	bpl.n	8002474 <_printf_i+0x148>
 8002462:	6923      	ldr	r3, [r4, #16]
 8002464:	6861      	ldr	r1, [r4, #4]
 8002466:	4299      	cmp	r1, r3
 8002468:	bfde      	ittt	le
 800246a:	2330      	movle	r3, #48	; 0x30
 800246c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002470:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002474:	1b52      	subs	r2, r2, r5
 8002476:	6122      	str	r2, [r4, #16]
 8002478:	f8cd a000 	str.w	sl, [sp]
 800247c:	464b      	mov	r3, r9
 800247e:	aa03      	add	r2, sp, #12
 8002480:	4621      	mov	r1, r4
 8002482:	4640      	mov	r0, r8
 8002484:	f7ff fee4 	bl	8002250 <_printf_common>
 8002488:	3001      	adds	r0, #1
 800248a:	d14a      	bne.n	8002522 <_printf_i+0x1f6>
 800248c:	f04f 30ff 	mov.w	r0, #4294967295
 8002490:	b004      	add	sp, #16
 8002492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002496:	6823      	ldr	r3, [r4, #0]
 8002498:	f043 0320 	orr.w	r3, r3, #32
 800249c:	6023      	str	r3, [r4, #0]
 800249e:	4833      	ldr	r0, [pc, #204]	; (800256c <_printf_i+0x240>)
 80024a0:	2778      	movs	r7, #120	; 0x78
 80024a2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80024a6:	6823      	ldr	r3, [r4, #0]
 80024a8:	6829      	ldr	r1, [r5, #0]
 80024aa:	061f      	lsls	r7, r3, #24
 80024ac:	f851 6b04 	ldr.w	r6, [r1], #4
 80024b0:	d402      	bmi.n	80024b8 <_printf_i+0x18c>
 80024b2:	065f      	lsls	r7, r3, #25
 80024b4:	bf48      	it	mi
 80024b6:	b2b6      	uxthmi	r6, r6
 80024b8:	07df      	lsls	r7, r3, #31
 80024ba:	bf48      	it	mi
 80024bc:	f043 0320 	orrmi.w	r3, r3, #32
 80024c0:	6029      	str	r1, [r5, #0]
 80024c2:	bf48      	it	mi
 80024c4:	6023      	strmi	r3, [r4, #0]
 80024c6:	b91e      	cbnz	r6, 80024d0 <_printf_i+0x1a4>
 80024c8:	6823      	ldr	r3, [r4, #0]
 80024ca:	f023 0320 	bic.w	r3, r3, #32
 80024ce:	6023      	str	r3, [r4, #0]
 80024d0:	2310      	movs	r3, #16
 80024d2:	e7a7      	b.n	8002424 <_printf_i+0xf8>
 80024d4:	4824      	ldr	r0, [pc, #144]	; (8002568 <_printf_i+0x23c>)
 80024d6:	e7e4      	b.n	80024a2 <_printf_i+0x176>
 80024d8:	4615      	mov	r5, r2
 80024da:	e7bd      	b.n	8002458 <_printf_i+0x12c>
 80024dc:	682b      	ldr	r3, [r5, #0]
 80024de:	6826      	ldr	r6, [r4, #0]
 80024e0:	6961      	ldr	r1, [r4, #20]
 80024e2:	1d18      	adds	r0, r3, #4
 80024e4:	6028      	str	r0, [r5, #0]
 80024e6:	0635      	lsls	r5, r6, #24
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	d501      	bpl.n	80024f0 <_printf_i+0x1c4>
 80024ec:	6019      	str	r1, [r3, #0]
 80024ee:	e002      	b.n	80024f6 <_printf_i+0x1ca>
 80024f0:	0670      	lsls	r0, r6, #25
 80024f2:	d5fb      	bpl.n	80024ec <_printf_i+0x1c0>
 80024f4:	8019      	strh	r1, [r3, #0]
 80024f6:	2300      	movs	r3, #0
 80024f8:	6123      	str	r3, [r4, #16]
 80024fa:	4615      	mov	r5, r2
 80024fc:	e7bc      	b.n	8002478 <_printf_i+0x14c>
 80024fe:	682b      	ldr	r3, [r5, #0]
 8002500:	1d1a      	adds	r2, r3, #4
 8002502:	602a      	str	r2, [r5, #0]
 8002504:	681d      	ldr	r5, [r3, #0]
 8002506:	6862      	ldr	r2, [r4, #4]
 8002508:	2100      	movs	r1, #0
 800250a:	4628      	mov	r0, r5
 800250c:	f7fd fe68 	bl	80001e0 <memchr>
 8002510:	b108      	cbz	r0, 8002516 <_printf_i+0x1ea>
 8002512:	1b40      	subs	r0, r0, r5
 8002514:	6060      	str	r0, [r4, #4]
 8002516:	6863      	ldr	r3, [r4, #4]
 8002518:	6123      	str	r3, [r4, #16]
 800251a:	2300      	movs	r3, #0
 800251c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002520:	e7aa      	b.n	8002478 <_printf_i+0x14c>
 8002522:	6923      	ldr	r3, [r4, #16]
 8002524:	462a      	mov	r2, r5
 8002526:	4649      	mov	r1, r9
 8002528:	4640      	mov	r0, r8
 800252a:	47d0      	blx	sl
 800252c:	3001      	adds	r0, #1
 800252e:	d0ad      	beq.n	800248c <_printf_i+0x160>
 8002530:	6823      	ldr	r3, [r4, #0]
 8002532:	079b      	lsls	r3, r3, #30
 8002534:	d413      	bmi.n	800255e <_printf_i+0x232>
 8002536:	68e0      	ldr	r0, [r4, #12]
 8002538:	9b03      	ldr	r3, [sp, #12]
 800253a:	4298      	cmp	r0, r3
 800253c:	bfb8      	it	lt
 800253e:	4618      	movlt	r0, r3
 8002540:	e7a6      	b.n	8002490 <_printf_i+0x164>
 8002542:	2301      	movs	r3, #1
 8002544:	4632      	mov	r2, r6
 8002546:	4649      	mov	r1, r9
 8002548:	4640      	mov	r0, r8
 800254a:	47d0      	blx	sl
 800254c:	3001      	adds	r0, #1
 800254e:	d09d      	beq.n	800248c <_printf_i+0x160>
 8002550:	3501      	adds	r5, #1
 8002552:	68e3      	ldr	r3, [r4, #12]
 8002554:	9903      	ldr	r1, [sp, #12]
 8002556:	1a5b      	subs	r3, r3, r1
 8002558:	42ab      	cmp	r3, r5
 800255a:	dcf2      	bgt.n	8002542 <_printf_i+0x216>
 800255c:	e7eb      	b.n	8002536 <_printf_i+0x20a>
 800255e:	2500      	movs	r5, #0
 8002560:	f104 0619 	add.w	r6, r4, #25
 8002564:	e7f5      	b.n	8002552 <_printf_i+0x226>
 8002566:	bf00      	nop
 8002568:	08002dff 	.word	0x08002dff
 800256c:	08002e10 	.word	0x08002e10

08002570 <__sflush_r>:
 8002570:	898a      	ldrh	r2, [r1, #12]
 8002572:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002576:	4605      	mov	r5, r0
 8002578:	0710      	lsls	r0, r2, #28
 800257a:	460c      	mov	r4, r1
 800257c:	d458      	bmi.n	8002630 <__sflush_r+0xc0>
 800257e:	684b      	ldr	r3, [r1, #4]
 8002580:	2b00      	cmp	r3, #0
 8002582:	dc05      	bgt.n	8002590 <__sflush_r+0x20>
 8002584:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002586:	2b00      	cmp	r3, #0
 8002588:	dc02      	bgt.n	8002590 <__sflush_r+0x20>
 800258a:	2000      	movs	r0, #0
 800258c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002590:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002592:	2e00      	cmp	r6, #0
 8002594:	d0f9      	beq.n	800258a <__sflush_r+0x1a>
 8002596:	2300      	movs	r3, #0
 8002598:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800259c:	682f      	ldr	r7, [r5, #0]
 800259e:	6a21      	ldr	r1, [r4, #32]
 80025a0:	602b      	str	r3, [r5, #0]
 80025a2:	d032      	beq.n	800260a <__sflush_r+0x9a>
 80025a4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80025a6:	89a3      	ldrh	r3, [r4, #12]
 80025a8:	075a      	lsls	r2, r3, #29
 80025aa:	d505      	bpl.n	80025b8 <__sflush_r+0x48>
 80025ac:	6863      	ldr	r3, [r4, #4]
 80025ae:	1ac0      	subs	r0, r0, r3
 80025b0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80025b2:	b10b      	cbz	r3, 80025b8 <__sflush_r+0x48>
 80025b4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80025b6:	1ac0      	subs	r0, r0, r3
 80025b8:	2300      	movs	r3, #0
 80025ba:	4602      	mov	r2, r0
 80025bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80025be:	6a21      	ldr	r1, [r4, #32]
 80025c0:	4628      	mov	r0, r5
 80025c2:	47b0      	blx	r6
 80025c4:	1c43      	adds	r3, r0, #1
 80025c6:	89a3      	ldrh	r3, [r4, #12]
 80025c8:	d106      	bne.n	80025d8 <__sflush_r+0x68>
 80025ca:	6829      	ldr	r1, [r5, #0]
 80025cc:	291d      	cmp	r1, #29
 80025ce:	d82b      	bhi.n	8002628 <__sflush_r+0xb8>
 80025d0:	4a29      	ldr	r2, [pc, #164]	; (8002678 <__sflush_r+0x108>)
 80025d2:	410a      	asrs	r2, r1
 80025d4:	07d6      	lsls	r6, r2, #31
 80025d6:	d427      	bmi.n	8002628 <__sflush_r+0xb8>
 80025d8:	2200      	movs	r2, #0
 80025da:	6062      	str	r2, [r4, #4]
 80025dc:	04d9      	lsls	r1, r3, #19
 80025de:	6922      	ldr	r2, [r4, #16]
 80025e0:	6022      	str	r2, [r4, #0]
 80025e2:	d504      	bpl.n	80025ee <__sflush_r+0x7e>
 80025e4:	1c42      	adds	r2, r0, #1
 80025e6:	d101      	bne.n	80025ec <__sflush_r+0x7c>
 80025e8:	682b      	ldr	r3, [r5, #0]
 80025ea:	b903      	cbnz	r3, 80025ee <__sflush_r+0x7e>
 80025ec:	6560      	str	r0, [r4, #84]	; 0x54
 80025ee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80025f0:	602f      	str	r7, [r5, #0]
 80025f2:	2900      	cmp	r1, #0
 80025f4:	d0c9      	beq.n	800258a <__sflush_r+0x1a>
 80025f6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80025fa:	4299      	cmp	r1, r3
 80025fc:	d002      	beq.n	8002604 <__sflush_r+0x94>
 80025fe:	4628      	mov	r0, r5
 8002600:	f7ff fbe2 	bl	8001dc8 <_free_r>
 8002604:	2000      	movs	r0, #0
 8002606:	6360      	str	r0, [r4, #52]	; 0x34
 8002608:	e7c0      	b.n	800258c <__sflush_r+0x1c>
 800260a:	2301      	movs	r3, #1
 800260c:	4628      	mov	r0, r5
 800260e:	47b0      	blx	r6
 8002610:	1c41      	adds	r1, r0, #1
 8002612:	d1c8      	bne.n	80025a6 <__sflush_r+0x36>
 8002614:	682b      	ldr	r3, [r5, #0]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d0c5      	beq.n	80025a6 <__sflush_r+0x36>
 800261a:	2b1d      	cmp	r3, #29
 800261c:	d001      	beq.n	8002622 <__sflush_r+0xb2>
 800261e:	2b16      	cmp	r3, #22
 8002620:	d101      	bne.n	8002626 <__sflush_r+0xb6>
 8002622:	602f      	str	r7, [r5, #0]
 8002624:	e7b1      	b.n	800258a <__sflush_r+0x1a>
 8002626:	89a3      	ldrh	r3, [r4, #12]
 8002628:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800262c:	81a3      	strh	r3, [r4, #12]
 800262e:	e7ad      	b.n	800258c <__sflush_r+0x1c>
 8002630:	690f      	ldr	r7, [r1, #16]
 8002632:	2f00      	cmp	r7, #0
 8002634:	d0a9      	beq.n	800258a <__sflush_r+0x1a>
 8002636:	0793      	lsls	r3, r2, #30
 8002638:	680e      	ldr	r6, [r1, #0]
 800263a:	bf08      	it	eq
 800263c:	694b      	ldreq	r3, [r1, #20]
 800263e:	600f      	str	r7, [r1, #0]
 8002640:	bf18      	it	ne
 8002642:	2300      	movne	r3, #0
 8002644:	eba6 0807 	sub.w	r8, r6, r7
 8002648:	608b      	str	r3, [r1, #8]
 800264a:	f1b8 0f00 	cmp.w	r8, #0
 800264e:	dd9c      	ble.n	800258a <__sflush_r+0x1a>
 8002650:	6a21      	ldr	r1, [r4, #32]
 8002652:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002654:	4643      	mov	r3, r8
 8002656:	463a      	mov	r2, r7
 8002658:	4628      	mov	r0, r5
 800265a:	47b0      	blx	r6
 800265c:	2800      	cmp	r0, #0
 800265e:	dc06      	bgt.n	800266e <__sflush_r+0xfe>
 8002660:	89a3      	ldrh	r3, [r4, #12]
 8002662:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002666:	81a3      	strh	r3, [r4, #12]
 8002668:	f04f 30ff 	mov.w	r0, #4294967295
 800266c:	e78e      	b.n	800258c <__sflush_r+0x1c>
 800266e:	4407      	add	r7, r0
 8002670:	eba8 0800 	sub.w	r8, r8, r0
 8002674:	e7e9      	b.n	800264a <__sflush_r+0xda>
 8002676:	bf00      	nop
 8002678:	dfbffffe 	.word	0xdfbffffe

0800267c <_fflush_r>:
 800267c:	b538      	push	{r3, r4, r5, lr}
 800267e:	690b      	ldr	r3, [r1, #16]
 8002680:	4605      	mov	r5, r0
 8002682:	460c      	mov	r4, r1
 8002684:	b913      	cbnz	r3, 800268c <_fflush_r+0x10>
 8002686:	2500      	movs	r5, #0
 8002688:	4628      	mov	r0, r5
 800268a:	bd38      	pop	{r3, r4, r5, pc}
 800268c:	b118      	cbz	r0, 8002696 <_fflush_r+0x1a>
 800268e:	6a03      	ldr	r3, [r0, #32]
 8002690:	b90b      	cbnz	r3, 8002696 <_fflush_r+0x1a>
 8002692:	f7ff f93f 	bl	8001914 <__sinit>
 8002696:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d0f3      	beq.n	8002686 <_fflush_r+0xa>
 800269e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80026a0:	07d0      	lsls	r0, r2, #31
 80026a2:	d404      	bmi.n	80026ae <_fflush_r+0x32>
 80026a4:	0599      	lsls	r1, r3, #22
 80026a6:	d402      	bmi.n	80026ae <_fflush_r+0x32>
 80026a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80026aa:	f7ff fb6c 	bl	8001d86 <__retarget_lock_acquire_recursive>
 80026ae:	4628      	mov	r0, r5
 80026b0:	4621      	mov	r1, r4
 80026b2:	f7ff ff5d 	bl	8002570 <__sflush_r>
 80026b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80026b8:	07da      	lsls	r2, r3, #31
 80026ba:	4605      	mov	r5, r0
 80026bc:	d4e4      	bmi.n	8002688 <_fflush_r+0xc>
 80026be:	89a3      	ldrh	r3, [r4, #12]
 80026c0:	059b      	lsls	r3, r3, #22
 80026c2:	d4e1      	bmi.n	8002688 <_fflush_r+0xc>
 80026c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80026c6:	f7ff fb5f 	bl	8001d88 <__retarget_lock_release_recursive>
 80026ca:	e7dd      	b.n	8002688 <_fflush_r+0xc>

080026cc <fiprintf>:
 80026cc:	b40e      	push	{r1, r2, r3}
 80026ce:	b503      	push	{r0, r1, lr}
 80026d0:	4601      	mov	r1, r0
 80026d2:	ab03      	add	r3, sp, #12
 80026d4:	4805      	ldr	r0, [pc, #20]	; (80026ec <fiprintf+0x20>)
 80026d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80026da:	6800      	ldr	r0, [r0, #0]
 80026dc:	9301      	str	r3, [sp, #4]
 80026de:	f7ff fc9d 	bl	800201c <_vfiprintf_r>
 80026e2:	b002      	add	sp, #8
 80026e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80026e8:	b003      	add	sp, #12
 80026ea:	4770      	bx	lr
 80026ec:	20000084 	.word	0x20000084

080026f0 <__swhatbuf_r>:
 80026f0:	b570      	push	{r4, r5, r6, lr}
 80026f2:	460c      	mov	r4, r1
 80026f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80026f8:	2900      	cmp	r1, #0
 80026fa:	b096      	sub	sp, #88	; 0x58
 80026fc:	4615      	mov	r5, r2
 80026fe:	461e      	mov	r6, r3
 8002700:	da0d      	bge.n	800271e <__swhatbuf_r+0x2e>
 8002702:	89a3      	ldrh	r3, [r4, #12]
 8002704:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002708:	f04f 0100 	mov.w	r1, #0
 800270c:	bf0c      	ite	eq
 800270e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8002712:	2340      	movne	r3, #64	; 0x40
 8002714:	2000      	movs	r0, #0
 8002716:	6031      	str	r1, [r6, #0]
 8002718:	602b      	str	r3, [r5, #0]
 800271a:	b016      	add	sp, #88	; 0x58
 800271c:	bd70      	pop	{r4, r5, r6, pc}
 800271e:	466a      	mov	r2, sp
 8002720:	f000 f920 	bl	8002964 <_fstat_r>
 8002724:	2800      	cmp	r0, #0
 8002726:	dbec      	blt.n	8002702 <__swhatbuf_r+0x12>
 8002728:	9901      	ldr	r1, [sp, #4]
 800272a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800272e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8002732:	4259      	negs	r1, r3
 8002734:	4159      	adcs	r1, r3
 8002736:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800273a:	e7eb      	b.n	8002714 <__swhatbuf_r+0x24>

0800273c <__smakebuf_r>:
 800273c:	898b      	ldrh	r3, [r1, #12]
 800273e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002740:	079d      	lsls	r5, r3, #30
 8002742:	4606      	mov	r6, r0
 8002744:	460c      	mov	r4, r1
 8002746:	d507      	bpl.n	8002758 <__smakebuf_r+0x1c>
 8002748:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800274c:	6023      	str	r3, [r4, #0]
 800274e:	6123      	str	r3, [r4, #16]
 8002750:	2301      	movs	r3, #1
 8002752:	6163      	str	r3, [r4, #20]
 8002754:	b002      	add	sp, #8
 8002756:	bd70      	pop	{r4, r5, r6, pc}
 8002758:	ab01      	add	r3, sp, #4
 800275a:	466a      	mov	r2, sp
 800275c:	f7ff ffc8 	bl	80026f0 <__swhatbuf_r>
 8002760:	9900      	ldr	r1, [sp, #0]
 8002762:	4605      	mov	r5, r0
 8002764:	4630      	mov	r0, r6
 8002766:	f7ff fba3 	bl	8001eb0 <_malloc_r>
 800276a:	b948      	cbnz	r0, 8002780 <__smakebuf_r+0x44>
 800276c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002770:	059a      	lsls	r2, r3, #22
 8002772:	d4ef      	bmi.n	8002754 <__smakebuf_r+0x18>
 8002774:	f023 0303 	bic.w	r3, r3, #3
 8002778:	f043 0302 	orr.w	r3, r3, #2
 800277c:	81a3      	strh	r3, [r4, #12]
 800277e:	e7e3      	b.n	8002748 <__smakebuf_r+0xc>
 8002780:	89a3      	ldrh	r3, [r4, #12]
 8002782:	6020      	str	r0, [r4, #0]
 8002784:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002788:	81a3      	strh	r3, [r4, #12]
 800278a:	9b00      	ldr	r3, [sp, #0]
 800278c:	6163      	str	r3, [r4, #20]
 800278e:	9b01      	ldr	r3, [sp, #4]
 8002790:	6120      	str	r0, [r4, #16]
 8002792:	b15b      	cbz	r3, 80027ac <__smakebuf_r+0x70>
 8002794:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002798:	4630      	mov	r0, r6
 800279a:	f000 f8f5 	bl	8002988 <_isatty_r>
 800279e:	b128      	cbz	r0, 80027ac <__smakebuf_r+0x70>
 80027a0:	89a3      	ldrh	r3, [r4, #12]
 80027a2:	f023 0303 	bic.w	r3, r3, #3
 80027a6:	f043 0301 	orr.w	r3, r3, #1
 80027aa:	81a3      	strh	r3, [r4, #12]
 80027ac:	89a3      	ldrh	r3, [r4, #12]
 80027ae:	431d      	orrs	r5, r3
 80027b0:	81a5      	strh	r5, [r4, #12]
 80027b2:	e7cf      	b.n	8002754 <__smakebuf_r+0x18>

080027b4 <_putc_r>:
 80027b4:	b570      	push	{r4, r5, r6, lr}
 80027b6:	460d      	mov	r5, r1
 80027b8:	4614      	mov	r4, r2
 80027ba:	4606      	mov	r6, r0
 80027bc:	b118      	cbz	r0, 80027c6 <_putc_r+0x12>
 80027be:	6a03      	ldr	r3, [r0, #32]
 80027c0:	b90b      	cbnz	r3, 80027c6 <_putc_r+0x12>
 80027c2:	f7ff f8a7 	bl	8001914 <__sinit>
 80027c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80027c8:	07d8      	lsls	r0, r3, #31
 80027ca:	d405      	bmi.n	80027d8 <_putc_r+0x24>
 80027cc:	89a3      	ldrh	r3, [r4, #12]
 80027ce:	0599      	lsls	r1, r3, #22
 80027d0:	d402      	bmi.n	80027d8 <_putc_r+0x24>
 80027d2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80027d4:	f7ff fad7 	bl	8001d86 <__retarget_lock_acquire_recursive>
 80027d8:	68a3      	ldr	r3, [r4, #8]
 80027da:	3b01      	subs	r3, #1
 80027dc:	2b00      	cmp	r3, #0
 80027de:	60a3      	str	r3, [r4, #8]
 80027e0:	da05      	bge.n	80027ee <_putc_r+0x3a>
 80027e2:	69a2      	ldr	r2, [r4, #24]
 80027e4:	4293      	cmp	r3, r2
 80027e6:	db12      	blt.n	800280e <_putc_r+0x5a>
 80027e8:	b2eb      	uxtb	r3, r5
 80027ea:	2b0a      	cmp	r3, #10
 80027ec:	d00f      	beq.n	800280e <_putc_r+0x5a>
 80027ee:	6823      	ldr	r3, [r4, #0]
 80027f0:	1c5a      	adds	r2, r3, #1
 80027f2:	6022      	str	r2, [r4, #0]
 80027f4:	701d      	strb	r5, [r3, #0]
 80027f6:	b2ed      	uxtb	r5, r5
 80027f8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80027fa:	07da      	lsls	r2, r3, #31
 80027fc:	d405      	bmi.n	800280a <_putc_r+0x56>
 80027fe:	89a3      	ldrh	r3, [r4, #12]
 8002800:	059b      	lsls	r3, r3, #22
 8002802:	d402      	bmi.n	800280a <_putc_r+0x56>
 8002804:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002806:	f7ff fabf 	bl	8001d88 <__retarget_lock_release_recursive>
 800280a:	4628      	mov	r0, r5
 800280c:	bd70      	pop	{r4, r5, r6, pc}
 800280e:	4629      	mov	r1, r5
 8002810:	4622      	mov	r2, r4
 8002812:	4630      	mov	r0, r6
 8002814:	f000 f802 	bl	800281c <__swbuf_r>
 8002818:	4605      	mov	r5, r0
 800281a:	e7ed      	b.n	80027f8 <_putc_r+0x44>

0800281c <__swbuf_r>:
 800281c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800281e:	460e      	mov	r6, r1
 8002820:	4614      	mov	r4, r2
 8002822:	4605      	mov	r5, r0
 8002824:	b118      	cbz	r0, 800282e <__swbuf_r+0x12>
 8002826:	6a03      	ldr	r3, [r0, #32]
 8002828:	b90b      	cbnz	r3, 800282e <__swbuf_r+0x12>
 800282a:	f7ff f873 	bl	8001914 <__sinit>
 800282e:	69a3      	ldr	r3, [r4, #24]
 8002830:	60a3      	str	r3, [r4, #8]
 8002832:	89a3      	ldrh	r3, [r4, #12]
 8002834:	071a      	lsls	r2, r3, #28
 8002836:	d525      	bpl.n	8002884 <__swbuf_r+0x68>
 8002838:	6923      	ldr	r3, [r4, #16]
 800283a:	b31b      	cbz	r3, 8002884 <__swbuf_r+0x68>
 800283c:	6823      	ldr	r3, [r4, #0]
 800283e:	6922      	ldr	r2, [r4, #16]
 8002840:	1a98      	subs	r0, r3, r2
 8002842:	6963      	ldr	r3, [r4, #20]
 8002844:	b2f6      	uxtb	r6, r6
 8002846:	4283      	cmp	r3, r0
 8002848:	4637      	mov	r7, r6
 800284a:	dc04      	bgt.n	8002856 <__swbuf_r+0x3a>
 800284c:	4621      	mov	r1, r4
 800284e:	4628      	mov	r0, r5
 8002850:	f7ff ff14 	bl	800267c <_fflush_r>
 8002854:	b9e0      	cbnz	r0, 8002890 <__swbuf_r+0x74>
 8002856:	68a3      	ldr	r3, [r4, #8]
 8002858:	3b01      	subs	r3, #1
 800285a:	60a3      	str	r3, [r4, #8]
 800285c:	6823      	ldr	r3, [r4, #0]
 800285e:	1c5a      	adds	r2, r3, #1
 8002860:	6022      	str	r2, [r4, #0]
 8002862:	701e      	strb	r6, [r3, #0]
 8002864:	6962      	ldr	r2, [r4, #20]
 8002866:	1c43      	adds	r3, r0, #1
 8002868:	429a      	cmp	r2, r3
 800286a:	d004      	beq.n	8002876 <__swbuf_r+0x5a>
 800286c:	89a3      	ldrh	r3, [r4, #12]
 800286e:	07db      	lsls	r3, r3, #31
 8002870:	d506      	bpl.n	8002880 <__swbuf_r+0x64>
 8002872:	2e0a      	cmp	r6, #10
 8002874:	d104      	bne.n	8002880 <__swbuf_r+0x64>
 8002876:	4621      	mov	r1, r4
 8002878:	4628      	mov	r0, r5
 800287a:	f7ff feff 	bl	800267c <_fflush_r>
 800287e:	b938      	cbnz	r0, 8002890 <__swbuf_r+0x74>
 8002880:	4638      	mov	r0, r7
 8002882:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002884:	4621      	mov	r1, r4
 8002886:	4628      	mov	r0, r5
 8002888:	f000 f806 	bl	8002898 <__swsetup_r>
 800288c:	2800      	cmp	r0, #0
 800288e:	d0d5      	beq.n	800283c <__swbuf_r+0x20>
 8002890:	f04f 37ff 	mov.w	r7, #4294967295
 8002894:	e7f4      	b.n	8002880 <__swbuf_r+0x64>
	...

08002898 <__swsetup_r>:
 8002898:	b538      	push	{r3, r4, r5, lr}
 800289a:	4b2a      	ldr	r3, [pc, #168]	; (8002944 <__swsetup_r+0xac>)
 800289c:	4605      	mov	r5, r0
 800289e:	6818      	ldr	r0, [r3, #0]
 80028a0:	460c      	mov	r4, r1
 80028a2:	b118      	cbz	r0, 80028ac <__swsetup_r+0x14>
 80028a4:	6a03      	ldr	r3, [r0, #32]
 80028a6:	b90b      	cbnz	r3, 80028ac <__swsetup_r+0x14>
 80028a8:	f7ff f834 	bl	8001914 <__sinit>
 80028ac:	89a3      	ldrh	r3, [r4, #12]
 80028ae:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80028b2:	0718      	lsls	r0, r3, #28
 80028b4:	d422      	bmi.n	80028fc <__swsetup_r+0x64>
 80028b6:	06d9      	lsls	r1, r3, #27
 80028b8:	d407      	bmi.n	80028ca <__swsetup_r+0x32>
 80028ba:	2309      	movs	r3, #9
 80028bc:	602b      	str	r3, [r5, #0]
 80028be:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80028c2:	81a3      	strh	r3, [r4, #12]
 80028c4:	f04f 30ff 	mov.w	r0, #4294967295
 80028c8:	e034      	b.n	8002934 <__swsetup_r+0x9c>
 80028ca:	0758      	lsls	r0, r3, #29
 80028cc:	d512      	bpl.n	80028f4 <__swsetup_r+0x5c>
 80028ce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80028d0:	b141      	cbz	r1, 80028e4 <__swsetup_r+0x4c>
 80028d2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80028d6:	4299      	cmp	r1, r3
 80028d8:	d002      	beq.n	80028e0 <__swsetup_r+0x48>
 80028da:	4628      	mov	r0, r5
 80028dc:	f7ff fa74 	bl	8001dc8 <_free_r>
 80028e0:	2300      	movs	r3, #0
 80028e2:	6363      	str	r3, [r4, #52]	; 0x34
 80028e4:	89a3      	ldrh	r3, [r4, #12]
 80028e6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80028ea:	81a3      	strh	r3, [r4, #12]
 80028ec:	2300      	movs	r3, #0
 80028ee:	6063      	str	r3, [r4, #4]
 80028f0:	6923      	ldr	r3, [r4, #16]
 80028f2:	6023      	str	r3, [r4, #0]
 80028f4:	89a3      	ldrh	r3, [r4, #12]
 80028f6:	f043 0308 	orr.w	r3, r3, #8
 80028fa:	81a3      	strh	r3, [r4, #12]
 80028fc:	6923      	ldr	r3, [r4, #16]
 80028fe:	b94b      	cbnz	r3, 8002914 <__swsetup_r+0x7c>
 8002900:	89a3      	ldrh	r3, [r4, #12]
 8002902:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002906:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800290a:	d003      	beq.n	8002914 <__swsetup_r+0x7c>
 800290c:	4621      	mov	r1, r4
 800290e:	4628      	mov	r0, r5
 8002910:	f7ff ff14 	bl	800273c <__smakebuf_r>
 8002914:	89a0      	ldrh	r0, [r4, #12]
 8002916:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800291a:	f010 0301 	ands.w	r3, r0, #1
 800291e:	d00a      	beq.n	8002936 <__swsetup_r+0x9e>
 8002920:	2300      	movs	r3, #0
 8002922:	60a3      	str	r3, [r4, #8]
 8002924:	6963      	ldr	r3, [r4, #20]
 8002926:	425b      	negs	r3, r3
 8002928:	61a3      	str	r3, [r4, #24]
 800292a:	6923      	ldr	r3, [r4, #16]
 800292c:	b943      	cbnz	r3, 8002940 <__swsetup_r+0xa8>
 800292e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002932:	d1c4      	bne.n	80028be <__swsetup_r+0x26>
 8002934:	bd38      	pop	{r3, r4, r5, pc}
 8002936:	0781      	lsls	r1, r0, #30
 8002938:	bf58      	it	pl
 800293a:	6963      	ldrpl	r3, [r4, #20]
 800293c:	60a3      	str	r3, [r4, #8]
 800293e:	e7f4      	b.n	800292a <__swsetup_r+0x92>
 8002940:	2000      	movs	r0, #0
 8002942:	e7f7      	b.n	8002934 <__swsetup_r+0x9c>
 8002944:	20000084 	.word	0x20000084

08002948 <strchr>:
 8002948:	b2c9      	uxtb	r1, r1
 800294a:	4603      	mov	r3, r0
 800294c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002950:	b11a      	cbz	r2, 800295a <strchr+0x12>
 8002952:	428a      	cmp	r2, r1
 8002954:	d1f9      	bne.n	800294a <strchr+0x2>
 8002956:	4618      	mov	r0, r3
 8002958:	4770      	bx	lr
 800295a:	2900      	cmp	r1, #0
 800295c:	bf18      	it	ne
 800295e:	2300      	movne	r3, #0
 8002960:	e7f9      	b.n	8002956 <strchr+0xe>
	...

08002964 <_fstat_r>:
 8002964:	b538      	push	{r3, r4, r5, lr}
 8002966:	4d07      	ldr	r5, [pc, #28]	; (8002984 <_fstat_r+0x20>)
 8002968:	2300      	movs	r3, #0
 800296a:	4604      	mov	r4, r0
 800296c:	4608      	mov	r0, r1
 800296e:	4611      	mov	r1, r2
 8002970:	602b      	str	r3, [r5, #0]
 8002972:	f7fe fda1 	bl	80014b8 <_fstat>
 8002976:	1c43      	adds	r3, r0, #1
 8002978:	d102      	bne.n	8002980 <_fstat_r+0x1c>
 800297a:	682b      	ldr	r3, [r5, #0]
 800297c:	b103      	cbz	r3, 8002980 <_fstat_r+0x1c>
 800297e:	6023      	str	r3, [r4, #0]
 8002980:	bd38      	pop	{r3, r4, r5, pc}
 8002982:	bf00      	nop
 8002984:	200002f0 	.word	0x200002f0

08002988 <_isatty_r>:
 8002988:	b538      	push	{r3, r4, r5, lr}
 800298a:	4d06      	ldr	r5, [pc, #24]	; (80029a4 <_isatty_r+0x1c>)
 800298c:	2300      	movs	r3, #0
 800298e:	4604      	mov	r4, r0
 8002990:	4608      	mov	r0, r1
 8002992:	602b      	str	r3, [r5, #0]
 8002994:	f7fe fda0 	bl	80014d8 <_isatty>
 8002998:	1c43      	adds	r3, r0, #1
 800299a:	d102      	bne.n	80029a2 <_isatty_r+0x1a>
 800299c:	682b      	ldr	r3, [r5, #0]
 800299e:	b103      	cbz	r3, 80029a2 <_isatty_r+0x1a>
 80029a0:	6023      	str	r3, [r4, #0]
 80029a2:	bd38      	pop	{r3, r4, r5, pc}
 80029a4:	200002f0 	.word	0x200002f0

080029a8 <_sbrk_r>:
 80029a8:	b538      	push	{r3, r4, r5, lr}
 80029aa:	4d06      	ldr	r5, [pc, #24]	; (80029c4 <_sbrk_r+0x1c>)
 80029ac:	2300      	movs	r3, #0
 80029ae:	4604      	mov	r4, r0
 80029b0:	4608      	mov	r0, r1
 80029b2:	602b      	str	r3, [r5, #0]
 80029b4:	f7fe fda8 	bl	8001508 <_sbrk>
 80029b8:	1c43      	adds	r3, r0, #1
 80029ba:	d102      	bne.n	80029c2 <_sbrk_r+0x1a>
 80029bc:	682b      	ldr	r3, [r5, #0]
 80029be:	b103      	cbz	r3, 80029c2 <_sbrk_r+0x1a>
 80029c0:	6023      	str	r3, [r4, #0]
 80029c2:	bd38      	pop	{r3, r4, r5, pc}
 80029c4:	200002f0 	.word	0x200002f0

080029c8 <abort>:
 80029c8:	b508      	push	{r3, lr}
 80029ca:	2006      	movs	r0, #6
 80029cc:	f000 f82c 	bl	8002a28 <raise>
 80029d0:	2001      	movs	r0, #1
 80029d2:	f7fe fd3e 	bl	8001452 <_exit>

080029d6 <_raise_r>:
 80029d6:	291f      	cmp	r1, #31
 80029d8:	b538      	push	{r3, r4, r5, lr}
 80029da:	4604      	mov	r4, r0
 80029dc:	460d      	mov	r5, r1
 80029de:	d904      	bls.n	80029ea <_raise_r+0x14>
 80029e0:	2316      	movs	r3, #22
 80029e2:	6003      	str	r3, [r0, #0]
 80029e4:	f04f 30ff 	mov.w	r0, #4294967295
 80029e8:	bd38      	pop	{r3, r4, r5, pc}
 80029ea:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80029ec:	b112      	cbz	r2, 80029f4 <_raise_r+0x1e>
 80029ee:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80029f2:	b94b      	cbnz	r3, 8002a08 <_raise_r+0x32>
 80029f4:	4620      	mov	r0, r4
 80029f6:	f000 f831 	bl	8002a5c <_getpid_r>
 80029fa:	462a      	mov	r2, r5
 80029fc:	4601      	mov	r1, r0
 80029fe:	4620      	mov	r0, r4
 8002a00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002a04:	f000 b818 	b.w	8002a38 <_kill_r>
 8002a08:	2b01      	cmp	r3, #1
 8002a0a:	d00a      	beq.n	8002a22 <_raise_r+0x4c>
 8002a0c:	1c59      	adds	r1, r3, #1
 8002a0e:	d103      	bne.n	8002a18 <_raise_r+0x42>
 8002a10:	2316      	movs	r3, #22
 8002a12:	6003      	str	r3, [r0, #0]
 8002a14:	2001      	movs	r0, #1
 8002a16:	e7e7      	b.n	80029e8 <_raise_r+0x12>
 8002a18:	2400      	movs	r4, #0
 8002a1a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8002a1e:	4628      	mov	r0, r5
 8002a20:	4798      	blx	r3
 8002a22:	2000      	movs	r0, #0
 8002a24:	e7e0      	b.n	80029e8 <_raise_r+0x12>
	...

08002a28 <raise>:
 8002a28:	4b02      	ldr	r3, [pc, #8]	; (8002a34 <raise+0xc>)
 8002a2a:	4601      	mov	r1, r0
 8002a2c:	6818      	ldr	r0, [r3, #0]
 8002a2e:	f7ff bfd2 	b.w	80029d6 <_raise_r>
 8002a32:	bf00      	nop
 8002a34:	20000084 	.word	0x20000084

08002a38 <_kill_r>:
 8002a38:	b538      	push	{r3, r4, r5, lr}
 8002a3a:	4d07      	ldr	r5, [pc, #28]	; (8002a58 <_kill_r+0x20>)
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	4604      	mov	r4, r0
 8002a40:	4608      	mov	r0, r1
 8002a42:	4611      	mov	r1, r2
 8002a44:	602b      	str	r3, [r5, #0]
 8002a46:	f7fe fcf4 	bl	8001432 <_kill>
 8002a4a:	1c43      	adds	r3, r0, #1
 8002a4c:	d102      	bne.n	8002a54 <_kill_r+0x1c>
 8002a4e:	682b      	ldr	r3, [r5, #0]
 8002a50:	b103      	cbz	r3, 8002a54 <_kill_r+0x1c>
 8002a52:	6023      	str	r3, [r4, #0]
 8002a54:	bd38      	pop	{r3, r4, r5, pc}
 8002a56:	bf00      	nop
 8002a58:	200002f0 	.word	0x200002f0

08002a5c <_getpid_r>:
 8002a5c:	f7fe bce1 	b.w	8001422 <_getpid>

08002a60 <_init>:
 8002a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a62:	bf00      	nop
 8002a64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a66:	bc08      	pop	{r3}
 8002a68:	469e      	mov	lr, r3
 8002a6a:	4770      	bx	lr

08002a6c <_fini>:
 8002a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a6e:	bf00      	nop
 8002a70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a72:	bc08      	pop	{r3}
 8002a74:	469e      	mov	lr, r3
 8002a76:	4770      	bx	lr
