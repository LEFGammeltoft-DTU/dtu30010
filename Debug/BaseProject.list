
BaseProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001fa0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000168  08002130  08002130  00012130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002298  08002298  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  08002298  08002298  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002298  08002298  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002298  08002298  00012298  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800229c  0800229c  0001229c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  080022a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000270  20000088  08002328  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002f8  08002328  000202f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00003cff  00000000  00000000  000200fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000d13  00000000  00000000  00023dfa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000510  00000000  00000000  00024b10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000003ae  00000000  00000000  00025020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000337d  00000000  00000000  000253ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00004f33  00000000  00000000  0002874b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0005a43f  00000000  00000000  0002d67e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001d24  00000000  00000000  00087ac0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000044  00000000  00000000  000897e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08002118 	.word	0x08002118

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	08002118 	.word	0x08002118

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <RCC_GetClocksFreq>:
  *           configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000280:	b480      	push	{r7}
 8000282:	b08b      	sub	sp, #44	; 0x2c
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0, presc = 0, pllclk = 0;
 8000288:	2300      	movs	r3, #0
 800028a:	623b      	str	r3, [r7, #32]
 800028c:	2300      	movs	r3, #0
 800028e:	61fb      	str	r3, [r7, #28]
 8000290:	2300      	movs	r3, #0
 8000292:	61bb      	str	r3, [r7, #24]
 8000294:	2300      	movs	r3, #0
 8000296:	617b      	str	r3, [r7, #20]
 8000298:	2300      	movs	r3, #0
 800029a:	613b      	str	r3, [r7, #16]
 800029c:	2300      	movs	r3, #0
 800029e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t apb2presc = 0, ahbpresc = 0;
 80002a0:	2300      	movs	r3, #0
 80002a2:	60fb      	str	r3, [r7, #12]
 80002a4:	2300      	movs	r3, #0
 80002a6:	60bb      	str	r3, [r7, #8]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80002a8:	4b8b      	ldr	r3, [pc, #556]	; (80004d8 <RCC_GetClocksFreq+0x258>)
 80002aa:	685b      	ldr	r3, [r3, #4]
 80002ac:	f003 030c 	and.w	r3, r3, #12
 80002b0:	623b      	str	r3, [r7, #32]
  
  switch (tmp)
 80002b2:	6a3b      	ldr	r3, [r7, #32]
 80002b4:	2b08      	cmp	r3, #8
 80002b6:	d011      	beq.n	80002dc <RCC_GetClocksFreq+0x5c>
 80002b8:	6a3b      	ldr	r3, [r7, #32]
 80002ba:	2b08      	cmp	r3, #8
 80002bc:	d837      	bhi.n	800032e <RCC_GetClocksFreq+0xae>
 80002be:	6a3b      	ldr	r3, [r7, #32]
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d003      	beq.n	80002cc <RCC_GetClocksFreq+0x4c>
 80002c4:	6a3b      	ldr	r3, [r7, #32]
 80002c6:	2b04      	cmp	r3, #4
 80002c8:	d004      	beq.n	80002d4 <RCC_GetClocksFreq+0x54>
 80002ca:	e030      	b.n	800032e <RCC_GetClocksFreq+0xae>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	4a83      	ldr	r2, [pc, #524]	; (80004dc <RCC_GetClocksFreq+0x25c>)
 80002d0:	601a      	str	r2, [r3, #0]
      break;
 80002d2:	e030      	b.n	8000336 <RCC_GetClocksFreq+0xb6>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	4a81      	ldr	r2, [pc, #516]	; (80004dc <RCC_GetClocksFreq+0x25c>)
 80002d8:	601a      	str	r2, [r3, #0]
      break;
 80002da:	e02c      	b.n	8000336 <RCC_GetClocksFreq+0xb6>
    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 80002dc:	4b7e      	ldr	r3, [pc, #504]	; (80004d8 <RCC_GetClocksFreq+0x258>)
 80002de:	685b      	ldr	r3, [r3, #4]
 80002e0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80002e4:	61fb      	str	r3, [r7, #28]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 80002e6:	4b7c      	ldr	r3, [pc, #496]	; (80004d8 <RCC_GetClocksFreq+0x258>)
 80002e8:	685b      	ldr	r3, [r3, #4]
 80002ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80002ee:	61bb      	str	r3, [r7, #24]
      pllmull = ( pllmull >> 18) + 2;
 80002f0:	69fb      	ldr	r3, [r7, #28]
 80002f2:	0c9b      	lsrs	r3, r3, #18
 80002f4:	3302      	adds	r3, #2
 80002f6:	61fb      	str	r3, [r7, #28]
      
      if (pllsource == 0x00)
 80002f8:	69bb      	ldr	r3, [r7, #24]
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d105      	bne.n	800030a <RCC_GetClocksFreq+0x8a>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        pllclk = (HSI_VALUE >> 1) * pllmull;
 80002fe:	69fb      	ldr	r3, [r7, #28]
 8000300:	4a77      	ldr	r2, [pc, #476]	; (80004e0 <RCC_GetClocksFreq+0x260>)
 8000302:	fb02 f303 	mul.w	r3, r2, r3
 8000306:	627b      	str	r3, [r7, #36]	; 0x24
 8000308:	e00d      	b.n	8000326 <RCC_GetClocksFreq+0xa6>
      }
      else
      {
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 800030a:	4b73      	ldr	r3, [pc, #460]	; (80004d8 <RCC_GetClocksFreq+0x258>)
 800030c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800030e:	f003 030f 	and.w	r3, r3, #15
 8000312:	3301      	adds	r3, #1
 8000314:	617b      	str	r3, [r7, #20]
        /* HSE oscillator clock selected as PREDIV1 clock entry */
        pllclk = (HSE_VALUE / prediv1factor) * pllmull; 
 8000316:	4a71      	ldr	r2, [pc, #452]	; (80004dc <RCC_GetClocksFreq+0x25c>)
 8000318:	697b      	ldr	r3, [r7, #20]
 800031a:	fbb2 f2f3 	udiv	r2, r2, r3
 800031e:	69fb      	ldr	r3, [r7, #28]
 8000320:	fb02 f303 	mul.w	r3, r2, r3
 8000324:	627b      	str	r3, [r7, #36]	; 0x24
      }
      RCC_Clocks->SYSCLK_Frequency = pllclk;      
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800032a:	601a      	str	r2, [r3, #0]
      break;
 800032c:	e003      	b.n	8000336 <RCC_GetClocksFreq+0xb6>
    default: /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	4a6a      	ldr	r2, [pc, #424]	; (80004dc <RCC_GetClocksFreq+0x25c>)
 8000332:	601a      	str	r2, [r3, #0]
      break;
 8000334:	bf00      	nop
  }
    /* Compute HCLK, PCLK clocks frequencies -----------------------------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8000336:	4b68      	ldr	r3, [pc, #416]	; (80004d8 <RCC_GetClocksFreq+0x258>)
 8000338:	685b      	ldr	r3, [r3, #4]
 800033a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800033e:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 8000340:	6a3b      	ldr	r3, [r7, #32]
 8000342:	091b      	lsrs	r3, r3, #4
 8000344:	623b      	str	r3, [r7, #32]
  ahbpresc = APBAHBPrescTable[tmp]; 
 8000346:	4a67      	ldr	r2, [pc, #412]	; (80004e4 <RCC_GetClocksFreq+0x264>)
 8000348:	6a3b      	ldr	r3, [r7, #32]
 800034a:	4413      	add	r3, r2
 800034c:	781b      	ldrb	r3, [r3, #0]
 800034e:	b2db      	uxtb	r3, r3
 8000350:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> ahbpresc;
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	681a      	ldr	r2, [r3, #0]
 8000356:	68bb      	ldr	r3, [r7, #8]
 8000358:	40da      	lsrs	r2, r3
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 800035e:	4b5e      	ldr	r3, [pc, #376]	; (80004d8 <RCC_GetClocksFreq+0x258>)
 8000360:	685b      	ldr	r3, [r3, #4]
 8000362:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000366:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 8;
 8000368:	6a3b      	ldr	r3, [r7, #32]
 800036a:	0a1b      	lsrs	r3, r3, #8
 800036c:	623b      	str	r3, [r7, #32]
  presc = APBAHBPrescTable[tmp];
 800036e:	4a5d      	ldr	r2, [pc, #372]	; (80004e4 <RCC_GetClocksFreq+0x264>)
 8000370:	6a3b      	ldr	r3, [r7, #32]
 8000372:	4413      	add	r3, r2
 8000374:	781b      	ldrb	r3, [r3, #0]
 8000376:	b2db      	uxtb	r3, r3
 8000378:	613b      	str	r3, [r7, #16]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	685a      	ldr	r2, [r3, #4]
 800037e:	693b      	ldr	r3, [r7, #16]
 8000380:	40da      	lsrs	r2, r3
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	609a      	str	r2, [r3, #8]
  
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8000386:	4b54      	ldr	r3, [pc, #336]	; (80004d8 <RCC_GetClocksFreq+0x258>)
 8000388:	685b      	ldr	r3, [r3, #4]
 800038a:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800038e:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 11;
 8000390:	6a3b      	ldr	r3, [r7, #32]
 8000392:	0adb      	lsrs	r3, r3, #11
 8000394:	623b      	str	r3, [r7, #32]
  apb2presc = APBAHBPrescTable[tmp];
 8000396:	4a53      	ldr	r2, [pc, #332]	; (80004e4 <RCC_GetClocksFreq+0x264>)
 8000398:	6a3b      	ldr	r3, [r7, #32]
 800039a:	4413      	add	r3, r2
 800039c:	781b      	ldrb	r3, [r3, #0]
 800039e:	b2db      	uxtb	r3, r3
 80003a0:	60fb      	str	r3, [r7, #12]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> apb2presc;
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	685a      	ldr	r2, [r3, #4]
 80003a6:	68fb      	ldr	r3, [r7, #12]
 80003a8:	40da      	lsrs	r2, r3
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	60da      	str	r2, [r3, #12]
  
  /* Get ADC12CLK prescaler */
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE12;
 80003ae:	4b4a      	ldr	r3, [pc, #296]	; (80004d8 <RCC_GetClocksFreq+0x258>)
 80003b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80003b2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80003b6:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 80003b8:	6a3b      	ldr	r3, [r7, #32]
 80003ba:	091b      	lsrs	r3, r3, #4
 80003bc:	623b      	str	r3, [r7, #32]
  presc = ADCPrescTable[tmp];
 80003be:	4a4a      	ldr	r2, [pc, #296]	; (80004e8 <RCC_GetClocksFreq+0x268>)
 80003c0:	6a3b      	ldr	r3, [r7, #32]
 80003c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80003c6:	b29b      	uxth	r3, r3
 80003c8:	613b      	str	r3, [r7, #16]
  if ((presc & 0x10) != 0)
 80003ca:	693b      	ldr	r3, [r7, #16]
 80003cc:	f003 0310 	and.w	r3, r3, #16
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d006      	beq.n	80003e2 <RCC_GetClocksFreq+0x162>
  {
     /* ADC12CLK clock frequency is derived from PLL clock */
     RCC_Clocks->ADC12CLK_Frequency = pllclk / presc;
 80003d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80003d6:	693b      	ldr	r3, [r7, #16]
 80003d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	611a      	str	r2, [r3, #16]
 80003e0:	e003      	b.n	80003ea <RCC_GetClocksFreq+0x16a>
  }
  else
  {
   /* ADC12CLK clock frequency is AHB clock */
     RCC_Clocks->ADC12CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	681a      	ldr	r2, [r3, #0]
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	611a      	str	r2, [r3, #16]
  }
  
  /* Get ADC34CLK prescaler */
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE34;
 80003ea:	4b3b      	ldr	r3, [pc, #236]	; (80004d8 <RCC_GetClocksFreq+0x258>)
 80003ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80003ee:	f403 5378 	and.w	r3, r3, #15872	; 0x3e00
 80003f2:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 9;
 80003f4:	6a3b      	ldr	r3, [r7, #32]
 80003f6:	0a5b      	lsrs	r3, r3, #9
 80003f8:	623b      	str	r3, [r7, #32]
  presc = ADCPrescTable[tmp];
 80003fa:	4a3b      	ldr	r2, [pc, #236]	; (80004e8 <RCC_GetClocksFreq+0x268>)
 80003fc:	6a3b      	ldr	r3, [r7, #32]
 80003fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000402:	b29b      	uxth	r3, r3
 8000404:	613b      	str	r3, [r7, #16]
  if ((presc & 0x10) != 0)
 8000406:	693b      	ldr	r3, [r7, #16]
 8000408:	f003 0310 	and.w	r3, r3, #16
 800040c:	2b00      	cmp	r3, #0
 800040e:	d006      	beq.n	800041e <RCC_GetClocksFreq+0x19e>
  {
     /* ADC34CLK clock frequency is derived from PLL clock */
     RCC_Clocks->ADC34CLK_Frequency = pllclk / presc;
 8000410:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000412:	693b      	ldr	r3, [r7, #16]
 8000414:	fbb2 f2f3 	udiv	r2, r2, r3
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	615a      	str	r2, [r3, #20]
 800041c:	e003      	b.n	8000426 <RCC_GetClocksFreq+0x1a6>
  }
  else
  {
   /* ADC34CLK clock frequency is AHB clock */
     RCC_Clocks->ADC34CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	681a      	ldr	r2, [r3, #0]
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	615a      	str	r2, [r3, #20]
  }

  /* I2C1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C1SW) != RCC_CFGR3_I2C1SW)
 8000426:	4b2c      	ldr	r3, [pc, #176]	; (80004d8 <RCC_GetClocksFreq+0x258>)
 8000428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800042a:	f003 0310 	and.w	r3, r3, #16
 800042e:	2b10      	cmp	r3, #16
 8000430:	d003      	beq.n	800043a <RCC_GetClocksFreq+0x1ba>
  {
    /* I2C1 Clock is HSI Osc. */
    RCC_Clocks->I2C1CLK_Frequency = HSI_VALUE;
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	4a29      	ldr	r2, [pc, #164]	; (80004dc <RCC_GetClocksFreq+0x25c>)
 8000436:	619a      	str	r2, [r3, #24]
 8000438:	e003      	b.n	8000442 <RCC_GetClocksFreq+0x1c2>
  }
  else
  {
    /* I2C1 Clock is System Clock */
    RCC_Clocks->I2C1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	681a      	ldr	r2, [r3, #0]
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	619a      	str	r2, [r3, #24]
  }

  /* I2C2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C2SW) != RCC_CFGR3_I2C2SW)
 8000442:	4b25      	ldr	r3, [pc, #148]	; (80004d8 <RCC_GetClocksFreq+0x258>)
 8000444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000446:	f003 0320 	and.w	r3, r3, #32
 800044a:	2b20      	cmp	r3, #32
 800044c:	d003      	beq.n	8000456 <RCC_GetClocksFreq+0x1d6>
  {
    /* I2C2 Clock is HSI Osc. */
    RCC_Clocks->I2C2CLK_Frequency = HSI_VALUE;
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	4a22      	ldr	r2, [pc, #136]	; (80004dc <RCC_GetClocksFreq+0x25c>)
 8000452:	61da      	str	r2, [r3, #28]
 8000454:	e003      	b.n	800045e <RCC_GetClocksFreq+0x1de>
  }
  else
  {
    /* I2C2 Clock is System Clock */
    RCC_Clocks->I2C2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	681a      	ldr	r2, [r3, #0]
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	61da      	str	r2, [r3, #28]
  }
  
    /* TIM1CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM1SW) == RCC_CFGR3_TIM1SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 800045e:	4b1e      	ldr	r3, [pc, #120]	; (80004d8 <RCC_GetClocksFreq+0x258>)
 8000460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000462:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000466:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800046a:	d10d      	bne.n	8000488 <RCC_GetClocksFreq+0x208>
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000472:	429a      	cmp	r2, r3
 8000474:	d108      	bne.n	8000488 <RCC_GetClocksFreq+0x208>
  && (apb2presc == ahbpresc)) 
 8000476:	68fa      	ldr	r2, [r7, #12]
 8000478:	68bb      	ldr	r3, [r7, #8]
 800047a:	429a      	cmp	r2, r3
 800047c:	d104      	bne.n	8000488 <RCC_GetClocksFreq+0x208>
  {
    /* TIM1 Clock is 2 * pllclk */
    RCC_Clocks->TIM1CLK_Frequency = pllclk * 2;
 800047e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000480:	005a      	lsls	r2, r3, #1
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	621a      	str	r2, [r3, #32]
 8000486:	e003      	b.n	8000490 <RCC_GetClocksFreq+0x210>
  }
  else
  {
    /* TIM1 Clock is APB2 clock. */
    RCC_Clocks->TIM1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	68da      	ldr	r2, [r3, #12]
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	621a      	str	r2, [r3, #32]
  }

    /* TIM8CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM8SW) == RCC_CFGR3_TIM8SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 8000490:	4b11      	ldr	r3, [pc, #68]	; (80004d8 <RCC_GetClocksFreq+0x258>)
 8000492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000494:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000498:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800049c:	d10d      	bne.n	80004ba <RCC_GetClocksFreq+0x23a>
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80004a4:	429a      	cmp	r2, r3
 80004a6:	d108      	bne.n	80004ba <RCC_GetClocksFreq+0x23a>
  && (apb2presc == ahbpresc))
 80004a8:	68fa      	ldr	r2, [r7, #12]
 80004aa:	68bb      	ldr	r3, [r7, #8]
 80004ac:	429a      	cmp	r2, r3
 80004ae:	d104      	bne.n	80004ba <RCC_GetClocksFreq+0x23a>
  {
    /* TIM8 Clock is 2 * pllclk */
    RCC_Clocks->TIM8CLK_Frequency = pllclk * 2;
 80004b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004b2:	005a      	lsls	r2, r3, #1
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	625a      	str	r2, [r3, #36]	; 0x24
 80004b8:	e003      	b.n	80004c2 <RCC_GetClocksFreq+0x242>
  }
  else
  {
    /* TIM8 Clock is APB2 clock. */
    RCC_Clocks->TIM8CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	68da      	ldr	r2, [r3, #12]
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	625a      	str	r2, [r3, #36]	; 0x24
  }
  
  /* USART1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == 0x0)
 80004c2:	4b05      	ldr	r3, [pc, #20]	; (80004d8 <RCC_GetClocksFreq+0x258>)
 80004c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004c6:	f003 0303 	and.w	r3, r3, #3
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d10e      	bne.n	80004ec <RCC_GetClocksFreq+0x26c>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	68da      	ldr	r2, [r3, #12]
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	629a      	str	r2, [r3, #40]	; 0x28
 80004d6:	e028      	b.n	800052a <RCC_GetClocksFreq+0x2aa>
 80004d8:	40021000 	.word	0x40021000
 80004dc:	007a1200 	.word	0x007a1200
 80004e0:	003d0900 	.word	0x003d0900
 80004e4:	20000000 	.word	0x20000000
 80004e8:	20000010 	.word	0x20000010
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_0)
 80004ec:	4b6c      	ldr	r3, [pc, #432]	; (80006a0 <RCC_GetClocksFreq+0x420>)
 80004ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004f0:	f003 0303 	and.w	r3, r3, #3
 80004f4:	2b01      	cmp	r3, #1
 80004f6:	d104      	bne.n	8000502 <RCC_GetClocksFreq+0x282>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	681a      	ldr	r2, [r3, #0]
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	629a      	str	r2, [r3, #40]	; 0x28
 8000500:	e013      	b.n	800052a <RCC_GetClocksFreq+0x2aa>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_1)
 8000502:	4b67      	ldr	r3, [pc, #412]	; (80006a0 <RCC_GetClocksFreq+0x420>)
 8000504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000506:	f003 0303 	and.w	r3, r3, #3
 800050a:	2b02      	cmp	r3, #2
 800050c:	d104      	bne.n	8000518 <RCC_GetClocksFreq+0x298>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART1CLK_Frequency = LSE_VALUE;
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000514:	629a      	str	r2, [r3, #40]	; 0x28
 8000516:	e008      	b.n	800052a <RCC_GetClocksFreq+0x2aa>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW)
 8000518:	4b61      	ldr	r3, [pc, #388]	; (80006a0 <RCC_GetClocksFreq+0x420>)
 800051a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800051c:	f003 0303 	and.w	r3, r3, #3
 8000520:	2b03      	cmp	r3, #3
 8000522:	d102      	bne.n	800052a <RCC_GetClocksFreq+0x2aa>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART1CLK_Frequency = HSI_VALUE;
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	4a5f      	ldr	r2, [pc, #380]	; (80006a4 <RCC_GetClocksFreq+0x424>)
 8000528:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* USART2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == 0x0)
 800052a:	4b5d      	ldr	r3, [pc, #372]	; (80006a0 <RCC_GetClocksFreq+0x420>)
 800052c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800052e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000532:	2b00      	cmp	r3, #0
 8000534:	d104      	bne.n	8000540 <RCC_GetClocksFreq+0x2c0>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	689a      	ldr	r2, [r3, #8]
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	62da      	str	r2, [r3, #44]	; 0x2c
 800053e:	e021      	b.n	8000584 <RCC_GetClocksFreq+0x304>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_0)
 8000540:	4b57      	ldr	r3, [pc, #348]	; (80006a0 <RCC_GetClocksFreq+0x420>)
 8000542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000544:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000548:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800054c:	d104      	bne.n	8000558 <RCC_GetClocksFreq+0x2d8>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	681a      	ldr	r2, [r3, #0]
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	62da      	str	r2, [r3, #44]	; 0x2c
 8000556:	e015      	b.n	8000584 <RCC_GetClocksFreq+0x304>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_1)
 8000558:	4b51      	ldr	r3, [pc, #324]	; (80006a0 <RCC_GetClocksFreq+0x420>)
 800055a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800055c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000560:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000564:	d104      	bne.n	8000570 <RCC_GetClocksFreq+0x2f0>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART2CLK_Frequency = LSE_VALUE;
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800056c:	62da      	str	r2, [r3, #44]	; 0x2c
 800056e:	e009      	b.n	8000584 <RCC_GetClocksFreq+0x304>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW)
 8000570:	4b4b      	ldr	r3, [pc, #300]	; (80006a0 <RCC_GetClocksFreq+0x420>)
 8000572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000574:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000578:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800057c:	d102      	bne.n	8000584 <RCC_GetClocksFreq+0x304>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART2CLK_Frequency = HSI_VALUE;
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	4a48      	ldr	r2, [pc, #288]	; (80006a4 <RCC_GetClocksFreq+0x424>)
 8000582:	62da      	str	r2, [r3, #44]	; 0x2c
  }    

  /* USART3CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == 0x0)
 8000584:	4b46      	ldr	r3, [pc, #280]	; (80006a0 <RCC_GetClocksFreq+0x420>)
 8000586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000588:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800058c:	2b00      	cmp	r3, #0
 800058e:	d104      	bne.n	800059a <RCC_GetClocksFreq+0x31a>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	689a      	ldr	r2, [r3, #8]
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	631a      	str	r2, [r3, #48]	; 0x30
 8000598:	e021      	b.n	80005de <RCC_GetClocksFreq+0x35e>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_0)
 800059a:	4b41      	ldr	r3, [pc, #260]	; (80006a0 <RCC_GetClocksFreq+0x420>)
 800059c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800059e:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80005a2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80005a6:	d104      	bne.n	80005b2 <RCC_GetClocksFreq+0x332>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	681a      	ldr	r2, [r3, #0]
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	631a      	str	r2, [r3, #48]	; 0x30
 80005b0:	e015      	b.n	80005de <RCC_GetClocksFreq+0x35e>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_1)
 80005b2:	4b3b      	ldr	r3, [pc, #236]	; (80006a0 <RCC_GetClocksFreq+0x420>)
 80005b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b6:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80005ba:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80005be:	d104      	bne.n	80005ca <RCC_GetClocksFreq+0x34a>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART3CLK_Frequency = LSE_VALUE;
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80005c6:	631a      	str	r2, [r3, #48]	; 0x30
 80005c8:	e009      	b.n	80005de <RCC_GetClocksFreq+0x35e>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW)
 80005ca:	4b35      	ldr	r3, [pc, #212]	; (80006a0 <RCC_GetClocksFreq+0x420>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ce:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80005d2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80005d6:	d102      	bne.n	80005de <RCC_GetClocksFreq+0x35e>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART3CLK_Frequency = HSI_VALUE;
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	4a32      	ldr	r2, [pc, #200]	; (80006a4 <RCC_GetClocksFreq+0x424>)
 80005dc:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
    /* UART4CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == 0x0)
 80005de:	4b30      	ldr	r3, [pc, #192]	; (80006a0 <RCC_GetClocksFreq+0x420>)
 80005e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d104      	bne.n	80005f4 <RCC_GetClocksFreq+0x374>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	689a      	ldr	r2, [r3, #8]
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	635a      	str	r2, [r3, #52]	; 0x34
 80005f2:	e021      	b.n	8000638 <RCC_GetClocksFreq+0x3b8>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_0)
 80005f4:	4b2a      	ldr	r3, [pc, #168]	; (80006a0 <RCC_GetClocksFreq+0x420>)
 80005f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80005fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8000600:	d104      	bne.n	800060c <RCC_GetClocksFreq+0x38c>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	681a      	ldr	r2, [r3, #0]
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	635a      	str	r2, [r3, #52]	; 0x34
 800060a:	e015      	b.n	8000638 <RCC_GetClocksFreq+0x3b8>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_1)
 800060c:	4b24      	ldr	r3, [pc, #144]	; (80006a0 <RCC_GetClocksFreq+0x420>)
 800060e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000610:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8000614:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8000618:	d104      	bne.n	8000624 <RCC_GetClocksFreq+0x3a4>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->UART4CLK_Frequency = LSE_VALUE;
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000620:	635a      	str	r2, [r3, #52]	; 0x34
 8000622:	e009      	b.n	8000638 <RCC_GetClocksFreq+0x3b8>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW)
 8000624:	4b1e      	ldr	r3, [pc, #120]	; (80006a0 <RCC_GetClocksFreq+0x420>)
 8000626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000628:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800062c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8000630:	d102      	bne.n	8000638 <RCC_GetClocksFreq+0x3b8>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART4CLK_Frequency = HSI_VALUE;
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	4a1b      	ldr	r2, [pc, #108]	; (80006a4 <RCC_GetClocksFreq+0x424>)
 8000636:	635a      	str	r2, [r3, #52]	; 0x34
  }   
  
  /* UART5CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == 0x0)
 8000638:	4b19      	ldr	r3, [pc, #100]	; (80006a0 <RCC_GetClocksFreq+0x420>)
 800063a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8000640:	2b00      	cmp	r3, #0
 8000642:	d104      	bne.n	800064e <RCC_GetClocksFreq+0x3ce>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	689a      	ldr	r2, [r3, #8]
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	639a      	str	r2, [r3, #56]	; 0x38
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW)
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART5CLK_Frequency = HSI_VALUE;
  } 
}
 800064c:	e021      	b.n	8000692 <RCC_GetClocksFreq+0x412>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_0)
 800064e:	4b14      	ldr	r3, [pc, #80]	; (80006a0 <RCC_GetClocksFreq+0x420>)
 8000650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000652:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8000656:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800065a:	d104      	bne.n	8000666 <RCC_GetClocksFreq+0x3e6>
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	681a      	ldr	r2, [r3, #0]
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000664:	e015      	b.n	8000692 <RCC_GetClocksFreq+0x412>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_1)
 8000666:	4b0e      	ldr	r3, [pc, #56]	; (80006a0 <RCC_GetClocksFreq+0x420>)
 8000668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066a:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800066e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8000672:	d104      	bne.n	800067e <RCC_GetClocksFreq+0x3fe>
    RCC_Clocks->UART5CLK_Frequency = LSE_VALUE;
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800067a:	639a      	str	r2, [r3, #56]	; 0x38
}
 800067c:	e009      	b.n	8000692 <RCC_GetClocksFreq+0x412>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW)
 800067e:	4b08      	ldr	r3, [pc, #32]	; (80006a0 <RCC_GetClocksFreq+0x420>)
 8000680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000682:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8000686:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800068a:	d102      	bne.n	8000692 <RCC_GetClocksFreq+0x412>
    RCC_Clocks->UART5CLK_Frequency = HSI_VALUE;
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	4a05      	ldr	r2, [pc, #20]	; (80006a4 <RCC_GetClocksFreq+0x424>)
 8000690:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000692:	bf00      	nop
 8000694:	372c      	adds	r7, #44	; 0x2c
 8000696:	46bd      	mov	sp, r7
 8000698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop
 80006a0:	40021000 	.word	0x40021000
 80006a4:	007a1200 	.word	0x007a1200

080006a8 <USART_SendData>:
  *         following values: USART1 or USART2 or USART3 or UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 80006a8:	b480      	push	{r7}
 80006aa:	b083      	sub	sp, #12
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
 80006b0:	460b      	mov	r3, r1
 80006b2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 

  /* Transmit Data */
  USARTx->TDR = (Data & (uint16_t)0x01FF);
 80006b4:	887b      	ldrh	r3, [r7, #2]
 80006b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80006ba:	b29a      	uxth	r2, r3
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	851a      	strh	r2, [r3, #40]	; 0x28
}
 80006c0:	bf00      	nop
 80006c2:	370c      	adds	r7, #12
 80006c4:	46bd      	mov	sp, r7
 80006c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ca:	4770      	bx	lr

080006cc <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint32_t USART_IT, FunctionalState NewState)
{
 80006cc:	b480      	push	{r7}
 80006ce:	b089      	sub	sp, #36	; 0x24
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	60f8      	str	r0, [r7, #12]
 80006d4:	60b9      	str	r1, [r7, #8]
 80006d6:	4613      	mov	r3, r2
 80006d8:	71fb      	strb	r3, [r7, #7]
  uint32_t usartreg = 0, itpos = 0, itmask = 0;
 80006da:	2300      	movs	r3, #0
 80006dc:	61bb      	str	r3, [r7, #24]
 80006de:	2300      	movs	r3, #0
 80006e0:	617b      	str	r3, [r7, #20]
 80006e2:	2300      	movs	r3, #0
 80006e4:	613b      	str	r3, [r7, #16]
  uint32_t usartxbase = 0;
 80006e6:	2300      	movs	r3, #0
 80006e8:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_CONFIG_IT(USART_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  usartxbase = (uint32_t)USARTx;
 80006ea:	68fb      	ldr	r3, [r7, #12]
 80006ec:	61fb      	str	r3, [r7, #28]

  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 80006ee:	68bb      	ldr	r3, [r7, #8]
 80006f0:	b29b      	uxth	r3, r3
 80006f2:	0a1b      	lsrs	r3, r3, #8
 80006f4:	b29b      	uxth	r3, r3
 80006f6:	61bb      	str	r3, [r7, #24]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 80006f8:	68bb      	ldr	r3, [r7, #8]
 80006fa:	b2db      	uxtb	r3, r3
 80006fc:	617b      	str	r3, [r7, #20]
  itmask = (((uint32_t)0x01) << itpos);
 80006fe:	2201      	movs	r2, #1
 8000700:	697b      	ldr	r3, [r7, #20]
 8000702:	fa02 f303 	lsl.w	r3, r2, r3
 8000706:	613b      	str	r3, [r7, #16]

  if (usartreg == 0x02) /* The IT is in CR2 register */
 8000708:	69bb      	ldr	r3, [r7, #24]
 800070a:	2b02      	cmp	r3, #2
 800070c:	d103      	bne.n	8000716 <USART_ITConfig+0x4a>
  {
    usartxbase += 0x04;
 800070e:	69fb      	ldr	r3, [r7, #28]
 8000710:	3304      	adds	r3, #4
 8000712:	61fb      	str	r3, [r7, #28]
 8000714:	e005      	b.n	8000722 <USART_ITConfig+0x56>
  }
  else if (usartreg == 0x03) /* The IT is in CR3 register */
 8000716:	69bb      	ldr	r3, [r7, #24]
 8000718:	2b03      	cmp	r3, #3
 800071a:	d102      	bne.n	8000722 <USART_ITConfig+0x56>
  {
    usartxbase += 0x08;
 800071c:	69fb      	ldr	r3, [r7, #28]
 800071e:	3308      	adds	r3, #8
 8000720:	61fb      	str	r3, [r7, #28]
  }
  else /* The IT is in CR1 register */
  {
  }
  if (NewState != DISABLE)
 8000722:	79fb      	ldrb	r3, [r7, #7]
 8000724:	2b00      	cmp	r3, #0
 8000726:	d006      	beq.n	8000736 <USART_ITConfig+0x6a>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8000728:	69fb      	ldr	r3, [r7, #28]
 800072a:	6819      	ldr	r1, [r3, #0]
 800072c:	69fb      	ldr	r3, [r7, #28]
 800072e:	693a      	ldr	r2, [r7, #16]
 8000730:	430a      	orrs	r2, r1
 8000732:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 8000734:	e006      	b.n	8000744 <USART_ITConfig+0x78>
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8000736:	69fb      	ldr	r3, [r7, #28]
 8000738:	6819      	ldr	r1, [r3, #0]
 800073a:	693b      	ldr	r3, [r7, #16]
 800073c:	43da      	mvns	r2, r3
 800073e:	69fb      	ldr	r3, [r7, #28]
 8000740:	400a      	ands	r2, r1
 8000742:	601a      	str	r2, [r3, #0]
}
 8000744:	bf00      	nop
 8000746:	3724      	adds	r7, #36	; 0x24
 8000748:	46bd      	mov	sp, r7
 800074a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074e:	4770      	bx	lr

08000750 <USART_GetFlagStatus>:
  *         @arg USART_FLAG_FE:  Framing Error flag.
  *         @arg USART_FLAG_PE:  Parity Error flag.
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint32_t USART_FLAG)
{
 8000750:	b480      	push	{r7}
 8000752:	b085      	sub	sp, #20
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
 8000758:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 800075a:	2300      	movs	r3, #0
 800075c:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_FLAG(USART_FLAG));
  
  if ((USARTx->ISR & USART_FLAG) != (uint16_t)RESET)
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	69da      	ldr	r2, [r3, #28]
 8000762:	683b      	ldr	r3, [r7, #0]
 8000764:	4013      	ands	r3, r2
 8000766:	2b00      	cmp	r3, #0
 8000768:	d002      	beq.n	8000770 <USART_GetFlagStatus+0x20>
  {
    bitstatus = SET;
 800076a:	2301      	movs	r3, #1
 800076c:	73fb      	strb	r3, [r7, #15]
 800076e:	e001      	b.n	8000774 <USART_GetFlagStatus+0x24>
  }
  else
  {
    bitstatus = RESET;
 8000770:	2300      	movs	r3, #0
 8000772:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000774:	7bfb      	ldrb	r3, [r7, #15]
}
 8000776:	4618      	mov	r0, r3
 8000778:	3714      	adds	r7, #20
 800077a:	46bd      	mov	sp, r7
 800077c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000780:	4770      	bx	lr

08000782 <USART_GetITStatus>:
  *         @arg USART_IT_FE:  Framing Error interrupt.
  *         @arg USART_IT_PE:  Parity Error interrupt.
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint32_t USART_IT)
{
 8000782:	b480      	push	{r7}
 8000784:	b087      	sub	sp, #28
 8000786:	af00      	add	r7, sp, #0
 8000788:	6078      	str	r0, [r7, #4]
 800078a:	6039      	str	r1, [r7, #0]
  uint32_t bitpos = 0, itmask = 0, usartreg = 0;
 800078c:	2300      	movs	r3, #0
 800078e:	60fb      	str	r3, [r7, #12]
 8000790:	2300      	movs	r3, #0
 8000792:	617b      	str	r3, [r7, #20]
 8000794:	2300      	movs	r3, #0
 8000796:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 8000798:	2300      	movs	r3, #0
 800079a:	74fb      	strb	r3, [r7, #19]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_GET_IT(USART_IT)); 
  
  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 800079c:	683b      	ldr	r3, [r7, #0]
 800079e:	b29b      	uxth	r3, r3
 80007a0:	0a1b      	lsrs	r3, r3, #8
 80007a2:	b29b      	uxth	r3, r3
 80007a4:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 80007a6:	683b      	ldr	r3, [r7, #0]
 80007a8:	b2db      	uxtb	r3, r3
 80007aa:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 80007ac:	2201      	movs	r2, #1
 80007ae:	697b      	ldr	r3, [r7, #20]
 80007b0:	fa02 f303 	lsl.w	r3, r2, r3
 80007b4:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 80007b6:	68bb      	ldr	r3, [r7, #8]
 80007b8:	2b01      	cmp	r3, #1
 80007ba:	d105      	bne.n	80007c8 <USART_GetITStatus+0x46>
  {
    itmask &= USARTx->CR1;
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	697a      	ldr	r2, [r7, #20]
 80007c2:	4013      	ands	r3, r2
 80007c4:	617b      	str	r3, [r7, #20]
 80007c6:	e00d      	b.n	80007e4 <USART_GetITStatus+0x62>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 80007c8:	68bb      	ldr	r3, [r7, #8]
 80007ca:	2b02      	cmp	r3, #2
 80007cc:	d105      	bne.n	80007da <USART_GetITStatus+0x58>
  {
    itmask &= USARTx->CR2;
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	685b      	ldr	r3, [r3, #4]
 80007d2:	697a      	ldr	r2, [r7, #20]
 80007d4:	4013      	ands	r3, r2
 80007d6:	617b      	str	r3, [r7, #20]
 80007d8:	e004      	b.n	80007e4 <USART_GetITStatus+0x62>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	689b      	ldr	r3, [r3, #8]
 80007de:	697a      	ldr	r2, [r7, #20]
 80007e0:	4013      	ands	r3, r2
 80007e2:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x10;
 80007e4:	683b      	ldr	r3, [r7, #0]
 80007e6:	0c1b      	lsrs	r3, r3, #16
 80007e8:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 80007ea:	2201      	movs	r2, #1
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	fa02 f303 	lsl.w	r3, r2, r3
 80007f2:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->ISR;
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	69db      	ldr	r3, [r3, #28]
 80007f8:	68fa      	ldr	r2, [r7, #12]
 80007fa:	4013      	ands	r3, r2
 80007fc:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 80007fe:	697b      	ldr	r3, [r7, #20]
 8000800:	2b00      	cmp	r3, #0
 8000802:	d005      	beq.n	8000810 <USART_GetITStatus+0x8e>
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	2b00      	cmp	r3, #0
 8000808:	d002      	beq.n	8000810 <USART_GetITStatus+0x8e>
  {
    bitstatus = SET;
 800080a:	2301      	movs	r3, #1
 800080c:	74fb      	strb	r3, [r7, #19]
 800080e:	e001      	b.n	8000814 <USART_GetITStatus+0x92>
  }
  else
  {
    bitstatus = RESET;
 8000810:	2300      	movs	r3, #0
 8000812:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 8000814:	7cfb      	ldrb	r3, [r7, #19]
}
 8000816:	4618      	mov	r0, r3
 8000818:	371c      	adds	r7, #28
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr
	...

08000824 <NVIC_EnableIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000824:	b480      	push	{r7}
 8000826:	b083      	sub	sp, #12
 8000828:	af00      	add	r7, sp, #0
 800082a:	4603      	mov	r3, r0
 800082c:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 800082e:	79fb      	ldrb	r3, [r7, #7]
 8000830:	f003 031f 	and.w	r3, r3, #31
 8000834:	2201      	movs	r2, #1
 8000836:	fa02 f103 	lsl.w	r1, r2, r3
 800083a:	4a06      	ldr	r2, [pc, #24]	; (8000854 <NVIC_EnableIRQ+0x30>)
 800083c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000840:	095b      	lsrs	r3, r3, #5
 8000842:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000846:	bf00      	nop
 8000848:	370c      	adds	r7, #12
 800084a:	46bd      	mov	sp, r7
 800084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop
 8000854:	e000e100 	.word	0xe000e100

08000858 <uart_put_char>:
        UART_COUNT--;
    }
    return val;
}

void uart_put_char(uint8_t c) {
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0
 800085e:	4603      	mov	r3, r0
 8000860:	71fb      	strb	r3, [r7, #7]
    USART_SendData(USART2, (uint8_t)c);
 8000862:	79fb      	ldrb	r3, [r7, #7]
 8000864:	b29b      	uxth	r3, r3
 8000866:	4619      	mov	r1, r3
 8000868:	4807      	ldr	r0, [pc, #28]	; (8000888 <uart_put_char+0x30>)
 800086a:	f7ff ff1d 	bl	80006a8 <USART_SendData>
    while(USART_GetFlagStatus(USART2, USART_FLAG_TXE)  == RESET){}
 800086e:	bf00      	nop
 8000870:	2180      	movs	r1, #128	; 0x80
 8000872:	4805      	ldr	r0, [pc, #20]	; (8000888 <uart_put_char+0x30>)
 8000874:	f7ff ff6c 	bl	8000750 <USART_GetFlagStatus>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d0f8      	beq.n	8000870 <uart_put_char+0x18>
}
 800087e:	bf00      	nop
 8000880:	bf00      	nop
 8000882:	3708      	adds	r7, #8
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	40004400 	.word	0x40004400

0800088c <_write_r>:

int _write_r(struct _reent *r, int file, char *ptr, int len) {
 800088c:	b580      	push	{r7, lr}
 800088e:	b086      	sub	sp, #24
 8000890:	af00      	add	r7, sp, #0
 8000892:	60f8      	str	r0, [r7, #12]
 8000894:	60b9      	str	r1, [r7, #8]
 8000896:	607a      	str	r2, [r7, #4]
 8000898:	603b      	str	r3, [r7, #0]
    int n;

    for (n = 0; n < len; n++) {
 800089a:	2300      	movs	r3, #0
 800089c:	617b      	str	r3, [r7, #20]
 800089e:	e012      	b.n	80008c6 <_write_r+0x3a>
        if (ptr[n] == '\n') {
 80008a0:	697b      	ldr	r3, [r7, #20]
 80008a2:	687a      	ldr	r2, [r7, #4]
 80008a4:	4413      	add	r3, r2
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	2b0a      	cmp	r3, #10
 80008aa:	d102      	bne.n	80008b2 <_write_r+0x26>
            uart_put_char('\r');
 80008ac:	200d      	movs	r0, #13
 80008ae:	f7ff ffd3 	bl	8000858 <uart_put_char>
        }
        uart_put_char(ptr[n] & (uint16_t)0x01FF);
 80008b2:	697b      	ldr	r3, [r7, #20]
 80008b4:	687a      	ldr	r2, [r7, #4]
 80008b6:	4413      	add	r3, r2
 80008b8:	781b      	ldrb	r3, [r3, #0]
 80008ba:	4618      	mov	r0, r3
 80008bc:	f7ff ffcc 	bl	8000858 <uart_put_char>
    for (n = 0; n < len; n++) {
 80008c0:	697b      	ldr	r3, [r7, #20]
 80008c2:	3301      	adds	r3, #1
 80008c4:	617b      	str	r3, [r7, #20]
 80008c6:	697a      	ldr	r2, [r7, #20]
 80008c8:	683b      	ldr	r3, [r7, #0]
 80008ca:	429a      	cmp	r2, r3
 80008cc:	dbe8      	blt.n	80008a0 <_write_r+0x14>
    }

    return len;
 80008ce:	683b      	ldr	r3, [r7, #0]
}
 80008d0:	4618      	mov	r0, r3
 80008d2:	3718      	adds	r7, #24
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}

080008d8 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
    if(USART_GetITStatus(USART2, USART_IT_RXNE) != RESET)
 80008dc:	4915      	ldr	r1, [pc, #84]	; (8000934 <USART2_IRQHandler+0x5c>)
 80008de:	4816      	ldr	r0, [pc, #88]	; (8000938 <USART2_IRQHandler+0x60>)
 80008e0:	f7ff ff4f 	bl	8000782 <USART_GetITStatus>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d021      	beq.n	800092e <USART2_IRQHandler+0x56>
    {
        UART_BUFFER[UART_END_IDX++] = (uint8_t)(USART2->RDR & 0xFF);
 80008ea:	4b13      	ldr	r3, [pc, #76]	; (8000938 <USART2_IRQHandler+0x60>)
 80008ec:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80008ee:	b299      	uxth	r1, r3
 80008f0:	4b12      	ldr	r3, [pc, #72]	; (800093c <USART2_IRQHandler+0x64>)
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	b2db      	uxtb	r3, r3
 80008f6:	1c5a      	adds	r2, r3, #1
 80008f8:	b2d0      	uxtb	r0, r2
 80008fa:	4a10      	ldr	r2, [pc, #64]	; (800093c <USART2_IRQHandler+0x64>)
 80008fc:	7010      	strb	r0, [r2, #0]
 80008fe:	461a      	mov	r2, r3
 8000900:	b2c9      	uxtb	r1, r1
 8000902:	4b0f      	ldr	r3, [pc, #60]	; (8000940 <USART2_IRQHandler+0x68>)
 8000904:	5499      	strb	r1, [r3, r2]
        if (UART_COUNT == UART_BUFFER_LENGTH-1){
 8000906:	4b0f      	ldr	r3, [pc, #60]	; (8000944 <USART2_IRQHandler+0x6c>)
 8000908:	781b      	ldrb	r3, [r3, #0]
 800090a:	b2db      	uxtb	r3, r3
 800090c:	2bff      	cmp	r3, #255	; 0xff
 800090e:	d107      	bne.n	8000920 <USART2_IRQHandler+0x48>
            UART_START_IDX++;
 8000910:	4b0d      	ldr	r3, [pc, #52]	; (8000948 <USART2_IRQHandler+0x70>)
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	b2db      	uxtb	r3, r3
 8000916:	3301      	adds	r3, #1
 8000918:	b2da      	uxtb	r2, r3
 800091a:	4b0b      	ldr	r3, [pc, #44]	; (8000948 <USART2_IRQHandler+0x70>)
 800091c:	701a      	strb	r2, [r3, #0]
        } else {
            UART_COUNT++;
        }
    }
}
 800091e:	e006      	b.n	800092e <USART2_IRQHandler+0x56>
            UART_COUNT++;
 8000920:	4b08      	ldr	r3, [pc, #32]	; (8000944 <USART2_IRQHandler+0x6c>)
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	b2db      	uxtb	r3, r3
 8000926:	3301      	adds	r3, #1
 8000928:	b2da      	uxtb	r2, r3
 800092a:	4b06      	ldr	r3, [pc, #24]	; (8000944 <USART2_IRQHandler+0x6c>)
 800092c:	701a      	strb	r2, [r3, #0]
}
 800092e:	bf00      	nop
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	00050105 	.word	0x00050105
 8000938:	40004400 	.word	0x40004400
 800093c:	200001a4 	.word	0x200001a4
 8000940:	200000a4 	.word	0x200000a4
 8000944:	200001a6 	.word	0x200001a6
 8000948:	200001a5 	.word	0x200001a5

0800094c <uart_init>:

uint8_t uart_get_count(){
    return UART_COUNT;
}

void uart_init(uint32_t baud) {
 800094c:	b580      	push	{r7, lr}
 800094e:	b094      	sub	sp, #80	; 0x50
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
    setbuf(stdout, NULL); // Set stdout to disable line buffering
 8000954:	4b86      	ldr	r3, [pc, #536]	; (8000b70 <uart_init+0x224>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	689b      	ldr	r3, [r3, #8]
 800095a:	2100      	movs	r1, #0
 800095c:	4618      	mov	r0, r3
 800095e:	f000 fc85 	bl	800126c <setbuf>
    setbuf(stdin,  NULL); // Set stdin  to disable line buffering
 8000962:	4b83      	ldr	r3, [pc, #524]	; (8000b70 <uart_init+0x224>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	685b      	ldr	r3, [r3, #4]
 8000968:	2100      	movs	r1, #0
 800096a:	4618      	mov	r0, r3
 800096c:	f000 fc7e 	bl	800126c <setbuf>

    // Enable Clocks
    RCC->AHBENR  |= RCC_AHBPeriph_GPIOA;    // Enable Clock for GPIO Bank A
 8000970:	4b80      	ldr	r3, [pc, #512]	; (8000b74 <uart_init+0x228>)
 8000972:	695b      	ldr	r3, [r3, #20]
 8000974:	4a7f      	ldr	r2, [pc, #508]	; (8000b74 <uart_init+0x228>)
 8000976:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800097a:	6153      	str	r3, [r2, #20]
    RCC->APB1ENR |= RCC_APB1Periph_USART2;  // Enable Clock for USART2
 800097c:	4b7d      	ldr	r3, [pc, #500]	; (8000b74 <uart_init+0x228>)
 800097e:	69db      	ldr	r3, [r3, #28]
 8000980:	4a7c      	ldr	r2, [pc, #496]	; (8000b74 <uart_init+0x228>)
 8000982:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000986:	61d3      	str	r3, [r2, #28]

    // Connect pins to USART2
    GPIOA->AFR[2 >> 0x03] &= ~(0x0000000F << ((2 & 0x00000007) * 4)); // Clear alternate function for PA2
 8000988:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800098c:	6a1b      	ldr	r3, [r3, #32]
 800098e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000992:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000996:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[2 >> 0x03] |=  (0x00000007 << ((2 & 0x00000007) * 4)); // Set alternate 7 function for PA2
 8000998:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800099c:	6a1b      	ldr	r3, [r3, #32]
 800099e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80009a2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80009a6:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[3 >> 0x03] &= ~(0x0000000F << ((3 & 0x00000007) * 4)); // Clear alternate function for PA3
 80009a8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80009ac:	6a1b      	ldr	r3, [r3, #32]
 80009ae:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80009b2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80009b6:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[3 >> 0x03] |=  (0x00000007 << ((3 & 0x00000007) * 4)); // Set alternate 7 function for PA3
 80009b8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80009bc:	6a1b      	ldr	r3, [r3, #32]
 80009be:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80009c2:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 80009c6:	6213      	str	r3, [r2, #32]

    // Configure pins PA2 and PA3 for 10 MHz alternate function
    GPIOA->OSPEEDR &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear speed register
 80009c8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80009cc:	689b      	ldr	r3, [r3, #8]
 80009ce:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80009d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80009d6:	6093      	str	r3, [r2, #8]
    GPIOA->OSPEEDR |=  (0x00000001 << (2 * 2) | 0x00000001 << (3 * 2));    // set speed register (0x01 - 10 MHz, 0x02 - 2 MHz, 0x03 - 50 MHz)
 80009d8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80009dc:	689b      	ldr	r3, [r3, #8]
 80009de:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80009e2:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 80009e6:	6093      	str	r3, [r2, #8]
    GPIOA->OTYPER  &= ~(0x0001     << (2)     | 0x0001     << (3));        // Clear output type register
 80009e8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80009ec:	889b      	ldrh	r3, [r3, #4]
 80009ee:	b29b      	uxth	r3, r3
 80009f0:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80009f4:	f023 030c 	bic.w	r3, r3, #12
 80009f8:	b29b      	uxth	r3, r3
 80009fa:	8093      	strh	r3, [r2, #4]
    GPIOA->OTYPER  |=  (0x0000     << (2)     | 0x0000     << (3));        // Set output type register (0x00 - Push pull, 0x01 - Open drain)
 80009fc:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000a00:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000a04:	8892      	ldrh	r2, [r2, #4]
 8000a06:	b292      	uxth	r2, r2
 8000a08:	809a      	strh	r2, [r3, #4]
    GPIOA->MODER   &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear mode register
 8000a0a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000a14:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000a18:	6013      	str	r3, [r2, #0]
    GPIOA->MODER   |=  (0x00000002 << (2 * 2) | 0x00000002 << (3 * 2));    // Set mode register (0x00 - Input, 0x01 - Output, 0x02 - Alternate Function, 0x03 - Analog in/out)
 8000a1a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000a24:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8000a28:	6013      	str	r3, [r2, #0]
    GPIOA->PUPDR   &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear push/pull register
 8000a2a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000a2e:	68db      	ldr	r3, [r3, #12]
 8000a30:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000a34:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000a38:	60d3      	str	r3, [r2, #12]
    GPIOA->PUPDR   |=  (0x00000001 << (2 * 2) | 0x00000001 << (3 * 2));    // Set push/pull register (0x00 - No pull, 0x01 - Pull-up, 0x02 - Pull-down)
 8000a3a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000a3e:	68db      	ldr	r3, [r3, #12]
 8000a40:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000a44:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8000a48:	60d3      	str	r3, [r2, #12]

    //Configure USART2
    USART2->CR1 &= ~0x00000001; // Disable USART2
 8000a4a:	4b4b      	ldr	r3, [pc, #300]	; (8000b78 <uart_init+0x22c>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	4a4a      	ldr	r2, [pc, #296]	; (8000b78 <uart_init+0x22c>)
 8000a50:	f023 0301 	bic.w	r3, r3, #1
 8000a54:	6013      	str	r3, [r2, #0]
    USART2->CR2 &= ~0x00003000; // Clear CR2 Configuration
 8000a56:	4b48      	ldr	r3, [pc, #288]	; (8000b78 <uart_init+0x22c>)
 8000a58:	685b      	ldr	r3, [r3, #4]
 8000a5a:	4a47      	ldr	r2, [pc, #284]	; (8000b78 <uart_init+0x22c>)
 8000a5c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000a60:	6053      	str	r3, [r2, #4]
    USART2->CR2 |=  0x00000000; // Set 1 stop bits
 8000a62:	4b45      	ldr	r3, [pc, #276]	; (8000b78 <uart_init+0x22c>)
 8000a64:	4a44      	ldr	r2, [pc, #272]	; (8000b78 <uart_init+0x22c>)
 8000a66:	685b      	ldr	r3, [r3, #4]
 8000a68:	6053      	str	r3, [r2, #4]
    USART2->CR1 &= ~(0x00001000 | 0x00000400 | 0x00000200 | 0x00000008 | 0x00000004); // Clear CR1 Configuration
 8000a6a:	4b43      	ldr	r3, [pc, #268]	; (8000b78 <uart_init+0x22c>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	4a42      	ldr	r2, [pc, #264]	; (8000b78 <uart_init+0x22c>)
 8000a70:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8000a74:	f023 030c 	bic.w	r3, r3, #12
 8000a78:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000000; // Set word length to 8 bits
 8000a7a:	4b3f      	ldr	r3, [pc, #252]	; (8000b78 <uart_init+0x22c>)
 8000a7c:	4a3e      	ldr	r2, [pc, #248]	; (8000b78 <uart_init+0x22c>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000000; // Set parity bits to none
 8000a82:	4b3d      	ldr	r3, [pc, #244]	; (8000b78 <uart_init+0x22c>)
 8000a84:	4a3c      	ldr	r2, [pc, #240]	; (8000b78 <uart_init+0x22c>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000004 | 0x00000008; // Set mode to RX and TX
 8000a8a:	4b3b      	ldr	r3, [pc, #236]	; (8000b78 <uart_init+0x22c>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	4a3a      	ldr	r2, [pc, #232]	; (8000b78 <uart_init+0x22c>)
 8000a90:	f043 030c 	orr.w	r3, r3, #12
 8000a94:	6013      	str	r3, [r2, #0]
    USART2->CR3 &= ~(0x00000100 | 0x00000200); // Clear CR3 Configuration
 8000a96:	4b38      	ldr	r3, [pc, #224]	; (8000b78 <uart_init+0x22c>)
 8000a98:	689b      	ldr	r3, [r3, #8]
 8000a9a:	4a37      	ldr	r2, [pc, #220]	; (8000b78 <uart_init+0x22c>)
 8000a9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000aa0:	6093      	str	r3, [r2, #8]
    USART2->CR3 |=  0x00000000; // Set hardware flow control to none
 8000aa2:	4b35      	ldr	r3, [pc, #212]	; (8000b78 <uart_init+0x22c>)
 8000aa4:	4a34      	ldr	r2, [pc, #208]	; (8000b78 <uart_init+0x22c>)
 8000aa6:	689b      	ldr	r3, [r3, #8]
 8000aa8:	6093      	str	r3, [r2, #8]

    uint32_t divider = 0, apbclock = 0, tmpreg = 0;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000aae:	2300      	movs	r3, #0
 8000ab0:	647b      	str	r3, [r7, #68]	; 0x44
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_ClocksTypeDef RCC_ClocksStatus;
    RCC_GetClocksFreq(&RCC_ClocksStatus); // Get USART2 Clock frequency
 8000ab6:	f107 0308 	add.w	r3, r7, #8
 8000aba:	4618      	mov	r0, r3
 8000abc:	f7ff fbe0 	bl	8000280 <RCC_GetClocksFreq>
    apbclock = RCC_ClocksStatus.USART2CLK_Frequency;
 8000ac0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ac2:	647b      	str	r3, [r7, #68]	; 0x44

    if ((USART2->CR1 & 0x00008000) != 0) {
 8000ac4:	4b2c      	ldr	r3, [pc, #176]	; (8000b78 <uart_init+0x22c>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d010      	beq.n	8000af2 <uart_init+0x1a6>
      // (divider * 10) computing in case Oversampling mode is 8 Samples
      divider = (2 * apbclock) / baud;
 8000ad0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000ad2:	005a      	lsls	r2, r3, #1
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ada:	64fb      	str	r3, [r7, #76]	; 0x4c
      tmpreg  = (2 * apbclock) % baud;
 8000adc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000ade:	005b      	lsls	r3, r3, #1
 8000ae0:	687a      	ldr	r2, [r7, #4]
 8000ae2:	fbb3 f2f2 	udiv	r2, r3, r2
 8000ae6:	6879      	ldr	r1, [r7, #4]
 8000ae8:	fb01 f202 	mul.w	r2, r1, r2
 8000aec:	1a9b      	subs	r3, r3, r2
 8000aee:	64bb      	str	r3, [r7, #72]	; 0x48
 8000af0:	e00d      	b.n	8000b0e <uart_init+0x1c2>
    } else {
      // (divider * 10) computing in case Oversampling mode is 16 Samples
      divider = apbclock / baud;
 8000af2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000afa:	64fb      	str	r3, [r7, #76]	; 0x4c
      tmpreg  = apbclock % baud;
 8000afc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000afe:	687a      	ldr	r2, [r7, #4]
 8000b00:	fbb3 f2f2 	udiv	r2, r3, r2
 8000b04:	6879      	ldr	r1, [r7, #4]
 8000b06:	fb01 f202 	mul.w	r2, r1, r2
 8000b0a:	1a9b      	subs	r3, r3, r2
 8000b0c:	64bb      	str	r3, [r7, #72]	; 0x48
    }

    if (tmpreg >=  baud / 2) {
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	085b      	lsrs	r3, r3, #1
 8000b12:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000b14:	429a      	cmp	r2, r3
 8000b16:	d302      	bcc.n	8000b1e <uart_init+0x1d2>
        divider++;
 8000b18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000b1a:	3301      	adds	r3, #1
 8000b1c:	64fb      	str	r3, [r7, #76]	; 0x4c
    }

    if ((USART2->CR1 & 0x00008000) != 0) {
 8000b1e:	4b16      	ldr	r3, [pc, #88]	; (8000b78 <uart_init+0x22c>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d00b      	beq.n	8000b42 <uart_init+0x1f6>
        // get the LSB of divider and shift it to the right by 1 bit
        tmpreg = (divider & (uint16_t)0x000F) >> 1;
 8000b2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000b2c:	085b      	lsrs	r3, r3, #1
 8000b2e:	f003 0307 	and.w	r3, r3, #7
 8000b32:	64bb      	str	r3, [r7, #72]	; 0x48
        // update the divider value
        divider = (divider & (uint16_t)0xFFF0) | tmpreg;
 8000b34:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000b36:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8000b3a:	4013      	ands	r3, r2
 8000b3c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000b3e:	4313      	orrs	r3, r2
 8000b40:	64fb      	str	r3, [r7, #76]	; 0x4c
    }

    USART2->BRR = (uint16_t)divider; // Configure baud rate
 8000b42:	4b0d      	ldr	r3, [pc, #52]	; (8000b78 <uart_init+0x22c>)
 8000b44:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000b46:	b292      	uxth	r2, r2
 8000b48:	819a      	strh	r2, [r3, #12]
    USART2->CR1 |= 0x00000001; // Enable USART2
 8000b4a:	4b0b      	ldr	r3, [pc, #44]	; (8000b78 <uart_init+0x22c>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	4a0a      	ldr	r2, [pc, #40]	; (8000b78 <uart_init+0x22c>)
 8000b50:	f043 0301 	orr.w	r3, r3, #1
 8000b54:	6013      	str	r3, [r2, #0]

    USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
 8000b56:	2201      	movs	r2, #1
 8000b58:	4908      	ldr	r1, [pc, #32]	; (8000b7c <uart_init+0x230>)
 8000b5a:	4807      	ldr	r0, [pc, #28]	; (8000b78 <uart_init+0x22c>)
 8000b5c:	f7ff fdb6 	bl	80006cc <USART_ITConfig>
    NVIC_EnableIRQ(USART2_IRQn);
 8000b60:	2026      	movs	r0, #38	; 0x26
 8000b62:	f7ff fe5f 	bl	8000824 <NVIC_EnableIRQ>
}
 8000b66:	bf00      	nop
 8000b68:	3750      	adds	r7, #80	; 0x50
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	20000084 	.word	0x20000084
 8000b74:	40021000 	.word	0x40021000
 8000b78:	40004400 	.word	0x40004400
 8000b7c:	00050105 	.word	0x00050105

08000b80 <color>:
*/
  printf(ESC "[%dm", background+40);
}

void color(uint8_t foreground, uint8_t background)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b084      	sub	sp, #16
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	4603      	mov	r3, r0
 8000b88:	460a      	mov	r2, r1
 8000b8a:	71fb      	strb	r3, [r7, #7]
 8000b8c:	4613      	mov	r3, r2
 8000b8e:	71bb      	strb	r3, [r7, #6]
// combination of fgcolor() and bgcolor() - uses less bandwidth
  uint8_t type = 22;             // normal text
 8000b90:	2316      	movs	r3, #22
 8000b92:	73fb      	strb	r3, [r7, #15]
	if (foreground > 7) {
 8000b94:	79fb      	ldrb	r3, [r7, #7]
 8000b96:	2b07      	cmp	r3, #7
 8000b98:	d904      	bls.n	8000ba4 <color+0x24>
	  type = 1;                // bold text
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	73fb      	strb	r3, [r7, #15]
		foreground -= 8;
 8000b9e:	79fb      	ldrb	r3, [r7, #7]
 8000ba0:	3b08      	subs	r3, #8
 8000ba2:	71fb      	strb	r3, [r7, #7]
	}
  printf(ESC "[%d;%d;%dm", type, foreground+30, background+40);
 8000ba4:	7bf9      	ldrb	r1, [r7, #15]
 8000ba6:	79fb      	ldrb	r3, [r7, #7]
 8000ba8:	f103 021e 	add.w	r2, r3, #30
 8000bac:	79bb      	ldrb	r3, [r7, #6]
 8000bae:	3328      	adds	r3, #40	; 0x28
 8000bb0:	4803      	ldr	r0, [pc, #12]	; (8000bc0 <color+0x40>)
 8000bb2:	f000 fb41 	bl	8001238 <iprintf>
}
 8000bb6:	bf00      	nop
 8000bb8:	3710      	adds	r7, #16
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	08002144 	.word	0x08002144

08000bc4 <clrscr>:
// gray on black text, no underline, no blink, no reverse
  printf(ESC "[m");
}

void clrscr()
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
	printf(ESC "[2J");
 8000bc8:	4802      	ldr	r0, [pc, #8]	; (8000bd4 <clrscr+0x10>)
 8000bca:	f000 fb35 	bl	8001238 <iprintf>
}
 8000bce:	bf00      	nop
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	08002154 	.word	0x08002154

08000bd8 <gotoxy>:
{
	printf(ESC "[%sm", on ? "7" : "27");
}

void gotoxy(uint8_t x, uint8_t y)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	4603      	mov	r3, r0
 8000be0:	460a      	mov	r2, r1
 8000be2:	71fb      	strb	r3, [r7, #7]
 8000be4:	4613      	mov	r3, r2
 8000be6:	71bb      	strb	r3, [r7, #6]
	printf(ESC "[%d;%df", y, x);
 8000be8:	79bb      	ldrb	r3, [r7, #6]
 8000bea:	79fa      	ldrb	r2, [r7, #7]
 8000bec:	4619      	mov	r1, r3
 8000bee:	4803      	ldr	r0, [pc, #12]	; (8000bfc <gotoxy+0x24>)
 8000bf0:	f000 fb22 	bl	8001238 <iprintf>
}
 8000bf4:	bf00      	nop
 8000bf6:	3708      	adds	r7, #8
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	0800217c 	.word	0x0800217c

08000c00 <window>:
		{ .tl=L_TL, .tr=L_TR, .bl=L_BL, .br=L_BR, .h=L_H, .v=L_V, .fgcol=15, .bgcol=4, .titlefg=11, .titlebg=7},
		{ .tl=L_TL_D, .tr=L_TR_D, .bl=L_BL_D, .br=L_BR_D, .h=L_H_D, .v=L_V_D, .fgcol=0, .bgcol=7, .titlefg=15, .titlebg=1 }
};

void window(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, uint8_t style, const char *title)
{
 8000c00:	b590      	push	{r4, r7, lr}
 8000c02:	b08b      	sub	sp, #44	; 0x2c
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	4604      	mov	r4, r0
 8000c08:	4608      	mov	r0, r1
 8000c0a:	4611      	mov	r1, r2
 8000c0c:	461a      	mov	r2, r3
 8000c0e:	4623      	mov	r3, r4
 8000c10:	71fb      	strb	r3, [r7, #7]
 8000c12:	4603      	mov	r3, r0
 8000c14:	71bb      	strb	r3, [r7, #6]
 8000c16:	460b      	mov	r3, r1
 8000c18:	717b      	strb	r3, [r7, #5]
 8000c1a:	4613      	mov	r3, r2
 8000c1c:	713b      	strb	r3, [r7, #4]
	char *titlebuf = NULL;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	627b      	str	r3, [r7, #36]	; 0x24
	int title_len = strlen(title);
 8000c22:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8000c24:	f7ff fad4 	bl	80001d0 <strlen>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	623b      	str	r3, [r7, #32]
	const window_style_t *st;
	if (style<sizeof(window_styles)/sizeof(window_style_t)) {
 8000c2c:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8000c30:	2b01      	cmp	r3, #1
 8000c32:	d809      	bhi.n	8000c48 <window+0x48>
		st = &window_styles[style];
 8000c34:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8000c38:	4613      	mov	r3, r2
 8000c3a:	009b      	lsls	r3, r3, #2
 8000c3c:	4413      	add	r3, r2
 8000c3e:	00db      	lsls	r3, r3, #3
 8000c40:	4a63      	ldr	r2, [pc, #396]	; (8000dd0 <window+0x1d0>)
 8000c42:	4413      	add	r3, r2
 8000c44:	61fb      	str	r3, [r7, #28]
 8000c46:	e001      	b.n	8000c4c <window+0x4c>
	} else {
		st = &window_styles[0];
 8000c48:	4b61      	ldr	r3, [pc, #388]	; (8000dd0 <window+0x1d0>)
 8000c4a:	61fb      	str	r3, [r7, #28]
	}

	if (title_len > x2-x1-6) {
 8000c4c:	797a      	ldrb	r2, [r7, #5]
 8000c4e:	79fb      	ldrb	r3, [r7, #7]
 8000c50:	1ad3      	subs	r3, r2, r3
 8000c52:	3b05      	subs	r3, #5
 8000c54:	6a3a      	ldr	r2, [r7, #32]
 8000c56:	429a      	cmp	r2, r3
 8000c58:	db09      	blt.n	8000c6e <window+0x6e>
		title_len = x2-x1-6;
 8000c5a:	797a      	ldrb	r2, [r7, #5]
 8000c5c:	79fb      	ldrb	r3, [r7, #7]
 8000c5e:	1ad3      	subs	r3, r2, r3
 8000c60:	3b06      	subs	r3, #6
 8000c62:	623b      	str	r3, [r7, #32]
		if (title_len < 1) {
 8000c64:	6a3b      	ldr	r3, [r7, #32]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	dc01      	bgt.n	8000c6e <window+0x6e>
			title_len = 0;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	623b      	str	r3, [r7, #32]
		}
	}
	if (title_len > 0) {
 8000c6e:	6a3b      	ldr	r3, [r7, #32]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	dd16      	ble.n	8000ca2 <window+0xa2>
		titlebuf = alloca(title_len+1);
 8000c74:	6a3b      	ldr	r3, [r7, #32]
 8000c76:	3301      	adds	r3, #1
 8000c78:	3307      	adds	r3, #7
 8000c7a:	08db      	lsrs	r3, r3, #3
 8000c7c:	00db      	lsls	r3, r3, #3
 8000c7e:	ebad 0d03 	sub.w	sp, sp, r3
 8000c82:	466b      	mov	r3, sp
 8000c84:	3307      	adds	r3, #7
 8000c86:	08db      	lsrs	r3, r3, #3
 8000c88:	00db      	lsls	r3, r3, #3
 8000c8a:	627b      	str	r3, [r7, #36]	; 0x24
		strncpy(titlebuf, title, title_len);
 8000c8c:	6a3b      	ldr	r3, [r7, #32]
 8000c8e:	461a      	mov	r2, r3
 8000c90:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8000c92:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000c94:	f000 fbeb 	bl	800146e <strncpy>
		titlebuf[title_len]='\0';
 8000c98:	6a3b      	ldr	r3, [r7, #32]
 8000c9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c9c:	4413      	add	r3, r2
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	701a      	strb	r2, [r3, #0]
	}
	gotoxy(x1,y1);
 8000ca2:	79ba      	ldrb	r2, [r7, #6]
 8000ca4:	79fb      	ldrb	r3, [r7, #7]
 8000ca6:	4611      	mov	r1, r2
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f7ff ff95 	bl	8000bd8 <gotoxy>
	color(st->fgcol, st->bgcol);
 8000cae:	69fb      	ldr	r3, [r7, #28]
 8000cb0:	699b      	ldr	r3, [r3, #24]
 8000cb2:	b2da      	uxtb	r2, r3
 8000cb4:	69fb      	ldr	r3, [r7, #28]
 8000cb6:	69db      	ldr	r3, [r3, #28]
 8000cb8:	b2db      	uxtb	r3, r3
 8000cba:	4619      	mov	r1, r3
 8000cbc:	4610      	mov	r0, r2
 8000cbe:	f7ff ff5f 	bl	8000b80 <color>
	// Draw corner and 1 line
	printf(st->tr);
 8000cc2:	69fb      	ldr	r3, [r7, #28]
 8000cc4:	685b      	ldr	r3, [r3, #4]
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f000 fab6 	bl	8001238 <iprintf>
	if (title_len) {
 8000ccc:	6a3b      	ldr	r3, [r7, #32]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d017      	beq.n	8000d02 <window+0x102>
		color(st->titlefg, st->titlebg);
 8000cd2:	69fb      	ldr	r3, [r7, #28]
 8000cd4:	6a1b      	ldr	r3, [r3, #32]
 8000cd6:	b2da      	uxtb	r2, r3
 8000cd8:	69fb      	ldr	r3, [r7, #28]
 8000cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cdc:	b2db      	uxtb	r3, r3
 8000cde:	4619      	mov	r1, r3
 8000ce0:	4610      	mov	r0, r2
 8000ce2:	f7ff ff4d 	bl	8000b80 <color>
		printf(" %s ", titlebuf);
 8000ce6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000ce8:	483a      	ldr	r0, [pc, #232]	; (8000dd4 <window+0x1d4>)
 8000cea:	f000 faa5 	bl	8001238 <iprintf>
		color(st->fgcol, st->bgcol);
 8000cee:	69fb      	ldr	r3, [r7, #28]
 8000cf0:	699b      	ldr	r3, [r3, #24]
 8000cf2:	b2da      	uxtb	r2, r3
 8000cf4:	69fb      	ldr	r3, [r7, #28]
 8000cf6:	69db      	ldr	r3, [r3, #28]
 8000cf8:	b2db      	uxtb	r3, r3
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	4610      	mov	r0, r2
 8000cfe:	f7ff ff3f 	bl	8000b80 <color>
	}
	for (int c=x1+title_len+4; c<x2; c++) {
 8000d02:	79fa      	ldrb	r2, [r7, #7]
 8000d04:	6a3b      	ldr	r3, [r7, #32]
 8000d06:	4413      	add	r3, r2
 8000d08:	3304      	adds	r3, #4
 8000d0a:	61bb      	str	r3, [r7, #24]
 8000d0c:	e007      	b.n	8000d1e <window+0x11e>
		printf(st->h);
 8000d0e:	69fb      	ldr	r3, [r7, #28]
 8000d10:	691b      	ldr	r3, [r3, #16]
 8000d12:	4618      	mov	r0, r3
 8000d14:	f000 fa90 	bl	8001238 <iprintf>
	for (int c=x1+title_len+4; c<x2; c++) {
 8000d18:	69bb      	ldr	r3, [r7, #24]
 8000d1a:	3301      	adds	r3, #1
 8000d1c:	61bb      	str	r3, [r7, #24]
 8000d1e:	797b      	ldrb	r3, [r7, #5]
 8000d20:	69ba      	ldr	r2, [r7, #24]
 8000d22:	429a      	cmp	r2, r3
 8000d24:	dbf3      	blt.n	8000d0e <window+0x10e>
	}
	printf(st->tl);
 8000d26:	69fb      	ldr	r3, [r7, #28]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f000 fa84 	bl	8001238 <iprintf>
	for (int y=y1+1; y<y2; y++) {
 8000d30:	79bb      	ldrb	r3, [r7, #6]
 8000d32:	3301      	adds	r3, #1
 8000d34:	617b      	str	r3, [r7, #20]
 8000d36:	e022      	b.n	8000d7e <window+0x17e>
		gotoxy(x1, y);
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	b2da      	uxtb	r2, r3
 8000d3c:	79fb      	ldrb	r3, [r7, #7]
 8000d3e:	4611      	mov	r1, r2
 8000d40:	4618      	mov	r0, r3
 8000d42:	f7ff ff49 	bl	8000bd8 <gotoxy>
		printf(st->v);
 8000d46:	69fb      	ldr	r3, [r7, #28]
 8000d48:	695b      	ldr	r3, [r3, #20]
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f000 fa74 	bl	8001238 <iprintf>
		for (int x=x1+1; x<x2-1; x++) {
 8000d50:	79fb      	ldrb	r3, [r7, #7]
 8000d52:	3301      	adds	r3, #1
 8000d54:	613b      	str	r3, [r7, #16]
 8000d56:	e005      	b.n	8000d64 <window+0x164>
			printf(" ");
 8000d58:	2020      	movs	r0, #32
 8000d5a:	f000 fa7f 	bl	800125c <putchar>
		for (int x=x1+1; x<x2-1; x++) {
 8000d5e:	693b      	ldr	r3, [r7, #16]
 8000d60:	3301      	adds	r3, #1
 8000d62:	613b      	str	r3, [r7, #16]
 8000d64:	797b      	ldrb	r3, [r7, #5]
 8000d66:	3b01      	subs	r3, #1
 8000d68:	693a      	ldr	r2, [r7, #16]
 8000d6a:	429a      	cmp	r2, r3
 8000d6c:	dbf4      	blt.n	8000d58 <window+0x158>
		}
		printf(st->v);
 8000d6e:	69fb      	ldr	r3, [r7, #28]
 8000d70:	695b      	ldr	r3, [r3, #20]
 8000d72:	4618      	mov	r0, r3
 8000d74:	f000 fa60 	bl	8001238 <iprintf>
	for (int y=y1+1; y<y2; y++) {
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	3301      	adds	r3, #1
 8000d7c:	617b      	str	r3, [r7, #20]
 8000d7e:	793b      	ldrb	r3, [r7, #4]
 8000d80:	697a      	ldr	r2, [r7, #20]
 8000d82:	429a      	cmp	r2, r3
 8000d84:	dbd8      	blt.n	8000d38 <window+0x138>
	}
	gotoxy(x1,y2);
 8000d86:	793a      	ldrb	r2, [r7, #4]
 8000d88:	79fb      	ldrb	r3, [r7, #7]
 8000d8a:	4611      	mov	r1, r2
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f7ff ff23 	bl	8000bd8 <gotoxy>
	printf(st->bl);
 8000d92:	69fb      	ldr	r3, [r7, #28]
 8000d94:	68db      	ldr	r3, [r3, #12]
 8000d96:	4618      	mov	r0, r3
 8000d98:	f000 fa4e 	bl	8001238 <iprintf>
	for (int x=x1+1; x<x2-1; x++) {
 8000d9c:	79fb      	ldrb	r3, [r7, #7]
 8000d9e:	3301      	adds	r3, #1
 8000da0:	60fb      	str	r3, [r7, #12]
 8000da2:	e007      	b.n	8000db4 <window+0x1b4>
		printf(st->h);
 8000da4:	69fb      	ldr	r3, [r7, #28]
 8000da6:	691b      	ldr	r3, [r3, #16]
 8000da8:	4618      	mov	r0, r3
 8000daa:	f000 fa45 	bl	8001238 <iprintf>
	for (int x=x1+1; x<x2-1; x++) {
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	3301      	adds	r3, #1
 8000db2:	60fb      	str	r3, [r7, #12]
 8000db4:	797b      	ldrb	r3, [r7, #5]
 8000db6:	3b01      	subs	r3, #1
 8000db8:	68fa      	ldr	r2, [r7, #12]
 8000dba:	429a      	cmp	r2, r3
 8000dbc:	dbf2      	blt.n	8000da4 <window+0x1a4>
	}
	printf(st->br);
 8000dbe:	69fb      	ldr	r3, [r7, #28]
 8000dc0:	689b      	ldr	r3, [r3, #8]
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f000 fa38 	bl	8001238 <iprintf>
}
 8000dc8:	bf00      	nop
 8000dca:	372c      	adds	r7, #44	; 0x2c
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd90      	pop	{r4, r7, pc}
 8000dd0:	08002214 	.word	0x08002214
 8000dd4:	080021b8 	.word	0x080021b8

08000dd8 <main>:
#include "stm32f30x_conf.h" // STM32 config
#include "30010_io.h" // Input/output library for this course
#include "ansi.h"

int main(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af02      	add	r7, sp, #8
	// Setup communication with the PC
	uart_init(115200);
 8000dde:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 8000de2:	f7ff fdb3 	bl	800094c <uart_init>
	color(7,0);
 8000de6:	2100      	movs	r1, #0
 8000de8:	2007      	movs	r0, #7
 8000dea:	f7ff fec9 	bl	8000b80 <color>
	clrscr();
 8000dee:	f7ff fee9 	bl	8000bc4 <clrscr>
	window(2,2,60,15,0,"Hello World!");
 8000df2:	4b0f      	ldr	r3, [pc, #60]	; (8000e30 <main+0x58>)
 8000df4:	9301      	str	r3, [sp, #4]
 8000df6:	2300      	movs	r3, #0
 8000df8:	9300      	str	r3, [sp, #0]
 8000dfa:	230f      	movs	r3, #15
 8000dfc:	223c      	movs	r2, #60	; 0x3c
 8000dfe:	2102      	movs	r1, #2
 8000e00:	2002      	movs	r0, #2
 8000e02:	f7ff fefd 	bl	8000c00 <window>
	window(10,5,40,20,0,"Win2: Title Too Long To Fit In Title Bar Of Window");
 8000e06:	4b0b      	ldr	r3, [pc, #44]	; (8000e34 <main+0x5c>)
 8000e08:	9301      	str	r3, [sp, #4]
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	9300      	str	r3, [sp, #0]
 8000e0e:	2314      	movs	r3, #20
 8000e10:	2228      	movs	r2, #40	; 0x28
 8000e12:	2105      	movs	r1, #5
 8000e14:	200a      	movs	r0, #10
 8000e16:	f7ff fef3 	bl	8000c00 <window>
	window(20,12,60,16,1,"Win3: Alt Style");
 8000e1a:	4b07      	ldr	r3, [pc, #28]	; (8000e38 <main+0x60>)
 8000e1c:	9301      	str	r3, [sp, #4]
 8000e1e:	2301      	movs	r3, #1
 8000e20:	9300      	str	r3, [sp, #0]
 8000e22:	2310      	movs	r3, #16
 8000e24:	223c      	movs	r2, #60	; 0x3c
 8000e26:	210c      	movs	r1, #12
 8000e28:	2014      	movs	r0, #20
 8000e2a:	f7ff fee9 	bl	8000c00 <window>

	for(;;);
 8000e2e:	e7fe      	b.n	8000e2e <main+0x56>
 8000e30:	080021c0 	.word	0x080021c0
 8000e34:	080021d0 	.word	0x080021d0
 8000e38:	08002204 	.word	0x08002204

08000e3c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b086      	sub	sp, #24
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	60f8      	str	r0, [r7, #12]
 8000e44:	60b9      	str	r1, [r7, #8]
 8000e46:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e48:	2300      	movs	r3, #0
 8000e4a:	617b      	str	r3, [r7, #20]
 8000e4c:	e00a      	b.n	8000e64 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000e4e:	f3af 8000 	nop.w
 8000e52:	4601      	mov	r1, r0
 8000e54:	68bb      	ldr	r3, [r7, #8]
 8000e56:	1c5a      	adds	r2, r3, #1
 8000e58:	60ba      	str	r2, [r7, #8]
 8000e5a:	b2ca      	uxtb	r2, r1
 8000e5c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e5e:	697b      	ldr	r3, [r7, #20]
 8000e60:	3301      	adds	r3, #1
 8000e62:	617b      	str	r3, [r7, #20]
 8000e64:	697a      	ldr	r2, [r7, #20]
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	429a      	cmp	r2, r3
 8000e6a:	dbf0      	blt.n	8000e4e <_read+0x12>
	}

return len;
 8000e6c:	687b      	ldr	r3, [r7, #4]
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3718      	adds	r7, #24
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}

08000e76 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000e76:	b480      	push	{r7}
 8000e78:	b083      	sub	sp, #12
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	6078      	str	r0, [r7, #4]
	return -1;
 8000e7e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	370c      	adds	r7, #12
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr

08000e8e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e8e:	b480      	push	{r7}
 8000e90:	b083      	sub	sp, #12
 8000e92:	af00      	add	r7, sp, #0
 8000e94:	6078      	str	r0, [r7, #4]
 8000e96:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e9e:	605a      	str	r2, [r3, #4]
	return 0;
 8000ea0:	2300      	movs	r3, #0
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	370c      	adds	r7, #12
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr

08000eae <_isatty>:

int _isatty(int file)
{
 8000eae:	b480      	push	{r7}
 8000eb0:	b083      	sub	sp, #12
 8000eb2:	af00      	add	r7, sp, #0
 8000eb4:	6078      	str	r0, [r7, #4]
	return 1;
 8000eb6:	2301      	movs	r3, #1
}
 8000eb8:	4618      	mov	r0, r3
 8000eba:	370c      	adds	r7, #12
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr

08000ec4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b085      	sub	sp, #20
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	60f8      	str	r0, [r7, #12]
 8000ecc:	60b9      	str	r1, [r7, #8]
 8000ece:	607a      	str	r2, [r7, #4]
	return 0;
 8000ed0:	2300      	movs	r3, #0
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	3714      	adds	r7, #20
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr
	...

08000ee0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b084      	sub	sp, #16
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000ee8:	4b11      	ldr	r3, [pc, #68]	; (8000f30 <_sbrk+0x50>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d102      	bne.n	8000ef6 <_sbrk+0x16>
		heap_end = &end;
 8000ef0:	4b0f      	ldr	r3, [pc, #60]	; (8000f30 <_sbrk+0x50>)
 8000ef2:	4a10      	ldr	r2, [pc, #64]	; (8000f34 <_sbrk+0x54>)
 8000ef4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000ef6:	4b0e      	ldr	r3, [pc, #56]	; (8000f30 <_sbrk+0x50>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000efc:	4b0c      	ldr	r3, [pc, #48]	; (8000f30 <_sbrk+0x50>)
 8000efe:	681a      	ldr	r2, [r3, #0]
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	4413      	add	r3, r2
 8000f04:	466a      	mov	r2, sp
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d907      	bls.n	8000f1a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000f0a:	f000 faf7 	bl	80014fc <__errno>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	220c      	movs	r2, #12
 8000f12:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8000f14:	f04f 33ff 	mov.w	r3, #4294967295
 8000f18:	e006      	b.n	8000f28 <_sbrk+0x48>
	}

	heap_end += incr;
 8000f1a:	4b05      	ldr	r3, [pc, #20]	; (8000f30 <_sbrk+0x50>)
 8000f1c:	681a      	ldr	r2, [r3, #0]
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	4413      	add	r3, r2
 8000f22:	4a03      	ldr	r2, [pc, #12]	; (8000f30 <_sbrk+0x50>)
 8000f24:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000f26:	68fb      	ldr	r3, [r7, #12]
}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	3710      	adds	r7, #16
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	200001a8 	.word	0x200001a8
 8000f34:	200002f8 	.word	0x200002f8

08000f38 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f3c:	4b1f      	ldr	r3, [pc, #124]	; (8000fbc <SystemInit+0x84>)
 8000f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f42:	4a1e      	ldr	r2, [pc, #120]	; (8000fbc <SystemInit+0x84>)
 8000f44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000f4c:	4b1c      	ldr	r3, [pc, #112]	; (8000fc0 <SystemInit+0x88>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a1b      	ldr	r2, [pc, #108]	; (8000fc0 <SystemInit+0x88>)
 8000f52:	f043 0301 	orr.w	r3, r3, #1
 8000f56:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00C;
 8000f58:	4b19      	ldr	r3, [pc, #100]	; (8000fc0 <SystemInit+0x88>)
 8000f5a:	685a      	ldr	r2, [r3, #4]
 8000f5c:	4918      	ldr	r1, [pc, #96]	; (8000fc0 <SystemInit+0x88>)
 8000f5e:	4b19      	ldr	r3, [pc, #100]	; (8000fc4 <SystemInit+0x8c>)
 8000f60:	4013      	ands	r3, r2
 8000f62:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000f64:	4b16      	ldr	r3, [pc, #88]	; (8000fc0 <SystemInit+0x88>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a15      	ldr	r2, [pc, #84]	; (8000fc0 <SystemInit+0x88>)
 8000f6a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000f6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f72:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000f74:	4b12      	ldr	r3, [pc, #72]	; (8000fc0 <SystemInit+0x88>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a11      	ldr	r2, [pc, #68]	; (8000fc0 <SystemInit+0x88>)
 8000f7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f7e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8000f80:	4b0f      	ldr	r3, [pc, #60]	; (8000fc0 <SystemInit+0x88>)
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	4a0e      	ldr	r2, [pc, #56]	; (8000fc0 <SystemInit+0x88>)
 8000f86:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000f8a:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 8000f8c:	4b0c      	ldr	r3, [pc, #48]	; (8000fc0 <SystemInit+0x88>)
 8000f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f90:	4a0b      	ldr	r2, [pc, #44]	; (8000fc0 <SystemInit+0x88>)
 8000f92:	f023 030f 	bic.w	r3, r3, #15
 8000f96:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= (uint32_t)0xFF00FCCC;
 8000f98:	4b09      	ldr	r3, [pc, #36]	; (8000fc0 <SystemInit+0x88>)
 8000f9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f9c:	4908      	ldr	r1, [pc, #32]	; (8000fc0 <SystemInit+0x88>)
 8000f9e:	4b0a      	ldr	r3, [pc, #40]	; (8000fc8 <SystemInit+0x90>)
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	630b      	str	r3, [r1, #48]	; 0x30
  
  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000fa4:	4b06      	ldr	r3, [pc, #24]	; (8000fc0 <SystemInit+0x88>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	609a      	str	r2, [r3, #8]

  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8000faa:	f000 f80f 	bl	8000fcc <SetSysClock>
  
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000fae:	4b03      	ldr	r3, [pc, #12]	; (8000fbc <SystemInit+0x84>)
 8000fb0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000fb4:	609a      	str	r2, [r3, #8]
#endif  
}
 8000fb6:	bf00      	nop
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	e000ed00 	.word	0xe000ed00
 8000fc0:	40021000 	.word	0x40021000
 8000fc4:	f87fc00c 	.word	0xf87fc00c
 8000fc8:	ff00fccc 	.word	0xff00fccc

08000fcc <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).             
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  /* At this stage the HSI is already enabled and used as System clock source */
  
  /* SYSCLK, HCLK, PCLK configuration ----------------------------------------*/

  /* Enable Prefetch Buffer and set Flash Latency */
  FLASH->ACR = FLASH_ACR_PRFTBE | (uint32_t)FLASH_ACR_LATENCY_1;
 8000fd0:	4b21      	ldr	r3, [pc, #132]	; (8001058 <SetSysClock+0x8c>)
 8000fd2:	2212      	movs	r2, #18
 8000fd4:	601a      	str	r2, [r3, #0]

  /* HCLK = SYSCLK / 1 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8000fd6:	4b21      	ldr	r3, [pc, #132]	; (800105c <SetSysClock+0x90>)
 8000fd8:	4a20      	ldr	r2, [pc, #128]	; (800105c <SetSysClock+0x90>)
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	6053      	str	r3, [r2, #4]

  /* PCLK2 = HCLK / 1 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8000fde:	4b1f      	ldr	r3, [pc, #124]	; (800105c <SetSysClock+0x90>)
 8000fe0:	4a1e      	ldr	r2, [pc, #120]	; (800105c <SetSysClock+0x90>)
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	6053      	str	r3, [r2, #4]

  /* PCLK1 = HCLK / 2 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8000fe6:	4b1d      	ldr	r3, [pc, #116]	; (800105c <SetSysClock+0x90>)
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	4a1c      	ldr	r2, [pc, #112]	; (800105c <SetSysClock+0x90>)
 8000fec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ff0:	6053      	str	r3, [r2, #4]

  /*  PLL configuration */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 8000ff2:	4b1a      	ldr	r3, [pc, #104]	; (800105c <SetSysClock+0x90>)
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	4a19      	ldr	r2, [pc, #100]	; (800105c <SetSysClock+0x90>)
 8000ff8:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8000ffc:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSI_Div2 | RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLMULL16);
 8000ffe:	4b17      	ldr	r3, [pc, #92]	; (800105c <SetSysClock+0x90>)
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	4a16      	ldr	r2, [pc, #88]	; (800105c <SetSysClock+0x90>)
 8001004:	f443 1360 	orr.w	r3, r3, #3670016	; 0x380000
 8001008:	6053      	str	r3, [r2, #4]

  /* Enable PLL */
  RCC->CR |= RCC_CR_PLLON;
 800100a:	4b14      	ldr	r3, [pc, #80]	; (800105c <SetSysClock+0x90>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4a13      	ldr	r2, [pc, #76]	; (800105c <SetSysClock+0x90>)
 8001010:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001014:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is ready */
  while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8001016:	bf00      	nop
 8001018:	4b10      	ldr	r3, [pc, #64]	; (800105c <SetSysClock+0x90>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001020:	2b00      	cmp	r3, #0
 8001022:	d0f9      	beq.n	8001018 <SetSysClock+0x4c>
  {
  }

  /* Select PLL as system clock source */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8001024:	4b0d      	ldr	r3, [pc, #52]	; (800105c <SetSysClock+0x90>)
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	4a0c      	ldr	r2, [pc, #48]	; (800105c <SetSysClock+0x90>)
 800102a:	f023 0303 	bic.w	r3, r3, #3
 800102e:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
 8001030:	4b0a      	ldr	r3, [pc, #40]	; (800105c <SetSysClock+0x90>)
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	4a09      	ldr	r2, [pc, #36]	; (800105c <SetSysClock+0x90>)
 8001036:	f043 0302 	orr.w	r3, r3, #2
 800103a:	6053      	str	r3, [r2, #4]

  /* Wait till PLL is used as system clock source */
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 800103c:	bf00      	nop
 800103e:	4b07      	ldr	r3, [pc, #28]	; (800105c <SetSysClock+0x90>)
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	f003 030c 	and.w	r3, r3, #12
 8001046:	2b08      	cmp	r3, #8
 8001048:	d1f9      	bne.n	800103e <SetSysClock+0x72>
  {
  }
}
 800104a:	bf00      	nop
 800104c:	bf00      	nop
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	40022000 	.word	0x40022000
 800105c:	40021000 	.word	0x40021000

08001060 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001060:	480d      	ldr	r0, [pc, #52]	; (8001098 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001062:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001064:	480d      	ldr	r0, [pc, #52]	; (800109c <LoopForever+0x6>)
  ldr r1, =_edata
 8001066:	490e      	ldr	r1, [pc, #56]	; (80010a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001068:	4a0e      	ldr	r2, [pc, #56]	; (80010a4 <LoopForever+0xe>)
  movs r3, #0
 800106a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800106c:	e002      	b.n	8001074 <LoopCopyDataInit>

0800106e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800106e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001070:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001072:	3304      	adds	r3, #4

08001074 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001074:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001076:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001078:	d3f9      	bcc.n	800106e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800107a:	4a0b      	ldr	r2, [pc, #44]	; (80010a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 800107c:	4c0b      	ldr	r4, [pc, #44]	; (80010ac <LoopForever+0x16>)
  movs r3, #0
 800107e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001080:	e001      	b.n	8001086 <LoopFillZerobss>

08001082 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001082:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001084:	3204      	adds	r2, #4

08001086 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001086:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001088:	d3fb      	bcc.n	8001082 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800108a:	f7ff ff55 	bl	8000f38 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800108e:	f000 fa3b 	bl	8001508 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001092:	f7ff fea1 	bl	8000dd8 <main>

08001096 <LoopForever>:

LoopForever:
    b LoopForever
 8001096:	e7fe      	b.n	8001096 <LoopForever>
  ldr   r0, =_estack
 8001098:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 800109c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010a0:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 80010a4:	080022a0 	.word	0x080022a0
  ldr r2, =_sbss
 80010a8:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 80010ac:	200002f8 	.word	0x200002f8

080010b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010b0:	e7fe      	b.n	80010b0 <ADC1_2_IRQHandler>
	...

080010b4 <std>:
 80010b4:	2300      	movs	r3, #0
 80010b6:	b510      	push	{r4, lr}
 80010b8:	4604      	mov	r4, r0
 80010ba:	e9c0 3300 	strd	r3, r3, [r0]
 80010be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80010c2:	6083      	str	r3, [r0, #8]
 80010c4:	8181      	strh	r1, [r0, #12]
 80010c6:	6643      	str	r3, [r0, #100]	; 0x64
 80010c8:	81c2      	strh	r2, [r0, #14]
 80010ca:	6183      	str	r3, [r0, #24]
 80010cc:	4619      	mov	r1, r3
 80010ce:	2208      	movs	r2, #8
 80010d0:	305c      	adds	r0, #92	; 0x5c
 80010d2:	f000 f9c4 	bl	800145e <memset>
 80010d6:	4b0d      	ldr	r3, [pc, #52]	; (800110c <std+0x58>)
 80010d8:	6263      	str	r3, [r4, #36]	; 0x24
 80010da:	4b0d      	ldr	r3, [pc, #52]	; (8001110 <std+0x5c>)
 80010dc:	62a3      	str	r3, [r4, #40]	; 0x28
 80010de:	4b0d      	ldr	r3, [pc, #52]	; (8001114 <std+0x60>)
 80010e0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80010e2:	4b0d      	ldr	r3, [pc, #52]	; (8001118 <std+0x64>)
 80010e4:	6323      	str	r3, [r4, #48]	; 0x30
 80010e6:	4b0d      	ldr	r3, [pc, #52]	; (800111c <std+0x68>)
 80010e8:	6224      	str	r4, [r4, #32]
 80010ea:	429c      	cmp	r4, r3
 80010ec:	d006      	beq.n	80010fc <std+0x48>
 80010ee:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80010f2:	4294      	cmp	r4, r2
 80010f4:	d002      	beq.n	80010fc <std+0x48>
 80010f6:	33d0      	adds	r3, #208	; 0xd0
 80010f8:	429c      	cmp	r4, r3
 80010fa:	d105      	bne.n	8001108 <std+0x54>
 80010fc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001100:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001104:	f000 ba24 	b.w	8001550 <__retarget_lock_init_recursive>
 8001108:	bd10      	pop	{r4, pc}
 800110a:	bf00      	nop
 800110c:	080013d9 	.word	0x080013d9
 8001110:	080013fb 	.word	0x080013fb
 8001114:	08001433 	.word	0x08001433
 8001118:	08001457 	.word	0x08001457
 800111c:	200001ac 	.word	0x200001ac

08001120 <stdio_exit_handler>:
 8001120:	4a02      	ldr	r2, [pc, #8]	; (800112c <stdio_exit_handler+0xc>)
 8001122:	4903      	ldr	r1, [pc, #12]	; (8001130 <stdio_exit_handler+0x10>)
 8001124:	4803      	ldr	r0, [pc, #12]	; (8001134 <stdio_exit_handler+0x14>)
 8001126:	f000 b869 	b.w	80011fc <_fwalk_sglue>
 800112a:	bf00      	nop
 800112c:	2000002c 	.word	0x2000002c
 8001130:	08001e0d 	.word	0x08001e0d
 8001134:	20000038 	.word	0x20000038

08001138 <cleanup_stdio>:
 8001138:	6841      	ldr	r1, [r0, #4]
 800113a:	4b0c      	ldr	r3, [pc, #48]	; (800116c <cleanup_stdio+0x34>)
 800113c:	4299      	cmp	r1, r3
 800113e:	b510      	push	{r4, lr}
 8001140:	4604      	mov	r4, r0
 8001142:	d001      	beq.n	8001148 <cleanup_stdio+0x10>
 8001144:	f000 fe62 	bl	8001e0c <_fflush_r>
 8001148:	68a1      	ldr	r1, [r4, #8]
 800114a:	4b09      	ldr	r3, [pc, #36]	; (8001170 <cleanup_stdio+0x38>)
 800114c:	4299      	cmp	r1, r3
 800114e:	d002      	beq.n	8001156 <cleanup_stdio+0x1e>
 8001150:	4620      	mov	r0, r4
 8001152:	f000 fe5b 	bl	8001e0c <_fflush_r>
 8001156:	68e1      	ldr	r1, [r4, #12]
 8001158:	4b06      	ldr	r3, [pc, #24]	; (8001174 <cleanup_stdio+0x3c>)
 800115a:	4299      	cmp	r1, r3
 800115c:	d004      	beq.n	8001168 <cleanup_stdio+0x30>
 800115e:	4620      	mov	r0, r4
 8001160:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001164:	f000 be52 	b.w	8001e0c <_fflush_r>
 8001168:	bd10      	pop	{r4, pc}
 800116a:	bf00      	nop
 800116c:	200001ac 	.word	0x200001ac
 8001170:	20000214 	.word	0x20000214
 8001174:	2000027c 	.word	0x2000027c

08001178 <global_stdio_init.part.0>:
 8001178:	b510      	push	{r4, lr}
 800117a:	4b0b      	ldr	r3, [pc, #44]	; (80011a8 <global_stdio_init.part.0+0x30>)
 800117c:	4c0b      	ldr	r4, [pc, #44]	; (80011ac <global_stdio_init.part.0+0x34>)
 800117e:	4a0c      	ldr	r2, [pc, #48]	; (80011b0 <global_stdio_init.part.0+0x38>)
 8001180:	601a      	str	r2, [r3, #0]
 8001182:	4620      	mov	r0, r4
 8001184:	2200      	movs	r2, #0
 8001186:	2104      	movs	r1, #4
 8001188:	f7ff ff94 	bl	80010b4 <std>
 800118c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8001190:	2201      	movs	r2, #1
 8001192:	2109      	movs	r1, #9
 8001194:	f7ff ff8e 	bl	80010b4 <std>
 8001198:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800119c:	2202      	movs	r2, #2
 800119e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80011a2:	2112      	movs	r1, #18
 80011a4:	f7ff bf86 	b.w	80010b4 <std>
 80011a8:	200002e4 	.word	0x200002e4
 80011ac:	200001ac 	.word	0x200001ac
 80011b0:	08001121 	.word	0x08001121

080011b4 <__sfp_lock_acquire>:
 80011b4:	4801      	ldr	r0, [pc, #4]	; (80011bc <__sfp_lock_acquire+0x8>)
 80011b6:	f000 b9cc 	b.w	8001552 <__retarget_lock_acquire_recursive>
 80011ba:	bf00      	nop
 80011bc:	200002ed 	.word	0x200002ed

080011c0 <__sfp_lock_release>:
 80011c0:	4801      	ldr	r0, [pc, #4]	; (80011c8 <__sfp_lock_release+0x8>)
 80011c2:	f000 b9c7 	b.w	8001554 <__retarget_lock_release_recursive>
 80011c6:	bf00      	nop
 80011c8:	200002ed 	.word	0x200002ed

080011cc <__sinit>:
 80011cc:	b510      	push	{r4, lr}
 80011ce:	4604      	mov	r4, r0
 80011d0:	f7ff fff0 	bl	80011b4 <__sfp_lock_acquire>
 80011d4:	6a23      	ldr	r3, [r4, #32]
 80011d6:	b11b      	cbz	r3, 80011e0 <__sinit+0x14>
 80011d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80011dc:	f7ff bff0 	b.w	80011c0 <__sfp_lock_release>
 80011e0:	4b04      	ldr	r3, [pc, #16]	; (80011f4 <__sinit+0x28>)
 80011e2:	6223      	str	r3, [r4, #32]
 80011e4:	4b04      	ldr	r3, [pc, #16]	; (80011f8 <__sinit+0x2c>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d1f5      	bne.n	80011d8 <__sinit+0xc>
 80011ec:	f7ff ffc4 	bl	8001178 <global_stdio_init.part.0>
 80011f0:	e7f2      	b.n	80011d8 <__sinit+0xc>
 80011f2:	bf00      	nop
 80011f4:	08001139 	.word	0x08001139
 80011f8:	200002e4 	.word	0x200002e4

080011fc <_fwalk_sglue>:
 80011fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001200:	4607      	mov	r7, r0
 8001202:	4688      	mov	r8, r1
 8001204:	4614      	mov	r4, r2
 8001206:	2600      	movs	r6, #0
 8001208:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800120c:	f1b9 0901 	subs.w	r9, r9, #1
 8001210:	d505      	bpl.n	800121e <_fwalk_sglue+0x22>
 8001212:	6824      	ldr	r4, [r4, #0]
 8001214:	2c00      	cmp	r4, #0
 8001216:	d1f7      	bne.n	8001208 <_fwalk_sglue+0xc>
 8001218:	4630      	mov	r0, r6
 800121a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800121e:	89ab      	ldrh	r3, [r5, #12]
 8001220:	2b01      	cmp	r3, #1
 8001222:	d907      	bls.n	8001234 <_fwalk_sglue+0x38>
 8001224:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001228:	3301      	adds	r3, #1
 800122a:	d003      	beq.n	8001234 <_fwalk_sglue+0x38>
 800122c:	4629      	mov	r1, r5
 800122e:	4638      	mov	r0, r7
 8001230:	47c0      	blx	r8
 8001232:	4306      	orrs	r6, r0
 8001234:	3568      	adds	r5, #104	; 0x68
 8001236:	e7e9      	b.n	800120c <_fwalk_sglue+0x10>

08001238 <iprintf>:
 8001238:	b40f      	push	{r0, r1, r2, r3}
 800123a:	b507      	push	{r0, r1, r2, lr}
 800123c:	4906      	ldr	r1, [pc, #24]	; (8001258 <iprintf+0x20>)
 800123e:	ab04      	add	r3, sp, #16
 8001240:	6808      	ldr	r0, [r1, #0]
 8001242:	f853 2b04 	ldr.w	r2, [r3], #4
 8001246:	6881      	ldr	r1, [r0, #8]
 8001248:	9301      	str	r3, [sp, #4]
 800124a:	f000 faaf 	bl	80017ac <_vfiprintf_r>
 800124e:	b003      	add	sp, #12
 8001250:	f85d eb04 	ldr.w	lr, [sp], #4
 8001254:	b004      	add	sp, #16
 8001256:	4770      	bx	lr
 8001258:	20000084 	.word	0x20000084

0800125c <putchar>:
 800125c:	4b02      	ldr	r3, [pc, #8]	; (8001268 <putchar+0xc>)
 800125e:	4601      	mov	r1, r0
 8001260:	6818      	ldr	r0, [r3, #0]
 8001262:	6882      	ldr	r2, [r0, #8]
 8001264:	f000 be5c 	b.w	8001f20 <_putc_r>
 8001268:	20000084 	.word	0x20000084

0800126c <setbuf>:
 800126c:	fab1 f281 	clz	r2, r1
 8001270:	0952      	lsrs	r2, r2, #5
 8001272:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001276:	0052      	lsls	r2, r2, #1
 8001278:	f000 b800 	b.w	800127c <setvbuf>

0800127c <setvbuf>:
 800127c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8001280:	461d      	mov	r5, r3
 8001282:	4b54      	ldr	r3, [pc, #336]	; (80013d4 <setvbuf+0x158>)
 8001284:	681f      	ldr	r7, [r3, #0]
 8001286:	4604      	mov	r4, r0
 8001288:	460e      	mov	r6, r1
 800128a:	4690      	mov	r8, r2
 800128c:	b127      	cbz	r7, 8001298 <setvbuf+0x1c>
 800128e:	6a3b      	ldr	r3, [r7, #32]
 8001290:	b913      	cbnz	r3, 8001298 <setvbuf+0x1c>
 8001292:	4638      	mov	r0, r7
 8001294:	f7ff ff9a 	bl	80011cc <__sinit>
 8001298:	f1b8 0f02 	cmp.w	r8, #2
 800129c:	d006      	beq.n	80012ac <setvbuf+0x30>
 800129e:	f1b8 0f01 	cmp.w	r8, #1
 80012a2:	f200 8094 	bhi.w	80013ce <setvbuf+0x152>
 80012a6:	2d00      	cmp	r5, #0
 80012a8:	f2c0 8091 	blt.w	80013ce <setvbuf+0x152>
 80012ac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80012ae:	07da      	lsls	r2, r3, #31
 80012b0:	d405      	bmi.n	80012be <setvbuf+0x42>
 80012b2:	89a3      	ldrh	r3, [r4, #12]
 80012b4:	059b      	lsls	r3, r3, #22
 80012b6:	d402      	bmi.n	80012be <setvbuf+0x42>
 80012b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80012ba:	f000 f94a 	bl	8001552 <__retarget_lock_acquire_recursive>
 80012be:	4621      	mov	r1, r4
 80012c0:	4638      	mov	r0, r7
 80012c2:	f000 fda3 	bl	8001e0c <_fflush_r>
 80012c6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80012c8:	b141      	cbz	r1, 80012dc <setvbuf+0x60>
 80012ca:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80012ce:	4299      	cmp	r1, r3
 80012d0:	d002      	beq.n	80012d8 <setvbuf+0x5c>
 80012d2:	4638      	mov	r0, r7
 80012d4:	f000 f940 	bl	8001558 <_free_r>
 80012d8:	2300      	movs	r3, #0
 80012da:	6363      	str	r3, [r4, #52]	; 0x34
 80012dc:	2300      	movs	r3, #0
 80012de:	61a3      	str	r3, [r4, #24]
 80012e0:	6063      	str	r3, [r4, #4]
 80012e2:	89a3      	ldrh	r3, [r4, #12]
 80012e4:	0618      	lsls	r0, r3, #24
 80012e6:	d503      	bpl.n	80012f0 <setvbuf+0x74>
 80012e8:	6921      	ldr	r1, [r4, #16]
 80012ea:	4638      	mov	r0, r7
 80012ec:	f000 f934 	bl	8001558 <_free_r>
 80012f0:	89a3      	ldrh	r3, [r4, #12]
 80012f2:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80012f6:	f023 0303 	bic.w	r3, r3, #3
 80012fa:	f1b8 0f02 	cmp.w	r8, #2
 80012fe:	81a3      	strh	r3, [r4, #12]
 8001300:	d05f      	beq.n	80013c2 <setvbuf+0x146>
 8001302:	ab01      	add	r3, sp, #4
 8001304:	466a      	mov	r2, sp
 8001306:	4621      	mov	r1, r4
 8001308:	4638      	mov	r0, r7
 800130a:	f000 fda7 	bl	8001e5c <__swhatbuf_r>
 800130e:	89a3      	ldrh	r3, [r4, #12]
 8001310:	4318      	orrs	r0, r3
 8001312:	81a0      	strh	r0, [r4, #12]
 8001314:	bb2d      	cbnz	r5, 8001362 <setvbuf+0xe6>
 8001316:	9d00      	ldr	r5, [sp, #0]
 8001318:	4628      	mov	r0, r5
 800131a:	f000 f969 	bl	80015f0 <malloc>
 800131e:	4606      	mov	r6, r0
 8001320:	2800      	cmp	r0, #0
 8001322:	d150      	bne.n	80013c6 <setvbuf+0x14a>
 8001324:	f8dd 9000 	ldr.w	r9, [sp]
 8001328:	45a9      	cmp	r9, r5
 800132a:	d13e      	bne.n	80013aa <setvbuf+0x12e>
 800132c:	f04f 35ff 	mov.w	r5, #4294967295
 8001330:	2200      	movs	r2, #0
 8001332:	60a2      	str	r2, [r4, #8]
 8001334:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8001338:	6022      	str	r2, [r4, #0]
 800133a:	6122      	str	r2, [r4, #16]
 800133c:	2201      	movs	r2, #1
 800133e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001342:	6162      	str	r2, [r4, #20]
 8001344:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001346:	f043 0302 	orr.w	r3, r3, #2
 800134a:	07d1      	lsls	r1, r2, #31
 800134c:	81a3      	strh	r3, [r4, #12]
 800134e:	d404      	bmi.n	800135a <setvbuf+0xde>
 8001350:	059b      	lsls	r3, r3, #22
 8001352:	d402      	bmi.n	800135a <setvbuf+0xde>
 8001354:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001356:	f000 f8fd 	bl	8001554 <__retarget_lock_release_recursive>
 800135a:	4628      	mov	r0, r5
 800135c:	b003      	add	sp, #12
 800135e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001362:	2e00      	cmp	r6, #0
 8001364:	d0d8      	beq.n	8001318 <setvbuf+0x9c>
 8001366:	6a3b      	ldr	r3, [r7, #32]
 8001368:	b913      	cbnz	r3, 8001370 <setvbuf+0xf4>
 800136a:	4638      	mov	r0, r7
 800136c:	f7ff ff2e 	bl	80011cc <__sinit>
 8001370:	f1b8 0f01 	cmp.w	r8, #1
 8001374:	bf08      	it	eq
 8001376:	89a3      	ldrheq	r3, [r4, #12]
 8001378:	6026      	str	r6, [r4, #0]
 800137a:	bf04      	itt	eq
 800137c:	f043 0301 	orreq.w	r3, r3, #1
 8001380:	81a3      	strheq	r3, [r4, #12]
 8001382:	89a3      	ldrh	r3, [r4, #12]
 8001384:	f013 0208 	ands.w	r2, r3, #8
 8001388:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800138c:	d01d      	beq.n	80013ca <setvbuf+0x14e>
 800138e:	07da      	lsls	r2, r3, #31
 8001390:	bf41      	itttt	mi
 8001392:	2200      	movmi	r2, #0
 8001394:	426d      	negmi	r5, r5
 8001396:	60a2      	strmi	r2, [r4, #8]
 8001398:	61a5      	strmi	r5, [r4, #24]
 800139a:	bf58      	it	pl
 800139c:	60a5      	strpl	r5, [r4, #8]
 800139e:	6e65      	ldr	r5, [r4, #100]	; 0x64
 80013a0:	f015 0501 	ands.w	r5, r5, #1
 80013a4:	d0d4      	beq.n	8001350 <setvbuf+0xd4>
 80013a6:	2500      	movs	r5, #0
 80013a8:	e7d7      	b.n	800135a <setvbuf+0xde>
 80013aa:	4648      	mov	r0, r9
 80013ac:	f000 f920 	bl	80015f0 <malloc>
 80013b0:	4606      	mov	r6, r0
 80013b2:	2800      	cmp	r0, #0
 80013b4:	d0ba      	beq.n	800132c <setvbuf+0xb0>
 80013b6:	89a3      	ldrh	r3, [r4, #12]
 80013b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013bc:	81a3      	strh	r3, [r4, #12]
 80013be:	464d      	mov	r5, r9
 80013c0:	e7d1      	b.n	8001366 <setvbuf+0xea>
 80013c2:	2500      	movs	r5, #0
 80013c4:	e7b4      	b.n	8001330 <setvbuf+0xb4>
 80013c6:	46a9      	mov	r9, r5
 80013c8:	e7f5      	b.n	80013b6 <setvbuf+0x13a>
 80013ca:	60a2      	str	r2, [r4, #8]
 80013cc:	e7e7      	b.n	800139e <setvbuf+0x122>
 80013ce:	f04f 35ff 	mov.w	r5, #4294967295
 80013d2:	e7c2      	b.n	800135a <setvbuf+0xde>
 80013d4:	20000084 	.word	0x20000084

080013d8 <__sread>:
 80013d8:	b510      	push	{r4, lr}
 80013da:	460c      	mov	r4, r1
 80013dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80013e0:	f000 f87a 	bl	80014d8 <_read_r>
 80013e4:	2800      	cmp	r0, #0
 80013e6:	bfab      	itete	ge
 80013e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80013ea:	89a3      	ldrhlt	r3, [r4, #12]
 80013ec:	181b      	addge	r3, r3, r0
 80013ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80013f2:	bfac      	ite	ge
 80013f4:	6563      	strge	r3, [r4, #84]	; 0x54
 80013f6:	81a3      	strhlt	r3, [r4, #12]
 80013f8:	bd10      	pop	{r4, pc}

080013fa <__swrite>:
 80013fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80013fe:	461f      	mov	r7, r3
 8001400:	898b      	ldrh	r3, [r1, #12]
 8001402:	05db      	lsls	r3, r3, #23
 8001404:	4605      	mov	r5, r0
 8001406:	460c      	mov	r4, r1
 8001408:	4616      	mov	r6, r2
 800140a:	d505      	bpl.n	8001418 <__swrite+0x1e>
 800140c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001410:	2302      	movs	r3, #2
 8001412:	2200      	movs	r2, #0
 8001414:	f000 f84e 	bl	80014b4 <_lseek_r>
 8001418:	89a3      	ldrh	r3, [r4, #12]
 800141a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800141e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001422:	81a3      	strh	r3, [r4, #12]
 8001424:	4632      	mov	r2, r6
 8001426:	463b      	mov	r3, r7
 8001428:	4628      	mov	r0, r5
 800142a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800142e:	f7ff ba2d 	b.w	800088c <_write_r>

08001432 <__sseek>:
 8001432:	b510      	push	{r4, lr}
 8001434:	460c      	mov	r4, r1
 8001436:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800143a:	f000 f83b 	bl	80014b4 <_lseek_r>
 800143e:	1c43      	adds	r3, r0, #1
 8001440:	89a3      	ldrh	r3, [r4, #12]
 8001442:	bf15      	itete	ne
 8001444:	6560      	strne	r0, [r4, #84]	; 0x54
 8001446:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800144a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800144e:	81a3      	strheq	r3, [r4, #12]
 8001450:	bf18      	it	ne
 8001452:	81a3      	strhne	r3, [r4, #12]
 8001454:	bd10      	pop	{r4, pc}

08001456 <__sclose>:
 8001456:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800145a:	f000 b81b 	b.w	8001494 <_close_r>

0800145e <memset>:
 800145e:	4402      	add	r2, r0
 8001460:	4603      	mov	r3, r0
 8001462:	4293      	cmp	r3, r2
 8001464:	d100      	bne.n	8001468 <memset+0xa>
 8001466:	4770      	bx	lr
 8001468:	f803 1b01 	strb.w	r1, [r3], #1
 800146c:	e7f9      	b.n	8001462 <memset+0x4>

0800146e <strncpy>:
 800146e:	b510      	push	{r4, lr}
 8001470:	3901      	subs	r1, #1
 8001472:	4603      	mov	r3, r0
 8001474:	b132      	cbz	r2, 8001484 <strncpy+0x16>
 8001476:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800147a:	f803 4b01 	strb.w	r4, [r3], #1
 800147e:	3a01      	subs	r2, #1
 8001480:	2c00      	cmp	r4, #0
 8001482:	d1f7      	bne.n	8001474 <strncpy+0x6>
 8001484:	441a      	add	r2, r3
 8001486:	2100      	movs	r1, #0
 8001488:	4293      	cmp	r3, r2
 800148a:	d100      	bne.n	800148e <strncpy+0x20>
 800148c:	bd10      	pop	{r4, pc}
 800148e:	f803 1b01 	strb.w	r1, [r3], #1
 8001492:	e7f9      	b.n	8001488 <strncpy+0x1a>

08001494 <_close_r>:
 8001494:	b538      	push	{r3, r4, r5, lr}
 8001496:	4d06      	ldr	r5, [pc, #24]	; (80014b0 <_close_r+0x1c>)
 8001498:	2300      	movs	r3, #0
 800149a:	4604      	mov	r4, r0
 800149c:	4608      	mov	r0, r1
 800149e:	602b      	str	r3, [r5, #0]
 80014a0:	f7ff fce9 	bl	8000e76 <_close>
 80014a4:	1c43      	adds	r3, r0, #1
 80014a6:	d102      	bne.n	80014ae <_close_r+0x1a>
 80014a8:	682b      	ldr	r3, [r5, #0]
 80014aa:	b103      	cbz	r3, 80014ae <_close_r+0x1a>
 80014ac:	6023      	str	r3, [r4, #0]
 80014ae:	bd38      	pop	{r3, r4, r5, pc}
 80014b0:	200002e8 	.word	0x200002e8

080014b4 <_lseek_r>:
 80014b4:	b538      	push	{r3, r4, r5, lr}
 80014b6:	4d07      	ldr	r5, [pc, #28]	; (80014d4 <_lseek_r+0x20>)
 80014b8:	4604      	mov	r4, r0
 80014ba:	4608      	mov	r0, r1
 80014bc:	4611      	mov	r1, r2
 80014be:	2200      	movs	r2, #0
 80014c0:	602a      	str	r2, [r5, #0]
 80014c2:	461a      	mov	r2, r3
 80014c4:	f7ff fcfe 	bl	8000ec4 <_lseek>
 80014c8:	1c43      	adds	r3, r0, #1
 80014ca:	d102      	bne.n	80014d2 <_lseek_r+0x1e>
 80014cc:	682b      	ldr	r3, [r5, #0]
 80014ce:	b103      	cbz	r3, 80014d2 <_lseek_r+0x1e>
 80014d0:	6023      	str	r3, [r4, #0]
 80014d2:	bd38      	pop	{r3, r4, r5, pc}
 80014d4:	200002e8 	.word	0x200002e8

080014d8 <_read_r>:
 80014d8:	b538      	push	{r3, r4, r5, lr}
 80014da:	4d07      	ldr	r5, [pc, #28]	; (80014f8 <_read_r+0x20>)
 80014dc:	4604      	mov	r4, r0
 80014de:	4608      	mov	r0, r1
 80014e0:	4611      	mov	r1, r2
 80014e2:	2200      	movs	r2, #0
 80014e4:	602a      	str	r2, [r5, #0]
 80014e6:	461a      	mov	r2, r3
 80014e8:	f7ff fca8 	bl	8000e3c <_read>
 80014ec:	1c43      	adds	r3, r0, #1
 80014ee:	d102      	bne.n	80014f6 <_read_r+0x1e>
 80014f0:	682b      	ldr	r3, [r5, #0]
 80014f2:	b103      	cbz	r3, 80014f6 <_read_r+0x1e>
 80014f4:	6023      	str	r3, [r4, #0]
 80014f6:	bd38      	pop	{r3, r4, r5, pc}
 80014f8:	200002e8 	.word	0x200002e8

080014fc <__errno>:
 80014fc:	4b01      	ldr	r3, [pc, #4]	; (8001504 <__errno+0x8>)
 80014fe:	6818      	ldr	r0, [r3, #0]
 8001500:	4770      	bx	lr
 8001502:	bf00      	nop
 8001504:	20000084 	.word	0x20000084

08001508 <__libc_init_array>:
 8001508:	b570      	push	{r4, r5, r6, lr}
 800150a:	4d0d      	ldr	r5, [pc, #52]	; (8001540 <__libc_init_array+0x38>)
 800150c:	4c0d      	ldr	r4, [pc, #52]	; (8001544 <__libc_init_array+0x3c>)
 800150e:	1b64      	subs	r4, r4, r5
 8001510:	10a4      	asrs	r4, r4, #2
 8001512:	2600      	movs	r6, #0
 8001514:	42a6      	cmp	r6, r4
 8001516:	d109      	bne.n	800152c <__libc_init_array+0x24>
 8001518:	4d0b      	ldr	r5, [pc, #44]	; (8001548 <__libc_init_array+0x40>)
 800151a:	4c0c      	ldr	r4, [pc, #48]	; (800154c <__libc_init_array+0x44>)
 800151c:	f000 fdfc 	bl	8002118 <_init>
 8001520:	1b64      	subs	r4, r4, r5
 8001522:	10a4      	asrs	r4, r4, #2
 8001524:	2600      	movs	r6, #0
 8001526:	42a6      	cmp	r6, r4
 8001528:	d105      	bne.n	8001536 <__libc_init_array+0x2e>
 800152a:	bd70      	pop	{r4, r5, r6, pc}
 800152c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001530:	4798      	blx	r3
 8001532:	3601      	adds	r6, #1
 8001534:	e7ee      	b.n	8001514 <__libc_init_array+0xc>
 8001536:	f855 3b04 	ldr.w	r3, [r5], #4
 800153a:	4798      	blx	r3
 800153c:	3601      	adds	r6, #1
 800153e:	e7f2      	b.n	8001526 <__libc_init_array+0x1e>
 8001540:	08002298 	.word	0x08002298
 8001544:	08002298 	.word	0x08002298
 8001548:	08002298 	.word	0x08002298
 800154c:	0800229c 	.word	0x0800229c

08001550 <__retarget_lock_init_recursive>:
 8001550:	4770      	bx	lr

08001552 <__retarget_lock_acquire_recursive>:
 8001552:	4770      	bx	lr

08001554 <__retarget_lock_release_recursive>:
 8001554:	4770      	bx	lr
	...

08001558 <_free_r>:
 8001558:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800155a:	2900      	cmp	r1, #0
 800155c:	d044      	beq.n	80015e8 <_free_r+0x90>
 800155e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001562:	9001      	str	r0, [sp, #4]
 8001564:	2b00      	cmp	r3, #0
 8001566:	f1a1 0404 	sub.w	r4, r1, #4
 800156a:	bfb8      	it	lt
 800156c:	18e4      	addlt	r4, r4, r3
 800156e:	f000 f8e7 	bl	8001740 <__malloc_lock>
 8001572:	4a1e      	ldr	r2, [pc, #120]	; (80015ec <_free_r+0x94>)
 8001574:	9801      	ldr	r0, [sp, #4]
 8001576:	6813      	ldr	r3, [r2, #0]
 8001578:	b933      	cbnz	r3, 8001588 <_free_r+0x30>
 800157a:	6063      	str	r3, [r4, #4]
 800157c:	6014      	str	r4, [r2, #0]
 800157e:	b003      	add	sp, #12
 8001580:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001584:	f000 b8e2 	b.w	800174c <__malloc_unlock>
 8001588:	42a3      	cmp	r3, r4
 800158a:	d908      	bls.n	800159e <_free_r+0x46>
 800158c:	6825      	ldr	r5, [r4, #0]
 800158e:	1961      	adds	r1, r4, r5
 8001590:	428b      	cmp	r3, r1
 8001592:	bf01      	itttt	eq
 8001594:	6819      	ldreq	r1, [r3, #0]
 8001596:	685b      	ldreq	r3, [r3, #4]
 8001598:	1949      	addeq	r1, r1, r5
 800159a:	6021      	streq	r1, [r4, #0]
 800159c:	e7ed      	b.n	800157a <_free_r+0x22>
 800159e:	461a      	mov	r2, r3
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	b10b      	cbz	r3, 80015a8 <_free_r+0x50>
 80015a4:	42a3      	cmp	r3, r4
 80015a6:	d9fa      	bls.n	800159e <_free_r+0x46>
 80015a8:	6811      	ldr	r1, [r2, #0]
 80015aa:	1855      	adds	r5, r2, r1
 80015ac:	42a5      	cmp	r5, r4
 80015ae:	d10b      	bne.n	80015c8 <_free_r+0x70>
 80015b0:	6824      	ldr	r4, [r4, #0]
 80015b2:	4421      	add	r1, r4
 80015b4:	1854      	adds	r4, r2, r1
 80015b6:	42a3      	cmp	r3, r4
 80015b8:	6011      	str	r1, [r2, #0]
 80015ba:	d1e0      	bne.n	800157e <_free_r+0x26>
 80015bc:	681c      	ldr	r4, [r3, #0]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	6053      	str	r3, [r2, #4]
 80015c2:	440c      	add	r4, r1
 80015c4:	6014      	str	r4, [r2, #0]
 80015c6:	e7da      	b.n	800157e <_free_r+0x26>
 80015c8:	d902      	bls.n	80015d0 <_free_r+0x78>
 80015ca:	230c      	movs	r3, #12
 80015cc:	6003      	str	r3, [r0, #0]
 80015ce:	e7d6      	b.n	800157e <_free_r+0x26>
 80015d0:	6825      	ldr	r5, [r4, #0]
 80015d2:	1961      	adds	r1, r4, r5
 80015d4:	428b      	cmp	r3, r1
 80015d6:	bf04      	itt	eq
 80015d8:	6819      	ldreq	r1, [r3, #0]
 80015da:	685b      	ldreq	r3, [r3, #4]
 80015dc:	6063      	str	r3, [r4, #4]
 80015de:	bf04      	itt	eq
 80015e0:	1949      	addeq	r1, r1, r5
 80015e2:	6021      	streq	r1, [r4, #0]
 80015e4:	6054      	str	r4, [r2, #4]
 80015e6:	e7ca      	b.n	800157e <_free_r+0x26>
 80015e8:	b003      	add	sp, #12
 80015ea:	bd30      	pop	{r4, r5, pc}
 80015ec:	200002f0 	.word	0x200002f0

080015f0 <malloc>:
 80015f0:	4b02      	ldr	r3, [pc, #8]	; (80015fc <malloc+0xc>)
 80015f2:	4601      	mov	r1, r0
 80015f4:	6818      	ldr	r0, [r3, #0]
 80015f6:	f000 b823 	b.w	8001640 <_malloc_r>
 80015fa:	bf00      	nop
 80015fc:	20000084 	.word	0x20000084

08001600 <sbrk_aligned>:
 8001600:	b570      	push	{r4, r5, r6, lr}
 8001602:	4e0e      	ldr	r6, [pc, #56]	; (800163c <sbrk_aligned+0x3c>)
 8001604:	460c      	mov	r4, r1
 8001606:	6831      	ldr	r1, [r6, #0]
 8001608:	4605      	mov	r5, r0
 800160a:	b911      	cbnz	r1, 8001612 <sbrk_aligned+0x12>
 800160c:	f000 fd74 	bl	80020f8 <_sbrk_r>
 8001610:	6030      	str	r0, [r6, #0]
 8001612:	4621      	mov	r1, r4
 8001614:	4628      	mov	r0, r5
 8001616:	f000 fd6f 	bl	80020f8 <_sbrk_r>
 800161a:	1c43      	adds	r3, r0, #1
 800161c:	d00a      	beq.n	8001634 <sbrk_aligned+0x34>
 800161e:	1cc4      	adds	r4, r0, #3
 8001620:	f024 0403 	bic.w	r4, r4, #3
 8001624:	42a0      	cmp	r0, r4
 8001626:	d007      	beq.n	8001638 <sbrk_aligned+0x38>
 8001628:	1a21      	subs	r1, r4, r0
 800162a:	4628      	mov	r0, r5
 800162c:	f000 fd64 	bl	80020f8 <_sbrk_r>
 8001630:	3001      	adds	r0, #1
 8001632:	d101      	bne.n	8001638 <sbrk_aligned+0x38>
 8001634:	f04f 34ff 	mov.w	r4, #4294967295
 8001638:	4620      	mov	r0, r4
 800163a:	bd70      	pop	{r4, r5, r6, pc}
 800163c:	200002f4 	.word	0x200002f4

08001640 <_malloc_r>:
 8001640:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001644:	1ccd      	adds	r5, r1, #3
 8001646:	f025 0503 	bic.w	r5, r5, #3
 800164a:	3508      	adds	r5, #8
 800164c:	2d0c      	cmp	r5, #12
 800164e:	bf38      	it	cc
 8001650:	250c      	movcc	r5, #12
 8001652:	2d00      	cmp	r5, #0
 8001654:	4607      	mov	r7, r0
 8001656:	db01      	blt.n	800165c <_malloc_r+0x1c>
 8001658:	42a9      	cmp	r1, r5
 800165a:	d905      	bls.n	8001668 <_malloc_r+0x28>
 800165c:	230c      	movs	r3, #12
 800165e:	603b      	str	r3, [r7, #0]
 8001660:	2600      	movs	r6, #0
 8001662:	4630      	mov	r0, r6
 8001664:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001668:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800173c <_malloc_r+0xfc>
 800166c:	f000 f868 	bl	8001740 <__malloc_lock>
 8001670:	f8d8 3000 	ldr.w	r3, [r8]
 8001674:	461c      	mov	r4, r3
 8001676:	bb5c      	cbnz	r4, 80016d0 <_malloc_r+0x90>
 8001678:	4629      	mov	r1, r5
 800167a:	4638      	mov	r0, r7
 800167c:	f7ff ffc0 	bl	8001600 <sbrk_aligned>
 8001680:	1c43      	adds	r3, r0, #1
 8001682:	4604      	mov	r4, r0
 8001684:	d155      	bne.n	8001732 <_malloc_r+0xf2>
 8001686:	f8d8 4000 	ldr.w	r4, [r8]
 800168a:	4626      	mov	r6, r4
 800168c:	2e00      	cmp	r6, #0
 800168e:	d145      	bne.n	800171c <_malloc_r+0xdc>
 8001690:	2c00      	cmp	r4, #0
 8001692:	d048      	beq.n	8001726 <_malloc_r+0xe6>
 8001694:	6823      	ldr	r3, [r4, #0]
 8001696:	4631      	mov	r1, r6
 8001698:	4638      	mov	r0, r7
 800169a:	eb04 0903 	add.w	r9, r4, r3
 800169e:	f000 fd2b 	bl	80020f8 <_sbrk_r>
 80016a2:	4581      	cmp	r9, r0
 80016a4:	d13f      	bne.n	8001726 <_malloc_r+0xe6>
 80016a6:	6821      	ldr	r1, [r4, #0]
 80016a8:	1a6d      	subs	r5, r5, r1
 80016aa:	4629      	mov	r1, r5
 80016ac:	4638      	mov	r0, r7
 80016ae:	f7ff ffa7 	bl	8001600 <sbrk_aligned>
 80016b2:	3001      	adds	r0, #1
 80016b4:	d037      	beq.n	8001726 <_malloc_r+0xe6>
 80016b6:	6823      	ldr	r3, [r4, #0]
 80016b8:	442b      	add	r3, r5
 80016ba:	6023      	str	r3, [r4, #0]
 80016bc:	f8d8 3000 	ldr.w	r3, [r8]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d038      	beq.n	8001736 <_malloc_r+0xf6>
 80016c4:	685a      	ldr	r2, [r3, #4]
 80016c6:	42a2      	cmp	r2, r4
 80016c8:	d12b      	bne.n	8001722 <_malloc_r+0xe2>
 80016ca:	2200      	movs	r2, #0
 80016cc:	605a      	str	r2, [r3, #4]
 80016ce:	e00f      	b.n	80016f0 <_malloc_r+0xb0>
 80016d0:	6822      	ldr	r2, [r4, #0]
 80016d2:	1b52      	subs	r2, r2, r5
 80016d4:	d41f      	bmi.n	8001716 <_malloc_r+0xd6>
 80016d6:	2a0b      	cmp	r2, #11
 80016d8:	d917      	bls.n	800170a <_malloc_r+0xca>
 80016da:	1961      	adds	r1, r4, r5
 80016dc:	42a3      	cmp	r3, r4
 80016de:	6025      	str	r5, [r4, #0]
 80016e0:	bf18      	it	ne
 80016e2:	6059      	strne	r1, [r3, #4]
 80016e4:	6863      	ldr	r3, [r4, #4]
 80016e6:	bf08      	it	eq
 80016e8:	f8c8 1000 	streq.w	r1, [r8]
 80016ec:	5162      	str	r2, [r4, r5]
 80016ee:	604b      	str	r3, [r1, #4]
 80016f0:	4638      	mov	r0, r7
 80016f2:	f104 060b 	add.w	r6, r4, #11
 80016f6:	f000 f829 	bl	800174c <__malloc_unlock>
 80016fa:	f026 0607 	bic.w	r6, r6, #7
 80016fe:	1d23      	adds	r3, r4, #4
 8001700:	1af2      	subs	r2, r6, r3
 8001702:	d0ae      	beq.n	8001662 <_malloc_r+0x22>
 8001704:	1b9b      	subs	r3, r3, r6
 8001706:	50a3      	str	r3, [r4, r2]
 8001708:	e7ab      	b.n	8001662 <_malloc_r+0x22>
 800170a:	42a3      	cmp	r3, r4
 800170c:	6862      	ldr	r2, [r4, #4]
 800170e:	d1dd      	bne.n	80016cc <_malloc_r+0x8c>
 8001710:	f8c8 2000 	str.w	r2, [r8]
 8001714:	e7ec      	b.n	80016f0 <_malloc_r+0xb0>
 8001716:	4623      	mov	r3, r4
 8001718:	6864      	ldr	r4, [r4, #4]
 800171a:	e7ac      	b.n	8001676 <_malloc_r+0x36>
 800171c:	4634      	mov	r4, r6
 800171e:	6876      	ldr	r6, [r6, #4]
 8001720:	e7b4      	b.n	800168c <_malloc_r+0x4c>
 8001722:	4613      	mov	r3, r2
 8001724:	e7cc      	b.n	80016c0 <_malloc_r+0x80>
 8001726:	230c      	movs	r3, #12
 8001728:	603b      	str	r3, [r7, #0]
 800172a:	4638      	mov	r0, r7
 800172c:	f000 f80e 	bl	800174c <__malloc_unlock>
 8001730:	e797      	b.n	8001662 <_malloc_r+0x22>
 8001732:	6025      	str	r5, [r4, #0]
 8001734:	e7dc      	b.n	80016f0 <_malloc_r+0xb0>
 8001736:	605b      	str	r3, [r3, #4]
 8001738:	deff      	udf	#255	; 0xff
 800173a:	bf00      	nop
 800173c:	200002f0 	.word	0x200002f0

08001740 <__malloc_lock>:
 8001740:	4801      	ldr	r0, [pc, #4]	; (8001748 <__malloc_lock+0x8>)
 8001742:	f7ff bf06 	b.w	8001552 <__retarget_lock_acquire_recursive>
 8001746:	bf00      	nop
 8001748:	200002ec 	.word	0x200002ec

0800174c <__malloc_unlock>:
 800174c:	4801      	ldr	r0, [pc, #4]	; (8001754 <__malloc_unlock+0x8>)
 800174e:	f7ff bf01 	b.w	8001554 <__retarget_lock_release_recursive>
 8001752:	bf00      	nop
 8001754:	200002ec 	.word	0x200002ec

08001758 <__sfputc_r>:
 8001758:	6893      	ldr	r3, [r2, #8]
 800175a:	3b01      	subs	r3, #1
 800175c:	2b00      	cmp	r3, #0
 800175e:	b410      	push	{r4}
 8001760:	6093      	str	r3, [r2, #8]
 8001762:	da08      	bge.n	8001776 <__sfputc_r+0x1e>
 8001764:	6994      	ldr	r4, [r2, #24]
 8001766:	42a3      	cmp	r3, r4
 8001768:	db01      	blt.n	800176e <__sfputc_r+0x16>
 800176a:	290a      	cmp	r1, #10
 800176c:	d103      	bne.n	8001776 <__sfputc_r+0x1e>
 800176e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001772:	f000 bc09 	b.w	8001f88 <__swbuf_r>
 8001776:	6813      	ldr	r3, [r2, #0]
 8001778:	1c58      	adds	r0, r3, #1
 800177a:	6010      	str	r0, [r2, #0]
 800177c:	7019      	strb	r1, [r3, #0]
 800177e:	4608      	mov	r0, r1
 8001780:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001784:	4770      	bx	lr

08001786 <__sfputs_r>:
 8001786:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001788:	4606      	mov	r6, r0
 800178a:	460f      	mov	r7, r1
 800178c:	4614      	mov	r4, r2
 800178e:	18d5      	adds	r5, r2, r3
 8001790:	42ac      	cmp	r4, r5
 8001792:	d101      	bne.n	8001798 <__sfputs_r+0x12>
 8001794:	2000      	movs	r0, #0
 8001796:	e007      	b.n	80017a8 <__sfputs_r+0x22>
 8001798:	f814 1b01 	ldrb.w	r1, [r4], #1
 800179c:	463a      	mov	r2, r7
 800179e:	4630      	mov	r0, r6
 80017a0:	f7ff ffda 	bl	8001758 <__sfputc_r>
 80017a4:	1c43      	adds	r3, r0, #1
 80017a6:	d1f3      	bne.n	8001790 <__sfputs_r+0xa>
 80017a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080017ac <_vfiprintf_r>:
 80017ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80017b0:	460d      	mov	r5, r1
 80017b2:	b09d      	sub	sp, #116	; 0x74
 80017b4:	4614      	mov	r4, r2
 80017b6:	4698      	mov	r8, r3
 80017b8:	4606      	mov	r6, r0
 80017ba:	b118      	cbz	r0, 80017c4 <_vfiprintf_r+0x18>
 80017bc:	6a03      	ldr	r3, [r0, #32]
 80017be:	b90b      	cbnz	r3, 80017c4 <_vfiprintf_r+0x18>
 80017c0:	f7ff fd04 	bl	80011cc <__sinit>
 80017c4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80017c6:	07d9      	lsls	r1, r3, #31
 80017c8:	d405      	bmi.n	80017d6 <_vfiprintf_r+0x2a>
 80017ca:	89ab      	ldrh	r3, [r5, #12]
 80017cc:	059a      	lsls	r2, r3, #22
 80017ce:	d402      	bmi.n	80017d6 <_vfiprintf_r+0x2a>
 80017d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80017d2:	f7ff febe 	bl	8001552 <__retarget_lock_acquire_recursive>
 80017d6:	89ab      	ldrh	r3, [r5, #12]
 80017d8:	071b      	lsls	r3, r3, #28
 80017da:	d501      	bpl.n	80017e0 <_vfiprintf_r+0x34>
 80017dc:	692b      	ldr	r3, [r5, #16]
 80017de:	b99b      	cbnz	r3, 8001808 <_vfiprintf_r+0x5c>
 80017e0:	4629      	mov	r1, r5
 80017e2:	4630      	mov	r0, r6
 80017e4:	f000 fc0e 	bl	8002004 <__swsetup_r>
 80017e8:	b170      	cbz	r0, 8001808 <_vfiprintf_r+0x5c>
 80017ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80017ec:	07dc      	lsls	r4, r3, #31
 80017ee:	d504      	bpl.n	80017fa <_vfiprintf_r+0x4e>
 80017f0:	f04f 30ff 	mov.w	r0, #4294967295
 80017f4:	b01d      	add	sp, #116	; 0x74
 80017f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80017fa:	89ab      	ldrh	r3, [r5, #12]
 80017fc:	0598      	lsls	r0, r3, #22
 80017fe:	d4f7      	bmi.n	80017f0 <_vfiprintf_r+0x44>
 8001800:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001802:	f7ff fea7 	bl	8001554 <__retarget_lock_release_recursive>
 8001806:	e7f3      	b.n	80017f0 <_vfiprintf_r+0x44>
 8001808:	2300      	movs	r3, #0
 800180a:	9309      	str	r3, [sp, #36]	; 0x24
 800180c:	2320      	movs	r3, #32
 800180e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001812:	f8cd 800c 	str.w	r8, [sp, #12]
 8001816:	2330      	movs	r3, #48	; 0x30
 8001818:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80019cc <_vfiprintf_r+0x220>
 800181c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001820:	f04f 0901 	mov.w	r9, #1
 8001824:	4623      	mov	r3, r4
 8001826:	469a      	mov	sl, r3
 8001828:	f813 2b01 	ldrb.w	r2, [r3], #1
 800182c:	b10a      	cbz	r2, 8001832 <_vfiprintf_r+0x86>
 800182e:	2a25      	cmp	r2, #37	; 0x25
 8001830:	d1f9      	bne.n	8001826 <_vfiprintf_r+0x7a>
 8001832:	ebba 0b04 	subs.w	fp, sl, r4
 8001836:	d00b      	beq.n	8001850 <_vfiprintf_r+0xa4>
 8001838:	465b      	mov	r3, fp
 800183a:	4622      	mov	r2, r4
 800183c:	4629      	mov	r1, r5
 800183e:	4630      	mov	r0, r6
 8001840:	f7ff ffa1 	bl	8001786 <__sfputs_r>
 8001844:	3001      	adds	r0, #1
 8001846:	f000 80a9 	beq.w	800199c <_vfiprintf_r+0x1f0>
 800184a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800184c:	445a      	add	r2, fp
 800184e:	9209      	str	r2, [sp, #36]	; 0x24
 8001850:	f89a 3000 	ldrb.w	r3, [sl]
 8001854:	2b00      	cmp	r3, #0
 8001856:	f000 80a1 	beq.w	800199c <_vfiprintf_r+0x1f0>
 800185a:	2300      	movs	r3, #0
 800185c:	f04f 32ff 	mov.w	r2, #4294967295
 8001860:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001864:	f10a 0a01 	add.w	sl, sl, #1
 8001868:	9304      	str	r3, [sp, #16]
 800186a:	9307      	str	r3, [sp, #28]
 800186c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001870:	931a      	str	r3, [sp, #104]	; 0x68
 8001872:	4654      	mov	r4, sl
 8001874:	2205      	movs	r2, #5
 8001876:	f814 1b01 	ldrb.w	r1, [r4], #1
 800187a:	4854      	ldr	r0, [pc, #336]	; (80019cc <_vfiprintf_r+0x220>)
 800187c:	f7fe fcb0 	bl	80001e0 <memchr>
 8001880:	9a04      	ldr	r2, [sp, #16]
 8001882:	b9d8      	cbnz	r0, 80018bc <_vfiprintf_r+0x110>
 8001884:	06d1      	lsls	r1, r2, #27
 8001886:	bf44      	itt	mi
 8001888:	2320      	movmi	r3, #32
 800188a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800188e:	0713      	lsls	r3, r2, #28
 8001890:	bf44      	itt	mi
 8001892:	232b      	movmi	r3, #43	; 0x2b
 8001894:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001898:	f89a 3000 	ldrb.w	r3, [sl]
 800189c:	2b2a      	cmp	r3, #42	; 0x2a
 800189e:	d015      	beq.n	80018cc <_vfiprintf_r+0x120>
 80018a0:	9a07      	ldr	r2, [sp, #28]
 80018a2:	4654      	mov	r4, sl
 80018a4:	2000      	movs	r0, #0
 80018a6:	f04f 0c0a 	mov.w	ip, #10
 80018aa:	4621      	mov	r1, r4
 80018ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 80018b0:	3b30      	subs	r3, #48	; 0x30
 80018b2:	2b09      	cmp	r3, #9
 80018b4:	d94d      	bls.n	8001952 <_vfiprintf_r+0x1a6>
 80018b6:	b1b0      	cbz	r0, 80018e6 <_vfiprintf_r+0x13a>
 80018b8:	9207      	str	r2, [sp, #28]
 80018ba:	e014      	b.n	80018e6 <_vfiprintf_r+0x13a>
 80018bc:	eba0 0308 	sub.w	r3, r0, r8
 80018c0:	fa09 f303 	lsl.w	r3, r9, r3
 80018c4:	4313      	orrs	r3, r2
 80018c6:	9304      	str	r3, [sp, #16]
 80018c8:	46a2      	mov	sl, r4
 80018ca:	e7d2      	b.n	8001872 <_vfiprintf_r+0xc6>
 80018cc:	9b03      	ldr	r3, [sp, #12]
 80018ce:	1d19      	adds	r1, r3, #4
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	9103      	str	r1, [sp, #12]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	bfbb      	ittet	lt
 80018d8:	425b      	neglt	r3, r3
 80018da:	f042 0202 	orrlt.w	r2, r2, #2
 80018de:	9307      	strge	r3, [sp, #28]
 80018e0:	9307      	strlt	r3, [sp, #28]
 80018e2:	bfb8      	it	lt
 80018e4:	9204      	strlt	r2, [sp, #16]
 80018e6:	7823      	ldrb	r3, [r4, #0]
 80018e8:	2b2e      	cmp	r3, #46	; 0x2e
 80018ea:	d10c      	bne.n	8001906 <_vfiprintf_r+0x15a>
 80018ec:	7863      	ldrb	r3, [r4, #1]
 80018ee:	2b2a      	cmp	r3, #42	; 0x2a
 80018f0:	d134      	bne.n	800195c <_vfiprintf_r+0x1b0>
 80018f2:	9b03      	ldr	r3, [sp, #12]
 80018f4:	1d1a      	adds	r2, r3, #4
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	9203      	str	r2, [sp, #12]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	bfb8      	it	lt
 80018fe:	f04f 33ff 	movlt.w	r3, #4294967295
 8001902:	3402      	adds	r4, #2
 8001904:	9305      	str	r3, [sp, #20]
 8001906:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80019dc <_vfiprintf_r+0x230>
 800190a:	7821      	ldrb	r1, [r4, #0]
 800190c:	2203      	movs	r2, #3
 800190e:	4650      	mov	r0, sl
 8001910:	f7fe fc66 	bl	80001e0 <memchr>
 8001914:	b138      	cbz	r0, 8001926 <_vfiprintf_r+0x17a>
 8001916:	9b04      	ldr	r3, [sp, #16]
 8001918:	eba0 000a 	sub.w	r0, r0, sl
 800191c:	2240      	movs	r2, #64	; 0x40
 800191e:	4082      	lsls	r2, r0
 8001920:	4313      	orrs	r3, r2
 8001922:	3401      	adds	r4, #1
 8001924:	9304      	str	r3, [sp, #16]
 8001926:	f814 1b01 	ldrb.w	r1, [r4], #1
 800192a:	4829      	ldr	r0, [pc, #164]	; (80019d0 <_vfiprintf_r+0x224>)
 800192c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001930:	2206      	movs	r2, #6
 8001932:	f7fe fc55 	bl	80001e0 <memchr>
 8001936:	2800      	cmp	r0, #0
 8001938:	d03f      	beq.n	80019ba <_vfiprintf_r+0x20e>
 800193a:	4b26      	ldr	r3, [pc, #152]	; (80019d4 <_vfiprintf_r+0x228>)
 800193c:	bb1b      	cbnz	r3, 8001986 <_vfiprintf_r+0x1da>
 800193e:	9b03      	ldr	r3, [sp, #12]
 8001940:	3307      	adds	r3, #7
 8001942:	f023 0307 	bic.w	r3, r3, #7
 8001946:	3308      	adds	r3, #8
 8001948:	9303      	str	r3, [sp, #12]
 800194a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800194c:	443b      	add	r3, r7
 800194e:	9309      	str	r3, [sp, #36]	; 0x24
 8001950:	e768      	b.n	8001824 <_vfiprintf_r+0x78>
 8001952:	fb0c 3202 	mla	r2, ip, r2, r3
 8001956:	460c      	mov	r4, r1
 8001958:	2001      	movs	r0, #1
 800195a:	e7a6      	b.n	80018aa <_vfiprintf_r+0xfe>
 800195c:	2300      	movs	r3, #0
 800195e:	3401      	adds	r4, #1
 8001960:	9305      	str	r3, [sp, #20]
 8001962:	4619      	mov	r1, r3
 8001964:	f04f 0c0a 	mov.w	ip, #10
 8001968:	4620      	mov	r0, r4
 800196a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800196e:	3a30      	subs	r2, #48	; 0x30
 8001970:	2a09      	cmp	r2, #9
 8001972:	d903      	bls.n	800197c <_vfiprintf_r+0x1d0>
 8001974:	2b00      	cmp	r3, #0
 8001976:	d0c6      	beq.n	8001906 <_vfiprintf_r+0x15a>
 8001978:	9105      	str	r1, [sp, #20]
 800197a:	e7c4      	b.n	8001906 <_vfiprintf_r+0x15a>
 800197c:	fb0c 2101 	mla	r1, ip, r1, r2
 8001980:	4604      	mov	r4, r0
 8001982:	2301      	movs	r3, #1
 8001984:	e7f0      	b.n	8001968 <_vfiprintf_r+0x1bc>
 8001986:	ab03      	add	r3, sp, #12
 8001988:	9300      	str	r3, [sp, #0]
 800198a:	462a      	mov	r2, r5
 800198c:	4b12      	ldr	r3, [pc, #72]	; (80019d8 <_vfiprintf_r+0x22c>)
 800198e:	a904      	add	r1, sp, #16
 8001990:	4630      	mov	r0, r6
 8001992:	f3af 8000 	nop.w
 8001996:	4607      	mov	r7, r0
 8001998:	1c78      	adds	r0, r7, #1
 800199a:	d1d6      	bne.n	800194a <_vfiprintf_r+0x19e>
 800199c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800199e:	07d9      	lsls	r1, r3, #31
 80019a0:	d405      	bmi.n	80019ae <_vfiprintf_r+0x202>
 80019a2:	89ab      	ldrh	r3, [r5, #12]
 80019a4:	059a      	lsls	r2, r3, #22
 80019a6:	d402      	bmi.n	80019ae <_vfiprintf_r+0x202>
 80019a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80019aa:	f7ff fdd3 	bl	8001554 <__retarget_lock_release_recursive>
 80019ae:	89ab      	ldrh	r3, [r5, #12]
 80019b0:	065b      	lsls	r3, r3, #25
 80019b2:	f53f af1d 	bmi.w	80017f0 <_vfiprintf_r+0x44>
 80019b6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80019b8:	e71c      	b.n	80017f4 <_vfiprintf_r+0x48>
 80019ba:	ab03      	add	r3, sp, #12
 80019bc:	9300      	str	r3, [sp, #0]
 80019be:	462a      	mov	r2, r5
 80019c0:	4b05      	ldr	r3, [pc, #20]	; (80019d8 <_vfiprintf_r+0x22c>)
 80019c2:	a904      	add	r1, sp, #16
 80019c4:	4630      	mov	r0, r6
 80019c6:	f000 f879 	bl	8001abc <_printf_i>
 80019ca:	e7e4      	b.n	8001996 <_vfiprintf_r+0x1ea>
 80019cc:	08002264 	.word	0x08002264
 80019d0:	0800226e 	.word	0x0800226e
 80019d4:	00000000 	.word	0x00000000
 80019d8:	08001787 	.word	0x08001787
 80019dc:	0800226a 	.word	0x0800226a

080019e0 <_printf_common>:
 80019e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80019e4:	4616      	mov	r6, r2
 80019e6:	4699      	mov	r9, r3
 80019e8:	688a      	ldr	r2, [r1, #8]
 80019ea:	690b      	ldr	r3, [r1, #16]
 80019ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80019f0:	4293      	cmp	r3, r2
 80019f2:	bfb8      	it	lt
 80019f4:	4613      	movlt	r3, r2
 80019f6:	6033      	str	r3, [r6, #0]
 80019f8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80019fc:	4607      	mov	r7, r0
 80019fe:	460c      	mov	r4, r1
 8001a00:	b10a      	cbz	r2, 8001a06 <_printf_common+0x26>
 8001a02:	3301      	adds	r3, #1
 8001a04:	6033      	str	r3, [r6, #0]
 8001a06:	6823      	ldr	r3, [r4, #0]
 8001a08:	0699      	lsls	r1, r3, #26
 8001a0a:	bf42      	ittt	mi
 8001a0c:	6833      	ldrmi	r3, [r6, #0]
 8001a0e:	3302      	addmi	r3, #2
 8001a10:	6033      	strmi	r3, [r6, #0]
 8001a12:	6825      	ldr	r5, [r4, #0]
 8001a14:	f015 0506 	ands.w	r5, r5, #6
 8001a18:	d106      	bne.n	8001a28 <_printf_common+0x48>
 8001a1a:	f104 0a19 	add.w	sl, r4, #25
 8001a1e:	68e3      	ldr	r3, [r4, #12]
 8001a20:	6832      	ldr	r2, [r6, #0]
 8001a22:	1a9b      	subs	r3, r3, r2
 8001a24:	42ab      	cmp	r3, r5
 8001a26:	dc26      	bgt.n	8001a76 <_printf_common+0x96>
 8001a28:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001a2c:	1e13      	subs	r3, r2, #0
 8001a2e:	6822      	ldr	r2, [r4, #0]
 8001a30:	bf18      	it	ne
 8001a32:	2301      	movne	r3, #1
 8001a34:	0692      	lsls	r2, r2, #26
 8001a36:	d42b      	bmi.n	8001a90 <_printf_common+0xb0>
 8001a38:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001a3c:	4649      	mov	r1, r9
 8001a3e:	4638      	mov	r0, r7
 8001a40:	47c0      	blx	r8
 8001a42:	3001      	adds	r0, #1
 8001a44:	d01e      	beq.n	8001a84 <_printf_common+0xa4>
 8001a46:	6823      	ldr	r3, [r4, #0]
 8001a48:	6922      	ldr	r2, [r4, #16]
 8001a4a:	f003 0306 	and.w	r3, r3, #6
 8001a4e:	2b04      	cmp	r3, #4
 8001a50:	bf02      	ittt	eq
 8001a52:	68e5      	ldreq	r5, [r4, #12]
 8001a54:	6833      	ldreq	r3, [r6, #0]
 8001a56:	1aed      	subeq	r5, r5, r3
 8001a58:	68a3      	ldr	r3, [r4, #8]
 8001a5a:	bf0c      	ite	eq
 8001a5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001a60:	2500      	movne	r5, #0
 8001a62:	4293      	cmp	r3, r2
 8001a64:	bfc4      	itt	gt
 8001a66:	1a9b      	subgt	r3, r3, r2
 8001a68:	18ed      	addgt	r5, r5, r3
 8001a6a:	2600      	movs	r6, #0
 8001a6c:	341a      	adds	r4, #26
 8001a6e:	42b5      	cmp	r5, r6
 8001a70:	d11a      	bne.n	8001aa8 <_printf_common+0xc8>
 8001a72:	2000      	movs	r0, #0
 8001a74:	e008      	b.n	8001a88 <_printf_common+0xa8>
 8001a76:	2301      	movs	r3, #1
 8001a78:	4652      	mov	r2, sl
 8001a7a:	4649      	mov	r1, r9
 8001a7c:	4638      	mov	r0, r7
 8001a7e:	47c0      	blx	r8
 8001a80:	3001      	adds	r0, #1
 8001a82:	d103      	bne.n	8001a8c <_printf_common+0xac>
 8001a84:	f04f 30ff 	mov.w	r0, #4294967295
 8001a88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001a8c:	3501      	adds	r5, #1
 8001a8e:	e7c6      	b.n	8001a1e <_printf_common+0x3e>
 8001a90:	18e1      	adds	r1, r4, r3
 8001a92:	1c5a      	adds	r2, r3, #1
 8001a94:	2030      	movs	r0, #48	; 0x30
 8001a96:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001a9a:	4422      	add	r2, r4
 8001a9c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001aa0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001aa4:	3302      	adds	r3, #2
 8001aa6:	e7c7      	b.n	8001a38 <_printf_common+0x58>
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	4622      	mov	r2, r4
 8001aac:	4649      	mov	r1, r9
 8001aae:	4638      	mov	r0, r7
 8001ab0:	47c0      	blx	r8
 8001ab2:	3001      	adds	r0, #1
 8001ab4:	d0e6      	beq.n	8001a84 <_printf_common+0xa4>
 8001ab6:	3601      	adds	r6, #1
 8001ab8:	e7d9      	b.n	8001a6e <_printf_common+0x8e>
	...

08001abc <_printf_i>:
 8001abc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001ac0:	7e0f      	ldrb	r7, [r1, #24]
 8001ac2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001ac4:	2f78      	cmp	r7, #120	; 0x78
 8001ac6:	4691      	mov	r9, r2
 8001ac8:	4680      	mov	r8, r0
 8001aca:	460c      	mov	r4, r1
 8001acc:	469a      	mov	sl, r3
 8001ace:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8001ad2:	d807      	bhi.n	8001ae4 <_printf_i+0x28>
 8001ad4:	2f62      	cmp	r7, #98	; 0x62
 8001ad6:	d80a      	bhi.n	8001aee <_printf_i+0x32>
 8001ad8:	2f00      	cmp	r7, #0
 8001ada:	f000 80d4 	beq.w	8001c86 <_printf_i+0x1ca>
 8001ade:	2f58      	cmp	r7, #88	; 0x58
 8001ae0:	f000 80c0 	beq.w	8001c64 <_printf_i+0x1a8>
 8001ae4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001ae8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001aec:	e03a      	b.n	8001b64 <_printf_i+0xa8>
 8001aee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001af2:	2b15      	cmp	r3, #21
 8001af4:	d8f6      	bhi.n	8001ae4 <_printf_i+0x28>
 8001af6:	a101      	add	r1, pc, #4	; (adr r1, 8001afc <_printf_i+0x40>)
 8001af8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001afc:	08001b55 	.word	0x08001b55
 8001b00:	08001b69 	.word	0x08001b69
 8001b04:	08001ae5 	.word	0x08001ae5
 8001b08:	08001ae5 	.word	0x08001ae5
 8001b0c:	08001ae5 	.word	0x08001ae5
 8001b10:	08001ae5 	.word	0x08001ae5
 8001b14:	08001b69 	.word	0x08001b69
 8001b18:	08001ae5 	.word	0x08001ae5
 8001b1c:	08001ae5 	.word	0x08001ae5
 8001b20:	08001ae5 	.word	0x08001ae5
 8001b24:	08001ae5 	.word	0x08001ae5
 8001b28:	08001c6d 	.word	0x08001c6d
 8001b2c:	08001b95 	.word	0x08001b95
 8001b30:	08001c27 	.word	0x08001c27
 8001b34:	08001ae5 	.word	0x08001ae5
 8001b38:	08001ae5 	.word	0x08001ae5
 8001b3c:	08001c8f 	.word	0x08001c8f
 8001b40:	08001ae5 	.word	0x08001ae5
 8001b44:	08001b95 	.word	0x08001b95
 8001b48:	08001ae5 	.word	0x08001ae5
 8001b4c:	08001ae5 	.word	0x08001ae5
 8001b50:	08001c2f 	.word	0x08001c2f
 8001b54:	682b      	ldr	r3, [r5, #0]
 8001b56:	1d1a      	adds	r2, r3, #4
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	602a      	str	r2, [r5, #0]
 8001b5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001b60:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001b64:	2301      	movs	r3, #1
 8001b66:	e09f      	b.n	8001ca8 <_printf_i+0x1ec>
 8001b68:	6820      	ldr	r0, [r4, #0]
 8001b6a:	682b      	ldr	r3, [r5, #0]
 8001b6c:	0607      	lsls	r7, r0, #24
 8001b6e:	f103 0104 	add.w	r1, r3, #4
 8001b72:	6029      	str	r1, [r5, #0]
 8001b74:	d501      	bpl.n	8001b7a <_printf_i+0xbe>
 8001b76:	681e      	ldr	r6, [r3, #0]
 8001b78:	e003      	b.n	8001b82 <_printf_i+0xc6>
 8001b7a:	0646      	lsls	r6, r0, #25
 8001b7c:	d5fb      	bpl.n	8001b76 <_printf_i+0xba>
 8001b7e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8001b82:	2e00      	cmp	r6, #0
 8001b84:	da03      	bge.n	8001b8e <_printf_i+0xd2>
 8001b86:	232d      	movs	r3, #45	; 0x2d
 8001b88:	4276      	negs	r6, r6
 8001b8a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001b8e:	485a      	ldr	r0, [pc, #360]	; (8001cf8 <_printf_i+0x23c>)
 8001b90:	230a      	movs	r3, #10
 8001b92:	e012      	b.n	8001bba <_printf_i+0xfe>
 8001b94:	682b      	ldr	r3, [r5, #0]
 8001b96:	6820      	ldr	r0, [r4, #0]
 8001b98:	1d19      	adds	r1, r3, #4
 8001b9a:	6029      	str	r1, [r5, #0]
 8001b9c:	0605      	lsls	r5, r0, #24
 8001b9e:	d501      	bpl.n	8001ba4 <_printf_i+0xe8>
 8001ba0:	681e      	ldr	r6, [r3, #0]
 8001ba2:	e002      	b.n	8001baa <_printf_i+0xee>
 8001ba4:	0641      	lsls	r1, r0, #25
 8001ba6:	d5fb      	bpl.n	8001ba0 <_printf_i+0xe4>
 8001ba8:	881e      	ldrh	r6, [r3, #0]
 8001baa:	4853      	ldr	r0, [pc, #332]	; (8001cf8 <_printf_i+0x23c>)
 8001bac:	2f6f      	cmp	r7, #111	; 0x6f
 8001bae:	bf0c      	ite	eq
 8001bb0:	2308      	moveq	r3, #8
 8001bb2:	230a      	movne	r3, #10
 8001bb4:	2100      	movs	r1, #0
 8001bb6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001bba:	6865      	ldr	r5, [r4, #4]
 8001bbc:	60a5      	str	r5, [r4, #8]
 8001bbe:	2d00      	cmp	r5, #0
 8001bc0:	bfa2      	ittt	ge
 8001bc2:	6821      	ldrge	r1, [r4, #0]
 8001bc4:	f021 0104 	bicge.w	r1, r1, #4
 8001bc8:	6021      	strge	r1, [r4, #0]
 8001bca:	b90e      	cbnz	r6, 8001bd0 <_printf_i+0x114>
 8001bcc:	2d00      	cmp	r5, #0
 8001bce:	d04b      	beq.n	8001c68 <_printf_i+0x1ac>
 8001bd0:	4615      	mov	r5, r2
 8001bd2:	fbb6 f1f3 	udiv	r1, r6, r3
 8001bd6:	fb03 6711 	mls	r7, r3, r1, r6
 8001bda:	5dc7      	ldrb	r7, [r0, r7]
 8001bdc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001be0:	4637      	mov	r7, r6
 8001be2:	42bb      	cmp	r3, r7
 8001be4:	460e      	mov	r6, r1
 8001be6:	d9f4      	bls.n	8001bd2 <_printf_i+0x116>
 8001be8:	2b08      	cmp	r3, #8
 8001bea:	d10b      	bne.n	8001c04 <_printf_i+0x148>
 8001bec:	6823      	ldr	r3, [r4, #0]
 8001bee:	07de      	lsls	r6, r3, #31
 8001bf0:	d508      	bpl.n	8001c04 <_printf_i+0x148>
 8001bf2:	6923      	ldr	r3, [r4, #16]
 8001bf4:	6861      	ldr	r1, [r4, #4]
 8001bf6:	4299      	cmp	r1, r3
 8001bf8:	bfde      	ittt	le
 8001bfa:	2330      	movle	r3, #48	; 0x30
 8001bfc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001c00:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001c04:	1b52      	subs	r2, r2, r5
 8001c06:	6122      	str	r2, [r4, #16]
 8001c08:	f8cd a000 	str.w	sl, [sp]
 8001c0c:	464b      	mov	r3, r9
 8001c0e:	aa03      	add	r2, sp, #12
 8001c10:	4621      	mov	r1, r4
 8001c12:	4640      	mov	r0, r8
 8001c14:	f7ff fee4 	bl	80019e0 <_printf_common>
 8001c18:	3001      	adds	r0, #1
 8001c1a:	d14a      	bne.n	8001cb2 <_printf_i+0x1f6>
 8001c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c20:	b004      	add	sp, #16
 8001c22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001c26:	6823      	ldr	r3, [r4, #0]
 8001c28:	f043 0320 	orr.w	r3, r3, #32
 8001c2c:	6023      	str	r3, [r4, #0]
 8001c2e:	4833      	ldr	r0, [pc, #204]	; (8001cfc <_printf_i+0x240>)
 8001c30:	2778      	movs	r7, #120	; 0x78
 8001c32:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8001c36:	6823      	ldr	r3, [r4, #0]
 8001c38:	6829      	ldr	r1, [r5, #0]
 8001c3a:	061f      	lsls	r7, r3, #24
 8001c3c:	f851 6b04 	ldr.w	r6, [r1], #4
 8001c40:	d402      	bmi.n	8001c48 <_printf_i+0x18c>
 8001c42:	065f      	lsls	r7, r3, #25
 8001c44:	bf48      	it	mi
 8001c46:	b2b6      	uxthmi	r6, r6
 8001c48:	07df      	lsls	r7, r3, #31
 8001c4a:	bf48      	it	mi
 8001c4c:	f043 0320 	orrmi.w	r3, r3, #32
 8001c50:	6029      	str	r1, [r5, #0]
 8001c52:	bf48      	it	mi
 8001c54:	6023      	strmi	r3, [r4, #0]
 8001c56:	b91e      	cbnz	r6, 8001c60 <_printf_i+0x1a4>
 8001c58:	6823      	ldr	r3, [r4, #0]
 8001c5a:	f023 0320 	bic.w	r3, r3, #32
 8001c5e:	6023      	str	r3, [r4, #0]
 8001c60:	2310      	movs	r3, #16
 8001c62:	e7a7      	b.n	8001bb4 <_printf_i+0xf8>
 8001c64:	4824      	ldr	r0, [pc, #144]	; (8001cf8 <_printf_i+0x23c>)
 8001c66:	e7e4      	b.n	8001c32 <_printf_i+0x176>
 8001c68:	4615      	mov	r5, r2
 8001c6a:	e7bd      	b.n	8001be8 <_printf_i+0x12c>
 8001c6c:	682b      	ldr	r3, [r5, #0]
 8001c6e:	6826      	ldr	r6, [r4, #0]
 8001c70:	6961      	ldr	r1, [r4, #20]
 8001c72:	1d18      	adds	r0, r3, #4
 8001c74:	6028      	str	r0, [r5, #0]
 8001c76:	0635      	lsls	r5, r6, #24
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	d501      	bpl.n	8001c80 <_printf_i+0x1c4>
 8001c7c:	6019      	str	r1, [r3, #0]
 8001c7e:	e002      	b.n	8001c86 <_printf_i+0x1ca>
 8001c80:	0670      	lsls	r0, r6, #25
 8001c82:	d5fb      	bpl.n	8001c7c <_printf_i+0x1c0>
 8001c84:	8019      	strh	r1, [r3, #0]
 8001c86:	2300      	movs	r3, #0
 8001c88:	6123      	str	r3, [r4, #16]
 8001c8a:	4615      	mov	r5, r2
 8001c8c:	e7bc      	b.n	8001c08 <_printf_i+0x14c>
 8001c8e:	682b      	ldr	r3, [r5, #0]
 8001c90:	1d1a      	adds	r2, r3, #4
 8001c92:	602a      	str	r2, [r5, #0]
 8001c94:	681d      	ldr	r5, [r3, #0]
 8001c96:	6862      	ldr	r2, [r4, #4]
 8001c98:	2100      	movs	r1, #0
 8001c9a:	4628      	mov	r0, r5
 8001c9c:	f7fe faa0 	bl	80001e0 <memchr>
 8001ca0:	b108      	cbz	r0, 8001ca6 <_printf_i+0x1ea>
 8001ca2:	1b40      	subs	r0, r0, r5
 8001ca4:	6060      	str	r0, [r4, #4]
 8001ca6:	6863      	ldr	r3, [r4, #4]
 8001ca8:	6123      	str	r3, [r4, #16]
 8001caa:	2300      	movs	r3, #0
 8001cac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001cb0:	e7aa      	b.n	8001c08 <_printf_i+0x14c>
 8001cb2:	6923      	ldr	r3, [r4, #16]
 8001cb4:	462a      	mov	r2, r5
 8001cb6:	4649      	mov	r1, r9
 8001cb8:	4640      	mov	r0, r8
 8001cba:	47d0      	blx	sl
 8001cbc:	3001      	adds	r0, #1
 8001cbe:	d0ad      	beq.n	8001c1c <_printf_i+0x160>
 8001cc0:	6823      	ldr	r3, [r4, #0]
 8001cc2:	079b      	lsls	r3, r3, #30
 8001cc4:	d413      	bmi.n	8001cee <_printf_i+0x232>
 8001cc6:	68e0      	ldr	r0, [r4, #12]
 8001cc8:	9b03      	ldr	r3, [sp, #12]
 8001cca:	4298      	cmp	r0, r3
 8001ccc:	bfb8      	it	lt
 8001cce:	4618      	movlt	r0, r3
 8001cd0:	e7a6      	b.n	8001c20 <_printf_i+0x164>
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	4632      	mov	r2, r6
 8001cd6:	4649      	mov	r1, r9
 8001cd8:	4640      	mov	r0, r8
 8001cda:	47d0      	blx	sl
 8001cdc:	3001      	adds	r0, #1
 8001cde:	d09d      	beq.n	8001c1c <_printf_i+0x160>
 8001ce0:	3501      	adds	r5, #1
 8001ce2:	68e3      	ldr	r3, [r4, #12]
 8001ce4:	9903      	ldr	r1, [sp, #12]
 8001ce6:	1a5b      	subs	r3, r3, r1
 8001ce8:	42ab      	cmp	r3, r5
 8001cea:	dcf2      	bgt.n	8001cd2 <_printf_i+0x216>
 8001cec:	e7eb      	b.n	8001cc6 <_printf_i+0x20a>
 8001cee:	2500      	movs	r5, #0
 8001cf0:	f104 0619 	add.w	r6, r4, #25
 8001cf4:	e7f5      	b.n	8001ce2 <_printf_i+0x226>
 8001cf6:	bf00      	nop
 8001cf8:	08002275 	.word	0x08002275
 8001cfc:	08002286 	.word	0x08002286

08001d00 <__sflush_r>:
 8001d00:	898a      	ldrh	r2, [r1, #12]
 8001d02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001d06:	4605      	mov	r5, r0
 8001d08:	0710      	lsls	r0, r2, #28
 8001d0a:	460c      	mov	r4, r1
 8001d0c:	d458      	bmi.n	8001dc0 <__sflush_r+0xc0>
 8001d0e:	684b      	ldr	r3, [r1, #4]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	dc05      	bgt.n	8001d20 <__sflush_r+0x20>
 8001d14:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	dc02      	bgt.n	8001d20 <__sflush_r+0x20>
 8001d1a:	2000      	movs	r0, #0
 8001d1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001d20:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001d22:	2e00      	cmp	r6, #0
 8001d24:	d0f9      	beq.n	8001d1a <__sflush_r+0x1a>
 8001d26:	2300      	movs	r3, #0
 8001d28:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001d2c:	682f      	ldr	r7, [r5, #0]
 8001d2e:	6a21      	ldr	r1, [r4, #32]
 8001d30:	602b      	str	r3, [r5, #0]
 8001d32:	d032      	beq.n	8001d9a <__sflush_r+0x9a>
 8001d34:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001d36:	89a3      	ldrh	r3, [r4, #12]
 8001d38:	075a      	lsls	r2, r3, #29
 8001d3a:	d505      	bpl.n	8001d48 <__sflush_r+0x48>
 8001d3c:	6863      	ldr	r3, [r4, #4]
 8001d3e:	1ac0      	subs	r0, r0, r3
 8001d40:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001d42:	b10b      	cbz	r3, 8001d48 <__sflush_r+0x48>
 8001d44:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001d46:	1ac0      	subs	r0, r0, r3
 8001d48:	2300      	movs	r3, #0
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001d4e:	6a21      	ldr	r1, [r4, #32]
 8001d50:	4628      	mov	r0, r5
 8001d52:	47b0      	blx	r6
 8001d54:	1c43      	adds	r3, r0, #1
 8001d56:	89a3      	ldrh	r3, [r4, #12]
 8001d58:	d106      	bne.n	8001d68 <__sflush_r+0x68>
 8001d5a:	6829      	ldr	r1, [r5, #0]
 8001d5c:	291d      	cmp	r1, #29
 8001d5e:	d82b      	bhi.n	8001db8 <__sflush_r+0xb8>
 8001d60:	4a29      	ldr	r2, [pc, #164]	; (8001e08 <__sflush_r+0x108>)
 8001d62:	410a      	asrs	r2, r1
 8001d64:	07d6      	lsls	r6, r2, #31
 8001d66:	d427      	bmi.n	8001db8 <__sflush_r+0xb8>
 8001d68:	2200      	movs	r2, #0
 8001d6a:	6062      	str	r2, [r4, #4]
 8001d6c:	04d9      	lsls	r1, r3, #19
 8001d6e:	6922      	ldr	r2, [r4, #16]
 8001d70:	6022      	str	r2, [r4, #0]
 8001d72:	d504      	bpl.n	8001d7e <__sflush_r+0x7e>
 8001d74:	1c42      	adds	r2, r0, #1
 8001d76:	d101      	bne.n	8001d7c <__sflush_r+0x7c>
 8001d78:	682b      	ldr	r3, [r5, #0]
 8001d7a:	b903      	cbnz	r3, 8001d7e <__sflush_r+0x7e>
 8001d7c:	6560      	str	r0, [r4, #84]	; 0x54
 8001d7e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001d80:	602f      	str	r7, [r5, #0]
 8001d82:	2900      	cmp	r1, #0
 8001d84:	d0c9      	beq.n	8001d1a <__sflush_r+0x1a>
 8001d86:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001d8a:	4299      	cmp	r1, r3
 8001d8c:	d002      	beq.n	8001d94 <__sflush_r+0x94>
 8001d8e:	4628      	mov	r0, r5
 8001d90:	f7ff fbe2 	bl	8001558 <_free_r>
 8001d94:	2000      	movs	r0, #0
 8001d96:	6360      	str	r0, [r4, #52]	; 0x34
 8001d98:	e7c0      	b.n	8001d1c <__sflush_r+0x1c>
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	4628      	mov	r0, r5
 8001d9e:	47b0      	blx	r6
 8001da0:	1c41      	adds	r1, r0, #1
 8001da2:	d1c8      	bne.n	8001d36 <__sflush_r+0x36>
 8001da4:	682b      	ldr	r3, [r5, #0]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d0c5      	beq.n	8001d36 <__sflush_r+0x36>
 8001daa:	2b1d      	cmp	r3, #29
 8001dac:	d001      	beq.n	8001db2 <__sflush_r+0xb2>
 8001dae:	2b16      	cmp	r3, #22
 8001db0:	d101      	bne.n	8001db6 <__sflush_r+0xb6>
 8001db2:	602f      	str	r7, [r5, #0]
 8001db4:	e7b1      	b.n	8001d1a <__sflush_r+0x1a>
 8001db6:	89a3      	ldrh	r3, [r4, #12]
 8001db8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001dbc:	81a3      	strh	r3, [r4, #12]
 8001dbe:	e7ad      	b.n	8001d1c <__sflush_r+0x1c>
 8001dc0:	690f      	ldr	r7, [r1, #16]
 8001dc2:	2f00      	cmp	r7, #0
 8001dc4:	d0a9      	beq.n	8001d1a <__sflush_r+0x1a>
 8001dc6:	0793      	lsls	r3, r2, #30
 8001dc8:	680e      	ldr	r6, [r1, #0]
 8001dca:	bf08      	it	eq
 8001dcc:	694b      	ldreq	r3, [r1, #20]
 8001dce:	600f      	str	r7, [r1, #0]
 8001dd0:	bf18      	it	ne
 8001dd2:	2300      	movne	r3, #0
 8001dd4:	eba6 0807 	sub.w	r8, r6, r7
 8001dd8:	608b      	str	r3, [r1, #8]
 8001dda:	f1b8 0f00 	cmp.w	r8, #0
 8001dde:	dd9c      	ble.n	8001d1a <__sflush_r+0x1a>
 8001de0:	6a21      	ldr	r1, [r4, #32]
 8001de2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001de4:	4643      	mov	r3, r8
 8001de6:	463a      	mov	r2, r7
 8001de8:	4628      	mov	r0, r5
 8001dea:	47b0      	blx	r6
 8001dec:	2800      	cmp	r0, #0
 8001dee:	dc06      	bgt.n	8001dfe <__sflush_r+0xfe>
 8001df0:	89a3      	ldrh	r3, [r4, #12]
 8001df2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001df6:	81a3      	strh	r3, [r4, #12]
 8001df8:	f04f 30ff 	mov.w	r0, #4294967295
 8001dfc:	e78e      	b.n	8001d1c <__sflush_r+0x1c>
 8001dfe:	4407      	add	r7, r0
 8001e00:	eba8 0800 	sub.w	r8, r8, r0
 8001e04:	e7e9      	b.n	8001dda <__sflush_r+0xda>
 8001e06:	bf00      	nop
 8001e08:	dfbffffe 	.word	0xdfbffffe

08001e0c <_fflush_r>:
 8001e0c:	b538      	push	{r3, r4, r5, lr}
 8001e0e:	690b      	ldr	r3, [r1, #16]
 8001e10:	4605      	mov	r5, r0
 8001e12:	460c      	mov	r4, r1
 8001e14:	b913      	cbnz	r3, 8001e1c <_fflush_r+0x10>
 8001e16:	2500      	movs	r5, #0
 8001e18:	4628      	mov	r0, r5
 8001e1a:	bd38      	pop	{r3, r4, r5, pc}
 8001e1c:	b118      	cbz	r0, 8001e26 <_fflush_r+0x1a>
 8001e1e:	6a03      	ldr	r3, [r0, #32]
 8001e20:	b90b      	cbnz	r3, 8001e26 <_fflush_r+0x1a>
 8001e22:	f7ff f9d3 	bl	80011cc <__sinit>
 8001e26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d0f3      	beq.n	8001e16 <_fflush_r+0xa>
 8001e2e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001e30:	07d0      	lsls	r0, r2, #31
 8001e32:	d404      	bmi.n	8001e3e <_fflush_r+0x32>
 8001e34:	0599      	lsls	r1, r3, #22
 8001e36:	d402      	bmi.n	8001e3e <_fflush_r+0x32>
 8001e38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001e3a:	f7ff fb8a 	bl	8001552 <__retarget_lock_acquire_recursive>
 8001e3e:	4628      	mov	r0, r5
 8001e40:	4621      	mov	r1, r4
 8001e42:	f7ff ff5d 	bl	8001d00 <__sflush_r>
 8001e46:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001e48:	07da      	lsls	r2, r3, #31
 8001e4a:	4605      	mov	r5, r0
 8001e4c:	d4e4      	bmi.n	8001e18 <_fflush_r+0xc>
 8001e4e:	89a3      	ldrh	r3, [r4, #12]
 8001e50:	059b      	lsls	r3, r3, #22
 8001e52:	d4e1      	bmi.n	8001e18 <_fflush_r+0xc>
 8001e54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001e56:	f7ff fb7d 	bl	8001554 <__retarget_lock_release_recursive>
 8001e5a:	e7dd      	b.n	8001e18 <_fflush_r+0xc>

08001e5c <__swhatbuf_r>:
 8001e5c:	b570      	push	{r4, r5, r6, lr}
 8001e5e:	460c      	mov	r4, r1
 8001e60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001e64:	2900      	cmp	r1, #0
 8001e66:	b096      	sub	sp, #88	; 0x58
 8001e68:	4615      	mov	r5, r2
 8001e6a:	461e      	mov	r6, r3
 8001e6c:	da0d      	bge.n	8001e8a <__swhatbuf_r+0x2e>
 8001e6e:	89a3      	ldrh	r3, [r4, #12]
 8001e70:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001e74:	f04f 0100 	mov.w	r1, #0
 8001e78:	bf0c      	ite	eq
 8001e7a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8001e7e:	2340      	movne	r3, #64	; 0x40
 8001e80:	2000      	movs	r0, #0
 8001e82:	6031      	str	r1, [r6, #0]
 8001e84:	602b      	str	r3, [r5, #0]
 8001e86:	b016      	add	sp, #88	; 0x58
 8001e88:	bd70      	pop	{r4, r5, r6, pc}
 8001e8a:	466a      	mov	r2, sp
 8001e8c:	f000 f912 	bl	80020b4 <_fstat_r>
 8001e90:	2800      	cmp	r0, #0
 8001e92:	dbec      	blt.n	8001e6e <__swhatbuf_r+0x12>
 8001e94:	9901      	ldr	r1, [sp, #4]
 8001e96:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8001e9a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8001e9e:	4259      	negs	r1, r3
 8001ea0:	4159      	adcs	r1, r3
 8001ea2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ea6:	e7eb      	b.n	8001e80 <__swhatbuf_r+0x24>

08001ea8 <__smakebuf_r>:
 8001ea8:	898b      	ldrh	r3, [r1, #12]
 8001eaa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001eac:	079d      	lsls	r5, r3, #30
 8001eae:	4606      	mov	r6, r0
 8001eb0:	460c      	mov	r4, r1
 8001eb2:	d507      	bpl.n	8001ec4 <__smakebuf_r+0x1c>
 8001eb4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001eb8:	6023      	str	r3, [r4, #0]
 8001eba:	6123      	str	r3, [r4, #16]
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	6163      	str	r3, [r4, #20]
 8001ec0:	b002      	add	sp, #8
 8001ec2:	bd70      	pop	{r4, r5, r6, pc}
 8001ec4:	ab01      	add	r3, sp, #4
 8001ec6:	466a      	mov	r2, sp
 8001ec8:	f7ff ffc8 	bl	8001e5c <__swhatbuf_r>
 8001ecc:	9900      	ldr	r1, [sp, #0]
 8001ece:	4605      	mov	r5, r0
 8001ed0:	4630      	mov	r0, r6
 8001ed2:	f7ff fbb5 	bl	8001640 <_malloc_r>
 8001ed6:	b948      	cbnz	r0, 8001eec <__smakebuf_r+0x44>
 8001ed8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001edc:	059a      	lsls	r2, r3, #22
 8001ede:	d4ef      	bmi.n	8001ec0 <__smakebuf_r+0x18>
 8001ee0:	f023 0303 	bic.w	r3, r3, #3
 8001ee4:	f043 0302 	orr.w	r3, r3, #2
 8001ee8:	81a3      	strh	r3, [r4, #12]
 8001eea:	e7e3      	b.n	8001eb4 <__smakebuf_r+0xc>
 8001eec:	89a3      	ldrh	r3, [r4, #12]
 8001eee:	6020      	str	r0, [r4, #0]
 8001ef0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ef4:	81a3      	strh	r3, [r4, #12]
 8001ef6:	9b00      	ldr	r3, [sp, #0]
 8001ef8:	6163      	str	r3, [r4, #20]
 8001efa:	9b01      	ldr	r3, [sp, #4]
 8001efc:	6120      	str	r0, [r4, #16]
 8001efe:	b15b      	cbz	r3, 8001f18 <__smakebuf_r+0x70>
 8001f00:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001f04:	4630      	mov	r0, r6
 8001f06:	f000 f8e7 	bl	80020d8 <_isatty_r>
 8001f0a:	b128      	cbz	r0, 8001f18 <__smakebuf_r+0x70>
 8001f0c:	89a3      	ldrh	r3, [r4, #12]
 8001f0e:	f023 0303 	bic.w	r3, r3, #3
 8001f12:	f043 0301 	orr.w	r3, r3, #1
 8001f16:	81a3      	strh	r3, [r4, #12]
 8001f18:	89a3      	ldrh	r3, [r4, #12]
 8001f1a:	431d      	orrs	r5, r3
 8001f1c:	81a5      	strh	r5, [r4, #12]
 8001f1e:	e7cf      	b.n	8001ec0 <__smakebuf_r+0x18>

08001f20 <_putc_r>:
 8001f20:	b570      	push	{r4, r5, r6, lr}
 8001f22:	460d      	mov	r5, r1
 8001f24:	4614      	mov	r4, r2
 8001f26:	4606      	mov	r6, r0
 8001f28:	b118      	cbz	r0, 8001f32 <_putc_r+0x12>
 8001f2a:	6a03      	ldr	r3, [r0, #32]
 8001f2c:	b90b      	cbnz	r3, 8001f32 <_putc_r+0x12>
 8001f2e:	f7ff f94d 	bl	80011cc <__sinit>
 8001f32:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001f34:	07d8      	lsls	r0, r3, #31
 8001f36:	d405      	bmi.n	8001f44 <_putc_r+0x24>
 8001f38:	89a3      	ldrh	r3, [r4, #12]
 8001f3a:	0599      	lsls	r1, r3, #22
 8001f3c:	d402      	bmi.n	8001f44 <_putc_r+0x24>
 8001f3e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001f40:	f7ff fb07 	bl	8001552 <__retarget_lock_acquire_recursive>
 8001f44:	68a3      	ldr	r3, [r4, #8]
 8001f46:	3b01      	subs	r3, #1
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	60a3      	str	r3, [r4, #8]
 8001f4c:	da05      	bge.n	8001f5a <_putc_r+0x3a>
 8001f4e:	69a2      	ldr	r2, [r4, #24]
 8001f50:	4293      	cmp	r3, r2
 8001f52:	db12      	blt.n	8001f7a <_putc_r+0x5a>
 8001f54:	b2eb      	uxtb	r3, r5
 8001f56:	2b0a      	cmp	r3, #10
 8001f58:	d00f      	beq.n	8001f7a <_putc_r+0x5a>
 8001f5a:	6823      	ldr	r3, [r4, #0]
 8001f5c:	1c5a      	adds	r2, r3, #1
 8001f5e:	6022      	str	r2, [r4, #0]
 8001f60:	701d      	strb	r5, [r3, #0]
 8001f62:	b2ed      	uxtb	r5, r5
 8001f64:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001f66:	07da      	lsls	r2, r3, #31
 8001f68:	d405      	bmi.n	8001f76 <_putc_r+0x56>
 8001f6a:	89a3      	ldrh	r3, [r4, #12]
 8001f6c:	059b      	lsls	r3, r3, #22
 8001f6e:	d402      	bmi.n	8001f76 <_putc_r+0x56>
 8001f70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001f72:	f7ff faef 	bl	8001554 <__retarget_lock_release_recursive>
 8001f76:	4628      	mov	r0, r5
 8001f78:	bd70      	pop	{r4, r5, r6, pc}
 8001f7a:	4629      	mov	r1, r5
 8001f7c:	4622      	mov	r2, r4
 8001f7e:	4630      	mov	r0, r6
 8001f80:	f000 f802 	bl	8001f88 <__swbuf_r>
 8001f84:	4605      	mov	r5, r0
 8001f86:	e7ed      	b.n	8001f64 <_putc_r+0x44>

08001f88 <__swbuf_r>:
 8001f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f8a:	460e      	mov	r6, r1
 8001f8c:	4614      	mov	r4, r2
 8001f8e:	4605      	mov	r5, r0
 8001f90:	b118      	cbz	r0, 8001f9a <__swbuf_r+0x12>
 8001f92:	6a03      	ldr	r3, [r0, #32]
 8001f94:	b90b      	cbnz	r3, 8001f9a <__swbuf_r+0x12>
 8001f96:	f7ff f919 	bl	80011cc <__sinit>
 8001f9a:	69a3      	ldr	r3, [r4, #24]
 8001f9c:	60a3      	str	r3, [r4, #8]
 8001f9e:	89a3      	ldrh	r3, [r4, #12]
 8001fa0:	071a      	lsls	r2, r3, #28
 8001fa2:	d525      	bpl.n	8001ff0 <__swbuf_r+0x68>
 8001fa4:	6923      	ldr	r3, [r4, #16]
 8001fa6:	b31b      	cbz	r3, 8001ff0 <__swbuf_r+0x68>
 8001fa8:	6823      	ldr	r3, [r4, #0]
 8001faa:	6922      	ldr	r2, [r4, #16]
 8001fac:	1a98      	subs	r0, r3, r2
 8001fae:	6963      	ldr	r3, [r4, #20]
 8001fb0:	b2f6      	uxtb	r6, r6
 8001fb2:	4283      	cmp	r3, r0
 8001fb4:	4637      	mov	r7, r6
 8001fb6:	dc04      	bgt.n	8001fc2 <__swbuf_r+0x3a>
 8001fb8:	4621      	mov	r1, r4
 8001fba:	4628      	mov	r0, r5
 8001fbc:	f7ff ff26 	bl	8001e0c <_fflush_r>
 8001fc0:	b9e0      	cbnz	r0, 8001ffc <__swbuf_r+0x74>
 8001fc2:	68a3      	ldr	r3, [r4, #8]
 8001fc4:	3b01      	subs	r3, #1
 8001fc6:	60a3      	str	r3, [r4, #8]
 8001fc8:	6823      	ldr	r3, [r4, #0]
 8001fca:	1c5a      	adds	r2, r3, #1
 8001fcc:	6022      	str	r2, [r4, #0]
 8001fce:	701e      	strb	r6, [r3, #0]
 8001fd0:	6962      	ldr	r2, [r4, #20]
 8001fd2:	1c43      	adds	r3, r0, #1
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d004      	beq.n	8001fe2 <__swbuf_r+0x5a>
 8001fd8:	89a3      	ldrh	r3, [r4, #12]
 8001fda:	07db      	lsls	r3, r3, #31
 8001fdc:	d506      	bpl.n	8001fec <__swbuf_r+0x64>
 8001fde:	2e0a      	cmp	r6, #10
 8001fe0:	d104      	bne.n	8001fec <__swbuf_r+0x64>
 8001fe2:	4621      	mov	r1, r4
 8001fe4:	4628      	mov	r0, r5
 8001fe6:	f7ff ff11 	bl	8001e0c <_fflush_r>
 8001fea:	b938      	cbnz	r0, 8001ffc <__swbuf_r+0x74>
 8001fec:	4638      	mov	r0, r7
 8001fee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001ff0:	4621      	mov	r1, r4
 8001ff2:	4628      	mov	r0, r5
 8001ff4:	f000 f806 	bl	8002004 <__swsetup_r>
 8001ff8:	2800      	cmp	r0, #0
 8001ffa:	d0d5      	beq.n	8001fa8 <__swbuf_r+0x20>
 8001ffc:	f04f 37ff 	mov.w	r7, #4294967295
 8002000:	e7f4      	b.n	8001fec <__swbuf_r+0x64>
	...

08002004 <__swsetup_r>:
 8002004:	b538      	push	{r3, r4, r5, lr}
 8002006:	4b2a      	ldr	r3, [pc, #168]	; (80020b0 <__swsetup_r+0xac>)
 8002008:	4605      	mov	r5, r0
 800200a:	6818      	ldr	r0, [r3, #0]
 800200c:	460c      	mov	r4, r1
 800200e:	b118      	cbz	r0, 8002018 <__swsetup_r+0x14>
 8002010:	6a03      	ldr	r3, [r0, #32]
 8002012:	b90b      	cbnz	r3, 8002018 <__swsetup_r+0x14>
 8002014:	f7ff f8da 	bl	80011cc <__sinit>
 8002018:	89a3      	ldrh	r3, [r4, #12]
 800201a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800201e:	0718      	lsls	r0, r3, #28
 8002020:	d422      	bmi.n	8002068 <__swsetup_r+0x64>
 8002022:	06d9      	lsls	r1, r3, #27
 8002024:	d407      	bmi.n	8002036 <__swsetup_r+0x32>
 8002026:	2309      	movs	r3, #9
 8002028:	602b      	str	r3, [r5, #0]
 800202a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800202e:	81a3      	strh	r3, [r4, #12]
 8002030:	f04f 30ff 	mov.w	r0, #4294967295
 8002034:	e034      	b.n	80020a0 <__swsetup_r+0x9c>
 8002036:	0758      	lsls	r0, r3, #29
 8002038:	d512      	bpl.n	8002060 <__swsetup_r+0x5c>
 800203a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800203c:	b141      	cbz	r1, 8002050 <__swsetup_r+0x4c>
 800203e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002042:	4299      	cmp	r1, r3
 8002044:	d002      	beq.n	800204c <__swsetup_r+0x48>
 8002046:	4628      	mov	r0, r5
 8002048:	f7ff fa86 	bl	8001558 <_free_r>
 800204c:	2300      	movs	r3, #0
 800204e:	6363      	str	r3, [r4, #52]	; 0x34
 8002050:	89a3      	ldrh	r3, [r4, #12]
 8002052:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002056:	81a3      	strh	r3, [r4, #12]
 8002058:	2300      	movs	r3, #0
 800205a:	6063      	str	r3, [r4, #4]
 800205c:	6923      	ldr	r3, [r4, #16]
 800205e:	6023      	str	r3, [r4, #0]
 8002060:	89a3      	ldrh	r3, [r4, #12]
 8002062:	f043 0308 	orr.w	r3, r3, #8
 8002066:	81a3      	strh	r3, [r4, #12]
 8002068:	6923      	ldr	r3, [r4, #16]
 800206a:	b94b      	cbnz	r3, 8002080 <__swsetup_r+0x7c>
 800206c:	89a3      	ldrh	r3, [r4, #12]
 800206e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002072:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002076:	d003      	beq.n	8002080 <__swsetup_r+0x7c>
 8002078:	4621      	mov	r1, r4
 800207a:	4628      	mov	r0, r5
 800207c:	f7ff ff14 	bl	8001ea8 <__smakebuf_r>
 8002080:	89a0      	ldrh	r0, [r4, #12]
 8002082:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002086:	f010 0301 	ands.w	r3, r0, #1
 800208a:	d00a      	beq.n	80020a2 <__swsetup_r+0x9e>
 800208c:	2300      	movs	r3, #0
 800208e:	60a3      	str	r3, [r4, #8]
 8002090:	6963      	ldr	r3, [r4, #20]
 8002092:	425b      	negs	r3, r3
 8002094:	61a3      	str	r3, [r4, #24]
 8002096:	6923      	ldr	r3, [r4, #16]
 8002098:	b943      	cbnz	r3, 80020ac <__swsetup_r+0xa8>
 800209a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800209e:	d1c4      	bne.n	800202a <__swsetup_r+0x26>
 80020a0:	bd38      	pop	{r3, r4, r5, pc}
 80020a2:	0781      	lsls	r1, r0, #30
 80020a4:	bf58      	it	pl
 80020a6:	6963      	ldrpl	r3, [r4, #20]
 80020a8:	60a3      	str	r3, [r4, #8]
 80020aa:	e7f4      	b.n	8002096 <__swsetup_r+0x92>
 80020ac:	2000      	movs	r0, #0
 80020ae:	e7f7      	b.n	80020a0 <__swsetup_r+0x9c>
 80020b0:	20000084 	.word	0x20000084

080020b4 <_fstat_r>:
 80020b4:	b538      	push	{r3, r4, r5, lr}
 80020b6:	4d07      	ldr	r5, [pc, #28]	; (80020d4 <_fstat_r+0x20>)
 80020b8:	2300      	movs	r3, #0
 80020ba:	4604      	mov	r4, r0
 80020bc:	4608      	mov	r0, r1
 80020be:	4611      	mov	r1, r2
 80020c0:	602b      	str	r3, [r5, #0]
 80020c2:	f7fe fee4 	bl	8000e8e <_fstat>
 80020c6:	1c43      	adds	r3, r0, #1
 80020c8:	d102      	bne.n	80020d0 <_fstat_r+0x1c>
 80020ca:	682b      	ldr	r3, [r5, #0]
 80020cc:	b103      	cbz	r3, 80020d0 <_fstat_r+0x1c>
 80020ce:	6023      	str	r3, [r4, #0]
 80020d0:	bd38      	pop	{r3, r4, r5, pc}
 80020d2:	bf00      	nop
 80020d4:	200002e8 	.word	0x200002e8

080020d8 <_isatty_r>:
 80020d8:	b538      	push	{r3, r4, r5, lr}
 80020da:	4d06      	ldr	r5, [pc, #24]	; (80020f4 <_isatty_r+0x1c>)
 80020dc:	2300      	movs	r3, #0
 80020de:	4604      	mov	r4, r0
 80020e0:	4608      	mov	r0, r1
 80020e2:	602b      	str	r3, [r5, #0]
 80020e4:	f7fe fee3 	bl	8000eae <_isatty>
 80020e8:	1c43      	adds	r3, r0, #1
 80020ea:	d102      	bne.n	80020f2 <_isatty_r+0x1a>
 80020ec:	682b      	ldr	r3, [r5, #0]
 80020ee:	b103      	cbz	r3, 80020f2 <_isatty_r+0x1a>
 80020f0:	6023      	str	r3, [r4, #0]
 80020f2:	bd38      	pop	{r3, r4, r5, pc}
 80020f4:	200002e8 	.word	0x200002e8

080020f8 <_sbrk_r>:
 80020f8:	b538      	push	{r3, r4, r5, lr}
 80020fa:	4d06      	ldr	r5, [pc, #24]	; (8002114 <_sbrk_r+0x1c>)
 80020fc:	2300      	movs	r3, #0
 80020fe:	4604      	mov	r4, r0
 8002100:	4608      	mov	r0, r1
 8002102:	602b      	str	r3, [r5, #0]
 8002104:	f7fe feec 	bl	8000ee0 <_sbrk>
 8002108:	1c43      	adds	r3, r0, #1
 800210a:	d102      	bne.n	8002112 <_sbrk_r+0x1a>
 800210c:	682b      	ldr	r3, [r5, #0]
 800210e:	b103      	cbz	r3, 8002112 <_sbrk_r+0x1a>
 8002110:	6023      	str	r3, [r4, #0]
 8002112:	bd38      	pop	{r3, r4, r5, pc}
 8002114:	200002e8 	.word	0x200002e8

08002118 <_init>:
 8002118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800211a:	bf00      	nop
 800211c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800211e:	bc08      	pop	{r3}
 8002120:	469e      	mov	lr, r3
 8002122:	4770      	bx	lr

08002124 <_fini>:
 8002124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002126:	bf00      	nop
 8002128:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800212a:	bc08      	pop	{r3}
 800212c:	469e      	mov	lr, r3
 800212e:	4770      	bx	lr
